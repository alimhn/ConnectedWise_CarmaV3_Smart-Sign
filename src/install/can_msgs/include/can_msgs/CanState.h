// Generated by gencpp from file can_msgs/CanState.msg
// DO NOT EDIT!


#ifndef CAN_MSGS_MESSAGE_CANSTATE_H
#define CAN_MSGS_MESSAGE_CANSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_msgs
{
template <class ContainerAllocator>
struct CanState_
{
  typedef CanState_<ContainerAllocator> Type;

  CanState_()
    : driver_state(0)  {
    }
  CanState_(const ContainerAllocator& _alloc)
    : driver_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _driver_state_type;
  _driver_state_type driver_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CLOSED)
  #undef CLOSED
#endif
#if defined(_WIN32) && defined(OPEN)
  #undef OPEN
#endif
#if defined(_WIN32) && defined(READY)
  #undef READY
#endif

  enum {
    CLOSED = 0u,
    OPEN = 1u,
    READY = 2u,
  };


  typedef boost::shared_ptr< ::can_msgs::CanState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_msgs::CanState_<ContainerAllocator> const> ConstPtr;

}; // struct CanState_

typedef ::can_msgs::CanState_<std::allocator<void> > CanState;

typedef boost::shared_ptr< ::can_msgs::CanState > CanStatePtr;
typedef boost::shared_ptr< ::can_msgs::CanState const> CanStateConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_msgs::CanState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_msgs::CanState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_msgs::CanState_<ContainerAllocator1> & lhs, const ::can_msgs::CanState_<ContainerAllocator2> & rhs)
{
  return lhs.driver_state == rhs.driver_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_msgs::CanState_<ContainerAllocator1> & lhs, const ::can_msgs::CanState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_msgs::CanState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_msgs::CanState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_msgs::CanState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_msgs::CanState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_msgs::CanState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_msgs::CanState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_msgs::CanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae2e3357d3e85e9ae470ea447e6ef3b6";
  }

  static const char* value(const ::can_msgs::CanState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae2e3357d3e85e9aULL;
  static const uint64_t static_value2 = 0xe470ea447e6ef3b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_msgs::CanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_msgs/CanState";
  }

  static const char* value(const ::can_msgs::CanState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_msgs::CanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# CanState.msg\n"
"#\n"
"# Message denoting the state of the CAN Bus\n"
"#\n"
"# @author Joe Adkisson\n"
"# @version 0.1\n"
"\n"
"uint8  driver_state\n"
"\n"
"# enumeration values for status:\n"
"uint8 CLOSED=0\n"
"uint8 OPEN=1\n"
"uint8 READY=2\n"
;
  }

  static const char* value(const ::can_msgs::CanState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_msgs::CanState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.driver_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_msgs::CanState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_msgs::CanState_<ContainerAllocator>& v)
  {
    s << indent << "driver_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driver_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_MSGS_MESSAGE_CANSTATE_H
