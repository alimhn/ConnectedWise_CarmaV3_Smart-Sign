# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pacmod_msgs/ShiftAuxRpt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ShiftAuxRpt(genpy.Message):
  _md5sum = "dd3dcb724fff7aa8174cd1060347a710"
  _type = "pacmod_msgs/ShiftAuxRpt"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

bool between_gears
bool between_gears_is_valid
bool stay_in_neutral_mode
bool stay_in_neutral_mode_is_valid
bool brake_interlock_active
bool brake_interlock_active_is_valid
bool speed_interlock_active
bool speed_interlock_active_is_valid
bool gear_number_avail
int8 gear_number

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','between_gears','between_gears_is_valid','stay_in_neutral_mode','stay_in_neutral_mode_is_valid','brake_interlock_active','brake_interlock_active_is_valid','speed_interlock_active','speed_interlock_active_is_valid','gear_number_avail','gear_number']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,between_gears,between_gears_is_valid,stay_in_neutral_mode,stay_in_neutral_mode_is_valid,brake_interlock_active,brake_interlock_active_is_valid,speed_interlock_active,speed_interlock_active_is_valid,gear_number_avail,gear_number

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ShiftAuxRpt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.between_gears is None:
        self.between_gears = False
      if self.between_gears_is_valid is None:
        self.between_gears_is_valid = False
      if self.stay_in_neutral_mode is None:
        self.stay_in_neutral_mode = False
      if self.stay_in_neutral_mode_is_valid is None:
        self.stay_in_neutral_mode_is_valid = False
      if self.brake_interlock_active is None:
        self.brake_interlock_active = False
      if self.brake_interlock_active_is_valid is None:
        self.brake_interlock_active_is_valid = False
      if self.speed_interlock_active is None:
        self.speed_interlock_active = False
      if self.speed_interlock_active_is_valid is None:
        self.speed_interlock_active_is_valid = False
      if self.gear_number_avail is None:
        self.gear_number_avail = False
      if self.gear_number is None:
        self.gear_number = 0
    else:
      self.header = std_msgs.msg.Header()
      self.between_gears = False
      self.between_gears_is_valid = False
      self.stay_in_neutral_mode = False
      self.stay_in_neutral_mode_is_valid = False
      self.brake_interlock_active = False
      self.brake_interlock_active_is_valid = False
      self.speed_interlock_active = False
      self.speed_interlock_active_is_valid = False
      self.gear_number_avail = False
      self.gear_number = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9Bb().pack(_x.between_gears, _x.between_gears_is_valid, _x.stay_in_neutral_mode, _x.stay_in_neutral_mode_is_valid, _x.brake_interlock_active, _x.brake_interlock_active_is_valid, _x.speed_interlock_active, _x.speed_interlock_active_is_valid, _x.gear_number_avail, _x.gear_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.between_gears, _x.between_gears_is_valid, _x.stay_in_neutral_mode, _x.stay_in_neutral_mode_is_valid, _x.brake_interlock_active, _x.brake_interlock_active_is_valid, _x.speed_interlock_active, _x.speed_interlock_active_is_valid, _x.gear_number_avail, _x.gear_number,) = _get_struct_9Bb().unpack(str[start:end])
      self.between_gears = bool(self.between_gears)
      self.between_gears_is_valid = bool(self.between_gears_is_valid)
      self.stay_in_neutral_mode = bool(self.stay_in_neutral_mode)
      self.stay_in_neutral_mode_is_valid = bool(self.stay_in_neutral_mode_is_valid)
      self.brake_interlock_active = bool(self.brake_interlock_active)
      self.brake_interlock_active_is_valid = bool(self.brake_interlock_active_is_valid)
      self.speed_interlock_active = bool(self.speed_interlock_active)
      self.speed_interlock_active_is_valid = bool(self.speed_interlock_active_is_valid)
      self.gear_number_avail = bool(self.gear_number_avail)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9Bb().pack(_x.between_gears, _x.between_gears_is_valid, _x.stay_in_neutral_mode, _x.stay_in_neutral_mode_is_valid, _x.brake_interlock_active, _x.brake_interlock_active_is_valid, _x.speed_interlock_active, _x.speed_interlock_active_is_valid, _x.gear_number_avail, _x.gear_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.between_gears, _x.between_gears_is_valid, _x.stay_in_neutral_mode, _x.stay_in_neutral_mode_is_valid, _x.brake_interlock_active, _x.brake_interlock_active_is_valid, _x.speed_interlock_active, _x.speed_interlock_active_is_valid, _x.gear_number_avail, _x.gear_number,) = _get_struct_9Bb().unpack(str[start:end])
      self.between_gears = bool(self.between_gears)
      self.between_gears_is_valid = bool(self.between_gears_is_valid)
      self.stay_in_neutral_mode = bool(self.stay_in_neutral_mode)
      self.stay_in_neutral_mode_is_valid = bool(self.stay_in_neutral_mode_is_valid)
      self.brake_interlock_active = bool(self.brake_interlock_active)
      self.brake_interlock_active_is_valid = bool(self.brake_interlock_active_is_valid)
      self.speed_interlock_active = bool(self.speed_interlock_active)
      self.speed_interlock_active_is_valid = bool(self.speed_interlock_active_is_valid)
      self.gear_number_avail = bool(self.gear_number_avail)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9Bb = None
def _get_struct_9Bb():
    global _struct_9Bb
    if _struct_9Bb is None:
        _struct_9Bb = struct.Struct("<9Bb")
    return _struct_9Bb
