# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pacmod_msgs/SystemRptFloat.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SystemRptFloat(genpy.Message):
  _md5sum = "e3af53d7d085bbad777634bcc2681141"
  _type = "pacmod_msgs/SystemRptFloat"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

bool enabled
bool override_active
bool command_output_fault
bool input_output_fault
bool output_reported_fault
bool pacmod_fault
bool vehicle_fault

float64 manual_input
float64 command
float64 output

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','enabled','override_active','command_output_fault','input_output_fault','output_reported_fault','pacmod_fault','vehicle_fault','manual_input','command','output']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,enabled,override_active,command_output_fault,input_output_fault,output_reported_fault,pacmod_fault,vehicle_fault,manual_input,command,output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemRptFloat, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.enabled is None:
        self.enabled = False
      if self.override_active is None:
        self.override_active = False
      if self.command_output_fault is None:
        self.command_output_fault = False
      if self.input_output_fault is None:
        self.input_output_fault = False
      if self.output_reported_fault is None:
        self.output_reported_fault = False
      if self.pacmod_fault is None:
        self.pacmod_fault = False
      if self.vehicle_fault is None:
        self.vehicle_fault = False
      if self.manual_input is None:
        self.manual_input = 0.
      if self.command is None:
        self.command = 0.
      if self.output is None:
        self.output = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.enabled = False
      self.override_active = False
      self.command_output_fault = False
      self.input_output_fault = False
      self.output_reported_fault = False
      self.pacmod_fault = False
      self.vehicle_fault = False
      self.manual_input = 0.
      self.command = 0.
      self.output = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B3d().pack(_x.enabled, _x.override_active, _x.command_output_fault, _x.input_output_fault, _x.output_reported_fault, _x.pacmod_fault, _x.vehicle_fault, _x.manual_input, _x.command, _x.output))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.enabled, _x.override_active, _x.command_output_fault, _x.input_output_fault, _x.output_reported_fault, _x.pacmod_fault, _x.vehicle_fault, _x.manual_input, _x.command, _x.output,) = _get_struct_7B3d().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.override_active = bool(self.override_active)
      self.command_output_fault = bool(self.command_output_fault)
      self.input_output_fault = bool(self.input_output_fault)
      self.output_reported_fault = bool(self.output_reported_fault)
      self.pacmod_fault = bool(self.pacmod_fault)
      self.vehicle_fault = bool(self.vehicle_fault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B3d().pack(_x.enabled, _x.override_active, _x.command_output_fault, _x.input_output_fault, _x.output_reported_fault, _x.pacmod_fault, _x.vehicle_fault, _x.manual_input, _x.command, _x.output))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 31
      (_x.enabled, _x.override_active, _x.command_output_fault, _x.input_output_fault, _x.output_reported_fault, _x.pacmod_fault, _x.vehicle_fault, _x.manual_input, _x.command, _x.output,) = _get_struct_7B3d().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.override_active = bool(self.override_active)
      self.command_output_fault = bool(self.command_output_fault)
      self.input_output_fault = bool(self.input_output_fault)
      self.output_reported_fault = bool(self.output_reported_fault)
      self.pacmod_fault = bool(self.pacmod_fault)
      self.vehicle_fault = bool(self.vehicle_fault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7B3d = None
def _get_struct_7B3d():
    global _struct_7B3d
    if _struct_7B3d is None:
        _struct_7B3d = struct.Struct("<7B3d")
    return _struct_7B3d
