# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pacmod_msgs/InteriorLightsRpt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class InteriorLightsRpt(genpy.Message):
  _md5sum = "edb83c466d141d95fcc059ad99141e5e"
  _type = "pacmod_msgs/InteriorLightsRpt"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

bool front_dome_lights_on
bool front_dome_lights_on_is_valid
bool rear_dome_lights_on
bool rear_dome_lights_on_is_valid
bool mood_lights_on
bool mood_lights_on_is_valid
uint8 dim_level
bool dim_level_is_valid

uint8 DIM_LEVEL_MIN = 0
uint8 DIM_LEVEL_1 = 1
uint8 DIM_LEVEL_2 = 2
uint8 DIM_LEVEL_3 = 3
uint8 DIM_LEVEL_4 = 4
uint8 DIM_LEVEL_5 = 5
uint8 DIM_LEVEL_6 = 6
uint8 DIM_LEVEL_7 = 7
uint8 DIM_LEVEL_8 = 8
uint8 DIM_LEVEL_9 = 9
uint8 DIM_LEVEL_10 = 10
uint8 DIM_LEVEL_11 = 11
uint8 DIM_LEVEL_MAX = 12

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  DIM_LEVEL_MIN = 0
  DIM_LEVEL_1 = 1
  DIM_LEVEL_2 = 2
  DIM_LEVEL_3 = 3
  DIM_LEVEL_4 = 4
  DIM_LEVEL_5 = 5
  DIM_LEVEL_6 = 6
  DIM_LEVEL_7 = 7
  DIM_LEVEL_8 = 8
  DIM_LEVEL_9 = 9
  DIM_LEVEL_10 = 10
  DIM_LEVEL_11 = 11
  DIM_LEVEL_MAX = 12

  __slots__ = ['header','front_dome_lights_on','front_dome_lights_on_is_valid','rear_dome_lights_on','rear_dome_lights_on_is_valid','mood_lights_on','mood_lights_on_is_valid','dim_level','dim_level_is_valid']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,front_dome_lights_on,front_dome_lights_on_is_valid,rear_dome_lights_on,rear_dome_lights_on_is_valid,mood_lights_on,mood_lights_on_is_valid,dim_level,dim_level_is_valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InteriorLightsRpt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.front_dome_lights_on is None:
        self.front_dome_lights_on = False
      if self.front_dome_lights_on_is_valid is None:
        self.front_dome_lights_on_is_valid = False
      if self.rear_dome_lights_on is None:
        self.rear_dome_lights_on = False
      if self.rear_dome_lights_on_is_valid is None:
        self.rear_dome_lights_on_is_valid = False
      if self.mood_lights_on is None:
        self.mood_lights_on = False
      if self.mood_lights_on_is_valid is None:
        self.mood_lights_on_is_valid = False
      if self.dim_level is None:
        self.dim_level = 0
      if self.dim_level_is_valid is None:
        self.dim_level_is_valid = False
    else:
      self.header = std_msgs.msg.Header()
      self.front_dome_lights_on = False
      self.front_dome_lights_on_is_valid = False
      self.rear_dome_lights_on = False
      self.rear_dome_lights_on_is_valid = False
      self.mood_lights_on = False
      self.mood_lights_on_is_valid = False
      self.dim_level = 0
      self.dim_level_is_valid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8B().pack(_x.front_dome_lights_on, _x.front_dome_lights_on_is_valid, _x.rear_dome_lights_on, _x.rear_dome_lights_on_is_valid, _x.mood_lights_on, _x.mood_lights_on_is_valid, _x.dim_level, _x.dim_level_is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.front_dome_lights_on, _x.front_dome_lights_on_is_valid, _x.rear_dome_lights_on, _x.rear_dome_lights_on_is_valid, _x.mood_lights_on, _x.mood_lights_on_is_valid, _x.dim_level, _x.dim_level_is_valid,) = _get_struct_8B().unpack(str[start:end])
      self.front_dome_lights_on = bool(self.front_dome_lights_on)
      self.front_dome_lights_on_is_valid = bool(self.front_dome_lights_on_is_valid)
      self.rear_dome_lights_on = bool(self.rear_dome_lights_on)
      self.rear_dome_lights_on_is_valid = bool(self.rear_dome_lights_on_is_valid)
      self.mood_lights_on = bool(self.mood_lights_on)
      self.mood_lights_on_is_valid = bool(self.mood_lights_on_is_valid)
      self.dim_level_is_valid = bool(self.dim_level_is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8B().pack(_x.front_dome_lights_on, _x.front_dome_lights_on_is_valid, _x.rear_dome_lights_on, _x.rear_dome_lights_on_is_valid, _x.mood_lights_on, _x.mood_lights_on_is_valid, _x.dim_level, _x.dim_level_is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.front_dome_lights_on, _x.front_dome_lights_on_is_valid, _x.rear_dome_lights_on, _x.rear_dome_lights_on_is_valid, _x.mood_lights_on, _x.mood_lights_on_is_valid, _x.dim_level, _x.dim_level_is_valid,) = _get_struct_8B().unpack(str[start:end])
      self.front_dome_lights_on = bool(self.front_dome_lights_on)
      self.front_dome_lights_on_is_valid = bool(self.front_dome_lights_on_is_valid)
      self.rear_dome_lights_on = bool(self.rear_dome_lights_on)
      self.rear_dome_lights_on_is_valid = bool(self.rear_dome_lights_on_is_valid)
      self.mood_lights_on = bool(self.mood_lights_on)
      self.mood_lights_on_is_valid = bool(self.mood_lights_on_is_valid)
      self.dim_level_is_valid = bool(self.dim_level_is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
