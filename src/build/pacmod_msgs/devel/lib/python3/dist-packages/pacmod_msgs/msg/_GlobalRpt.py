# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pacmod_msgs/GlobalRpt.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GlobalRpt(genpy.Message):
  _md5sum = "e844957facaf4f6bfdea20a3ffdb048f"
  _type = "pacmod_msgs/GlobalRpt"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

bool enabled                # Indicates whether any system on the PACMod is enabled or disabled.
bool override_active        # Indicates whether an override has been triggered on any system.
bool fault_active           # Indicates whether a fault is active on any system.
bool config_fault_active    # Indicates whether the CONFIG.TXT file was read correctly
bool user_can_timeout       # Indicates a timeout has been exceeded on the user CAN interface.
bool brake_can_timeout      # Indicates a timeout has been exceeded on the brake CAN interface.
bool steering_can_timeout   # Indicates a timeout has been exceeded on the steering CAN interface.
bool vehicle_can_timeout    # Indicates a timeout has been exceeded on a vehicle CAN interface.
bool subsystem_can_timeout  # Indicates a timeout has been exceeded when communicating with a PACMod subsystem.
bool user_can_read_errors   # The number of read errors encoutered by the PACMod on the user CAN interface.

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','enabled','override_active','fault_active','config_fault_active','user_can_timeout','brake_can_timeout','steering_can_timeout','vehicle_can_timeout','subsystem_can_timeout','user_can_read_errors']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,enabled,override_active,fault_active,config_fault_active,user_can_timeout,brake_can_timeout,steering_can_timeout,vehicle_can_timeout,subsystem_can_timeout,user_can_read_errors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GlobalRpt, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.enabled is None:
        self.enabled = False
      if self.override_active is None:
        self.override_active = False
      if self.fault_active is None:
        self.fault_active = False
      if self.config_fault_active is None:
        self.config_fault_active = False
      if self.user_can_timeout is None:
        self.user_can_timeout = False
      if self.brake_can_timeout is None:
        self.brake_can_timeout = False
      if self.steering_can_timeout is None:
        self.steering_can_timeout = False
      if self.vehicle_can_timeout is None:
        self.vehicle_can_timeout = False
      if self.subsystem_can_timeout is None:
        self.subsystem_can_timeout = False
      if self.user_can_read_errors is None:
        self.user_can_read_errors = False
    else:
      self.header = std_msgs.msg.Header()
      self.enabled = False
      self.override_active = False
      self.fault_active = False
      self.config_fault_active = False
      self.user_can_timeout = False
      self.brake_can_timeout = False
      self.steering_can_timeout = False
      self.vehicle_can_timeout = False
      self.subsystem_can_timeout = False
      self.user_can_read_errors = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10B().pack(_x.enabled, _x.override_active, _x.fault_active, _x.config_fault_active, _x.user_can_timeout, _x.brake_can_timeout, _x.steering_can_timeout, _x.vehicle_can_timeout, _x.subsystem_can_timeout, _x.user_can_read_errors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.enabled, _x.override_active, _x.fault_active, _x.config_fault_active, _x.user_can_timeout, _x.brake_can_timeout, _x.steering_can_timeout, _x.vehicle_can_timeout, _x.subsystem_can_timeout, _x.user_can_read_errors,) = _get_struct_10B().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.override_active = bool(self.override_active)
      self.fault_active = bool(self.fault_active)
      self.config_fault_active = bool(self.config_fault_active)
      self.user_can_timeout = bool(self.user_can_timeout)
      self.brake_can_timeout = bool(self.brake_can_timeout)
      self.steering_can_timeout = bool(self.steering_can_timeout)
      self.vehicle_can_timeout = bool(self.vehicle_can_timeout)
      self.subsystem_can_timeout = bool(self.subsystem_can_timeout)
      self.user_can_read_errors = bool(self.user_can_read_errors)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_10B().pack(_x.enabled, _x.override_active, _x.fault_active, _x.config_fault_active, _x.user_can_timeout, _x.brake_can_timeout, _x.steering_can_timeout, _x.vehicle_can_timeout, _x.subsystem_can_timeout, _x.user_can_read_errors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.enabled, _x.override_active, _x.fault_active, _x.config_fault_active, _x.user_can_timeout, _x.brake_can_timeout, _x.steering_can_timeout, _x.vehicle_can_timeout, _x.subsystem_can_timeout, _x.user_can_read_errors,) = _get_struct_10B().unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.override_active = bool(self.override_active)
      self.fault_active = bool(self.fault_active)
      self.config_fault_active = bool(self.config_fault_active)
      self.user_can_timeout = bool(self.user_can_timeout)
      self.brake_can_timeout = bool(self.brake_can_timeout)
      self.steering_can_timeout = bool(self.steering_can_timeout)
      self.vehicle_can_timeout = bool(self.vehicle_can_timeout)
      self.subsystem_can_timeout = bool(self.subsystem_can_timeout)
      self.user_can_read_errors = bool(self.user_can_read_errors)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B = None
def _get_struct_10B():
    global _struct_10B
    if _struct_10B is None:
        _struct_10B = struct.Struct("<10B")
    return _struct_10B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
