# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2735_msgs/PositionalAccuracy.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PositionalAccuracy(genpy.Message):
  _md5sum = "993c06d8702326587d0e9f49bc843cde"
  _type = "j2735_msgs/PositionalAccuracy"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# PositionalAccuracy.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# Used to model the accuracy of the positional determination with respect to each given axis.

#PositionalAccuracy ::= SEQUENCE {
#   -- NMEA-183 values expressed in strict ASN form
#   semiMajor     SemiMajorAxisAccuracy,
#   semiMinor     SemiMinorAxisAccuracy,
#   orientation   SemiMajorAxisOrientation
#   }

#SemiMajorAxisAccuracy ::= INTEGER (0..255)
#   -- semi-major/semi-minor axis accuracy at one standard dev
#   -- range 0-12.7 meter, LSB = .05m
#   -- 254 = any value equal or greater than 12.70 meter
#   -- 255 = unavailable semi-major axis value
#   -- Convert to meter with factor 0.05 when this field is used
uint8 semiMajor
uint8 semiMinor

uint8 ACCURACY_UNAVAILABLE = 255
uint8 ACCURACY_MAX = 254
uint8 ACCURACY_MIN = 0

#SemiMajorAxisOrientation ::= INTEGER (0..65535)
#   -- orientation of semi-major axis
#   -- relative to true north (0~359.9945078786 degrees)
#   -- LSB units of 360/65535 deg  = 0.0054932479
#   -- a value of 0 shall be 0 degrees
#   -- a value of 1 shall be 0.0054932479 degrees
#   -- a value of 65534 shall be 359.9945078786 deg
#   -- a value of 65535 shall be used for orientation unavailable
#   -- Convert to degree with factor 0.0054932479 when this field is used
uint16 orientation

uint16 ACCURACY_ORIENTATION_UNAVAILABLE = 65535
uint16 ACCURACY_ORIENTATION_MAX = 65534
uint16 ACCURACY_ORIENTATION_MIN = 0
"""
  # Pseudo-constants
  ACCURACY_UNAVAILABLE = 255
  ACCURACY_MAX = 254
  ACCURACY_MIN = 0
  ACCURACY_ORIENTATION_UNAVAILABLE = 65535
  ACCURACY_ORIENTATION_MAX = 65534
  ACCURACY_ORIENTATION_MIN = 0

  __slots__ = ['semiMajor','semiMinor','orientation']
  _slot_types = ['uint8','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       semiMajor,semiMinor,orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionalAccuracy, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.semiMajor is None:
        self.semiMajor = 0
      if self.semiMinor is None:
        self.semiMinor = 0
      if self.orientation is None:
        self.orientation = 0
    else:
      self.semiMajor = 0
      self.semiMinor = 0
      self.orientation = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2BH().pack(_x.semiMajor, _x.semiMinor, _x.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.semiMajor, _x.semiMinor, _x.orientation,) = _get_struct_2BH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2BH().pack(_x.semiMajor, _x.semiMinor, _x.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.semiMajor, _x.semiMinor, _x.orientation,) = _get_struct_2BH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BH = None
def _get_struct_2BH():
    global _struct_2BH
    if _struct_2BH is None:
        _struct_2BH = struct.Struct("<2BH")
    return _struct_2BH
