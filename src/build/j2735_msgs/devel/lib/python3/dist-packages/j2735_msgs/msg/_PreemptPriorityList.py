# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2735_msgs/PreemptPriorityList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2735_msgs.msg

class PreemptPriorityList(genpy.Message):
  _md5sum = "540868150c1511ed84c0943e75886b4a"
  _type = "j2735_msgs/PreemptPriorityList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# PreemptPriorityList.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# The DF_PreemptPriorityList data frame consists of a list of RegionalSignalControlZone entries.
#
# PreemptPriorityList ::= SEQUENCE (SIZE(1..32)) OF SignalControlZone
#
#

j2735_msgs/SignalControlZone[] preempt_priority_list


================================================================================
MSG: j2735_msgs/SignalControlZone
#
# SignalControlZone.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# SignalControlZone ::= SEQUENCE {
# zone RegionalExtension {{REGION.Reg-SignalControlZone}},
# ...
# }
#
# regional_extension  #TODO: RegionalExtensions are not yet implemented in asn1c"""
  __slots__ = ['preempt_priority_list']
  _slot_types = ['j2735_msgs/SignalControlZone[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       preempt_priority_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PreemptPriorityList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.preempt_priority_list is None:
        self.preempt_priority_list = []
    else:
      self.preempt_priority_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.preempt_priority_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.preempt_priority_list:
        pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.preempt_priority_list is None:
        self.preempt_priority_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.preempt_priority_list = []
      for i in range(0, length):
        val1 = j2735_msgs.msg.SignalControlZone()
        self.preempt_priority_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.preempt_priority_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.preempt_priority_list:
        pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.preempt_priority_list is None:
        self.preempt_priority_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.preempt_priority_list = []
      for i in range(0, length):
        val1 = j2735_msgs.msg.SignalControlZone()
        self.preempt_priority_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
