# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2735_msgs/TrafficControlBounds.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2735_msgs.msg

class TrafficControlBounds(genpy.Message):
  _md5sum = "306f71a9cda43001373a32c7e26b44da"
  _type = "j2735_msgs/TrafficControlBounds"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# TrafficControlBounds.msg
#
# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard
#
# J2735 2016 message format.
#
# 
# @version 0.1
#
# Description
# ...


#TrafficControlBounds ::= SEQUENCE
#{
#	oldest EpochMins, -- timestamp of oldest traffic control message within bounds
#	reflon Longitude, -- initial vertex reference longitude
#	reflat Latitude, -- initial vertex reference latitude
#	offsets SEQUENCE (SIZE(3)) OF OffsetPoint -- relative vertex positions in scaled meters
#}

#oldest ::= EpochMins
uint64 oldest

# reflon ::= INTEGER (-1799999999..1800000000)
#  -- initial vertex reference longitude
#  -- LSB = 1/10 micro degree
#  -- Providing a range of plus-minus 180 degrees
#  -- Convert to degree with factor 0.0000001 when field is used
int32 reflon

int32 REFLON_MAX = 1800000000
int32 REFLON_MIN = -1799999999
int32 REFLON_UNAVAILABLE = 1800000001


# reflat ::= INTEGER (-900000000..900000000)
#  -- initial vertex reference latitude
#  -- LSB = 1/10 micro degree
#  -- Providing a range of plus-minus 90 degrees
#  -- Convert to degree with factor 0.0000001 when field is used
int32 reflat

int32 REFLAT_MAX = 900000000
int32 REFLAT_MIN = -900000000
int32 REFLAT_UNAVAILABLE = 900000001

#offsets ::= SEQUENCE (SIZE(3)) OF OffsetPoint 
j2735_msgs/OffsetPoint[3] offsets

================================================================================
MSG: j2735_msgs/OffsetPoint
#
# OffsetPoint.msg
#
# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard
#
# J2735 2016 message format.
#
# 
# @version 0.1
#
# Description
# ...

#OffsetPoint ::= SEQUENCE
#{
#	deltax INTEGER (-32768..32767), -- relative horizontal vertex position in scaled meters
#	deltay INTEGER (-32768..32767) -- relative vertical vertex position in scaled meters
#}

#deltax ::= INTEGER (-32768..32767)
int16 deltax

#deltay ::= INTEGER (-32768..32767)
int16 deltay


"""
  # Pseudo-constants
  REFLON_MAX = 1800000000
  REFLON_MIN = -1799999999
  REFLON_UNAVAILABLE = 1800000001
  REFLAT_MAX = 900000000
  REFLAT_MIN = -900000000
  REFLAT_UNAVAILABLE = 900000001

  __slots__ = ['oldest','reflon','reflat','offsets']
  _slot_types = ['uint64','int32','int32','j2735_msgs/OffsetPoint[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       oldest,reflon,reflat,offsets

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrafficControlBounds, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.oldest is None:
        self.oldest = 0
      if self.reflon is None:
        self.reflon = 0
      if self.reflat is None:
        self.reflat = 0
      if self.offsets is None:
        self.offsets = [j2735_msgs.msg.OffsetPoint() for _ in range(3)]
    else:
      self.oldest = 0
      self.reflon = 0
      self.reflat = 0
      self.offsets = [j2735_msgs.msg.OffsetPoint() for _ in range(3)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Q2i().pack(_x.oldest, _x.reflon, _x.reflat))
      if len(self.offsets) != 3:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (3, len(self.offsets), 'self.offsets')))
      for val1 in self.offsets:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.deltax, _x.deltay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.offsets is None:
        self.offsets = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.oldest, _x.reflon, _x.reflat,) = _get_struct_Q2i().unpack(str[start:end])
      self.offsets = []
      for i in range(0, 3):
        val1 = j2735_msgs.msg.OffsetPoint()
        _x = val1
        start = end
        end += 4
        (_x.deltax, _x.deltay,) = _get_struct_2h().unpack(str[start:end])
        self.offsets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Q2i().pack(_x.oldest, _x.reflon, _x.reflat))
      if len(self.offsets) != 3:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (3, len(self.offsets), 'self.offsets')))
      for val1 in self.offsets:
        _x = val1
        buff.write(_get_struct_2h().pack(_x.deltax, _x.deltay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.offsets is None:
        self.offsets = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.oldest, _x.reflon, _x.reflat,) = _get_struct_Q2i().unpack(str[start:end])
      self.offsets = []
      for i in range(0, 3):
        val1 = j2735_msgs.msg.OffsetPoint()
        _x = val1
        start = end
        end += 4
        (_x.deltax, _x.deltay,) = _get_struct_2h().unpack(str[start:end])
        self.offsets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_Q2i = None
def _get_struct_Q2i():
    global _struct_Q2i
    if _struct_Q2i is None:
        _struct_Q2i = struct.Struct("<Q2i")
    return _struct_Q2i
