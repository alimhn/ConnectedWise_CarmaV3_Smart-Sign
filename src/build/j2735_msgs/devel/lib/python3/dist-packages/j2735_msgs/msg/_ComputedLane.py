# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2735_msgs/ComputedLane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2735_msgs.msg

class ComputedLane(genpy.Message):
  _md5sum = "8e35ff00529bfc2e7f719199f8b58201"
  _type = "j2735_msgs/ComputedLane"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# NodeListXY.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# ComputedLane ::= SEQUENCE {
# -- Data needed to created a computed lane
# referenceLaneId LaneID,
# 	-- the lane ID upon which this
# 	-- computed lane will be based
# 	-- Lane Offset in X and Y direction
# offsetXaxis CHOICE {
# 		small DrivenLineOffsetSm,
# 		large DrivenLineOffsetLg
# 		},
# offsetYaxis CHOICE {
# 		small DrivenLineOffsetSm,
# 		large DrivenLineOffsetLg
# 		},
# 	-- A path X offset value for translations of the
# 	-- path's points when creating translated lanes.
# 	-- The values found in the reference lane are
# 	-- all offset based on the X and Y values from
# 	-- the coordinates of the reference lane's
# 	-- initial path point.
#
# -- Lane Rotation
# rotateXY Angle OPTIONAL,
# 	-- A path rotation value for the entire lane
# 	-- Observe that this rotates the existing orientation
# 	-- of the referenced lane, it does not replace it.
# 	-- Rotation occurs about the initial path point.
# -- Lane Path Scale (zooming)
# scaleXaxis Scale-B12 OPTIONAL,
# scaleYaxis Scale-B12 OPTIONAL,
# 	-- value for translations or zooming of the path's
# 	-- points. The values found in the reference lane
# 	-- are all expanded or contracted based on the X
# 	-- and Y and width values from the coordinates of
# 	-- the reference lane's initial path point.
# 	-- The Z axis remains untouched.
# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-ComputedLane}} OPTIONAL,
# ...
# }

# LaneID ::= INTEGER (0..255)
# -- the value 0 shall be used when the lane ID is
# -- not available or not known
# -- the value 255 is reserved for future use
uint16 reference_lane_id

# The DrivenLineOffsetSmall data element is an integer value expressing the offset in a defined axis from a reference
# lane number from which a computed lane is offset.
# DrivenLineOffsetSm ::= INTEGER (-2047..2047)
# -- LSB units are 1 cm.
# The DE_DrivenLineOffsetLarge data element is an integer value expressing the offset in a defined axis from a
# reference lane number from which a computed lane is offset.
# DrivenLineOffsetLg ::= INTEGER (-32767..32767)
# -- LSB units are 1 cm.

j2735_msgs/OffsetXaxis offset_x_axis

j2735_msgs/OffsetYaxis offset_y_axis

# Angle ::= INTEGER (0..239)
#  -- Unsigned units of 1.5 degree, in 1 octet
#  -- the true north is 0, positive is clockwise
#  -- the values 240 to 254 shall not be sent
#  -- the value 255 (0xFF) indicates an invalid value
# NOTE: use invalid value to indicate unavailability as well.
uint16 rotateXY
uint16 ROTATEXY_INVALID=255
bool rotatexy_exists

# Scale-B12 ::= INTEGER (-2048..2047)
# A 12-bit signed scaling factor supporting scales from zero (which is not used) to >200%.
# In this data element, the value zero is taken to represent a value of one (scale 1:1).
int16 scale_x_axis
bool scale_x_axis_exists

int16 scale_y_axis
bool scale_y_axis_exists

# regional #TODO: RegionalExtensions are not yet implemented in asn1c

================================================================================
MSG: j2735_msgs/OffsetXaxis
#
# OffsetXaxis.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# 	-- A path X offset value for translations of the
# 	-- path's points when creating translated lanes.
# 	-- The values found in the reference lane are
# 	-- all offset based on the X and Y values from
# 	-- the coordinates of the reference lane's
# 	-- initial path point.
# offsetXaxis CHOICE {
# 		small DrivenLineOffsetSm,
# 		large DrivenLineOffsetLg
# 		},


uint8 choice
uint8 SMALL=0
uint8 LARGE=1

# The DrivenLineOffsetSmall data element is an integer value expressing the offset in a defined axis from a reference
# lane number from which a computed lane is offset.
# DrivenLineOffsetSm ::= INTEGER (-2047..2047)
# -- LSB units are 1 cm.
int16 small


# The DE_DrivenLineOffsetLarge data element is an integer value expressing the offset in a defined axis from a
# reference lane number from which a computed lane is offset.
# DrivenLineOffsetLg ::= INTEGER (-32767..32767)
# -- LSB units are 1 cm.
int16 large
================================================================================
MSG: j2735_msgs/OffsetYaxis
#
# OffsetYaxis.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# 	-- A path X offset value for translations of the
# 	-- path's points when creating translated lanes.
# 	-- The values found in the reference lane are
# 	-- all offset based on the X and Y values from
# 	-- the coordinates of the reference lane's
# 	-- initial path point.
# offsetYaxis CHOICE {
# 		small DrivenLineOffsetSm,
# 		large DrivenLineOffsetLg
# 		},

uint8 choice
uint8 SMALL=0
uint8 LARGE=1

# The DrivenLineOffsetSmall data element is an integer value expressing the offset in a defined axis from a reference
# lane number from which a computed lane is offset.
# DrivenLineOffsetSm ::= INTEGER (-2047..2047)
# -- LSB units are 1 cm.
int16 small


# The DE_DrivenLineOffsetLarge data element is an integer value expressing the offset in a defined axis from a
# reference lane number from which a computed lane is offset.
# DrivenLineOffsetLg ::= INTEGER (-32767..32767)
# -- LSB units are 1 cm.
int16 large"""
  # Pseudo-constants
  ROTATEXY_INVALID = 255

  __slots__ = ['reference_lane_id','offset_x_axis','offset_y_axis','rotateXY','rotatexy_exists','scale_x_axis','scale_x_axis_exists','scale_y_axis','scale_y_axis_exists']
  _slot_types = ['uint16','j2735_msgs/OffsetXaxis','j2735_msgs/OffsetYaxis','uint16','bool','int16','bool','int16','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reference_lane_id,offset_x_axis,offset_y_axis,rotateXY,rotatexy_exists,scale_x_axis,scale_x_axis_exists,scale_y_axis,scale_y_axis_exists

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ComputedLane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reference_lane_id is None:
        self.reference_lane_id = 0
      if self.offset_x_axis is None:
        self.offset_x_axis = j2735_msgs.msg.OffsetXaxis()
      if self.offset_y_axis is None:
        self.offset_y_axis = j2735_msgs.msg.OffsetYaxis()
      if self.rotateXY is None:
        self.rotateXY = 0
      if self.rotatexy_exists is None:
        self.rotatexy_exists = False
      if self.scale_x_axis is None:
        self.scale_x_axis = 0
      if self.scale_x_axis_exists is None:
        self.scale_x_axis_exists = False
      if self.scale_y_axis is None:
        self.scale_y_axis = 0
      if self.scale_y_axis_exists is None:
        self.scale_y_axis_exists = False
    else:
      self.reference_lane_id = 0
      self.offset_x_axis = j2735_msgs.msg.OffsetXaxis()
      self.offset_y_axis = j2735_msgs.msg.OffsetYaxis()
      self.rotateXY = 0
      self.rotatexy_exists = False
      self.scale_x_axis = 0
      self.scale_x_axis_exists = False
      self.scale_y_axis = 0
      self.scale_y_axis_exists = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HB2hB2hHBhBhB().pack(_x.reference_lane_id, _x.offset_x_axis.choice, _x.offset_x_axis.small, _x.offset_x_axis.large, _x.offset_y_axis.choice, _x.offset_y_axis.small, _x.offset_y_axis.large, _x.rotateXY, _x.rotatexy_exists, _x.scale_x_axis, _x.scale_x_axis_exists, _x.scale_y_axis, _x.scale_y_axis_exists))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.offset_x_axis is None:
        self.offset_x_axis = j2735_msgs.msg.OffsetXaxis()
      if self.offset_y_axis is None:
        self.offset_y_axis = j2735_msgs.msg.OffsetYaxis()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.reference_lane_id, _x.offset_x_axis.choice, _x.offset_x_axis.small, _x.offset_x_axis.large, _x.offset_y_axis.choice, _x.offset_y_axis.small, _x.offset_y_axis.large, _x.rotateXY, _x.rotatexy_exists, _x.scale_x_axis, _x.scale_x_axis_exists, _x.scale_y_axis, _x.scale_y_axis_exists,) = _get_struct_HB2hB2hHBhBhB().unpack(str[start:end])
      self.rotatexy_exists = bool(self.rotatexy_exists)
      self.scale_x_axis_exists = bool(self.scale_x_axis_exists)
      self.scale_y_axis_exists = bool(self.scale_y_axis_exists)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HB2hB2hHBhBhB().pack(_x.reference_lane_id, _x.offset_x_axis.choice, _x.offset_x_axis.small, _x.offset_x_axis.large, _x.offset_y_axis.choice, _x.offset_y_axis.small, _x.offset_y_axis.large, _x.rotateXY, _x.rotatexy_exists, _x.scale_x_axis, _x.scale_x_axis_exists, _x.scale_y_axis, _x.scale_y_axis_exists))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.offset_x_axis is None:
        self.offset_x_axis = j2735_msgs.msg.OffsetXaxis()
      if self.offset_y_axis is None:
        self.offset_y_axis = j2735_msgs.msg.OffsetYaxis()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.reference_lane_id, _x.offset_x_axis.choice, _x.offset_x_axis.small, _x.offset_x_axis.large, _x.offset_y_axis.choice, _x.offset_y_axis.small, _x.offset_y_axis.large, _x.rotateXY, _x.rotatexy_exists, _x.scale_x_axis, _x.scale_x_axis_exists, _x.scale_y_axis, _x.scale_y_axis_exists,) = _get_struct_HB2hB2hHBhBhB().unpack(str[start:end])
      self.rotatexy_exists = bool(self.rotatexy_exists)
      self.scale_x_axis_exists = bool(self.scale_x_axis_exists)
      self.scale_y_axis_exists = bool(self.scale_y_axis_exists)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HB2hB2hHBhBhB = None
def _get_struct_HB2hB2hHBhBhB():
    global _struct_HB2hB2hHBhBhB
    if _struct_HB2hB2hHBhBhB is None:
        _struct_HB2hB2hHBhBhB = struct.Struct("<HB2hB2hHBhBhB")
    return _struct_HB2hB2hHBhBhB
