# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2735_msgs/AccelerationSet4Way.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AccelerationSet4Way(genpy.Message):
  _md5sum = "a04db6910213061e094b67068abaf00f"
  _type = "j2735_msgs/AccelerationSet4Way"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# AccelerationSet4Way.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# Set of acceleration values in 3 orthogonal directions of the vehicle and with yaw rotation rates expressed as a structure. 
# The positive longitudinal axis is to the front of the vehicle. 
# The positive lateral axis is to the right side of the vehicle (facing forward)
# Positive yaw is to the right (clockwise)
# The positive vertical "z" axis is downward with the zero point at the bottom of the vehicle's tires. 

#AccelerationSet4Way ::= SEQUENCE {
#   long Acceleration,          -- Along the Vehicle Longitudinal axis
#   lat  Acceleration,          -- Along the Vehicle Lateral axis
#   vert VerticalAcceleration,  -- Along the Vehicle Vertical axis
#   yaw  YawRate
#}

#Acceleration ::= INTEGER (-2000..2001) 
#   -- LSB units are 0.01 m/s^2
#   -- the value 2000 shall be used for values greater than 2000     
#   -- the value -2000 shall be used for values less than -2000  
#   -- a value of 2001 shall be used for Unavailable
#   -- Convert to m/s^2 with factor 0.01 when this field is used
int16 longitudinal
int16 lateral

int16 ACCELERATION_UNAVAILABLE = 2001
int16 ACCELERATION_MAX = 2000
int16 ACCELERATION_MIN = -2000

#VerticalAcceleration ::= INTEGER (-127..127) 
#   -- LSB units of 0.02 G steps over -2.52 to +2.54 G
#   -- The value +127 shall be used for ranges >= 2.54 G
#   -- The value -126 shall be used for ranges <= 2.52 G
#   -- The value -127 shall be used for unavailable
#   -- Convert to m/s^2 with factor 0.196 when this field is used
int8 vert

int8 ACCELERATION_VERTICAL_UNAVAILABLE = -127
int8 ACCELERATION_VERTICAL_MAX = 127
int8 ACCELERATION_VERTICAL_MIN = -126

#YawRate ::= INTEGER (-32767..32767)
#   -- LSB units of 0.01 degrees per second (signed)
#   -- Convert to degree with factor 0.01 when this field is used
int16 yaw_rate

int16 YAWRATE_UNAVAILABLE = 0
int16 YAWRATE_MAX = 32767
int16 YAWRATE_MIN = -32767
"""
  # Pseudo-constants
  ACCELERATION_UNAVAILABLE = 2001
  ACCELERATION_MAX = 2000
  ACCELERATION_MIN = -2000
  ACCELERATION_VERTICAL_UNAVAILABLE = -127
  ACCELERATION_VERTICAL_MAX = 127
  ACCELERATION_VERTICAL_MIN = -126
  YAWRATE_UNAVAILABLE = 0
  YAWRATE_MAX = 32767
  YAWRATE_MIN = -32767

  __slots__ = ['longitudinal','lateral','vert','yaw_rate']
  _slot_types = ['int16','int16','int8','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       longitudinal,lateral,vert,yaw_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AccelerationSet4Way, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.longitudinal is None:
        self.longitudinal = 0
      if self.lateral is None:
        self.lateral = 0
      if self.vert is None:
        self.vert = 0
      if self.yaw_rate is None:
        self.yaw_rate = 0
    else:
      self.longitudinal = 0
      self.lateral = 0
      self.vert = 0
      self.yaw_rate = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2hbh().pack(_x.longitudinal, _x.lateral, _x.vert, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.longitudinal, _x.lateral, _x.vert, _x.yaw_rate,) = _get_struct_2hbh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2hbh().pack(_x.longitudinal, _x.lateral, _x.vert, _x.yaw_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.longitudinal, _x.lateral, _x.vert, _x.yaw_rate,) = _get_struct_2hbh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2hbh = None
def _get_struct_2hbh():
    global _struct_2hbh
    if _struct_2hbh is None:
        _struct_2hbh = struct.Struct("<2hbh")
    return _struct_2hbh
