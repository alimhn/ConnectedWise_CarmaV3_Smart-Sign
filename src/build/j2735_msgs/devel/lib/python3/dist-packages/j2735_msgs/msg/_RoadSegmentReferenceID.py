# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2735_msgs/RoadSegmentReferenceID.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RoadSegmentReferenceID(genpy.Message):
  _md5sum = "4bf4691f490fdc19634fca26ef0c582f"
  _type = "j2735_msgs/RoadSegmentReferenceID"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# RoadSegmentReferenceID.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# The DF_RoadSegmentReferenceID data frame is used to convey theRoadSegmentID which is unique to a given
# road segment of interest, and also the RoadRegulatorID assigned to the region in which it is operating (when required).

# RoadSegmentReferenceID ::= SEQUENCE {
# region RoadRegulatorID OPTIONAL,
# -- a globally unique regional assignment value
# -- typically assigned to a regional DOT authority
# -- the value zero shall be used for testing needs
# id RoadSegmentID
# -- a unique mapping to the road segment
# -- in question within the above region of use
# -- during its period of assignment and use
# -- note that unlike intersectionID values,
# -- this value can be reused by the region
# }

# RoadRegulatorID ::= INTEGER (0..65535)
uint16 region
bool region_exists

# RoadSegmentID ::= INTEGER (0..65535)
# -- The values zero to 255 shall be used for testing only
# -- Note that the value assigned to an RoadSegment will be
# -- unique within a given regional ID only during its use
uint16 id
bool id_exists



"""
  __slots__ = ['region','region_exists','id','id_exists']
  _slot_types = ['uint16','bool','uint16','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       region,region_exists,id,id_exists

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoadSegmentReferenceID, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.region is None:
        self.region = 0
      if self.region_exists is None:
        self.region_exists = False
      if self.id is None:
        self.id = 0
      if self.id_exists is None:
        self.id_exists = False
    else:
      self.region = 0
      self.region_exists = False
      self.id = 0
      self.id_exists = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HBHB().pack(_x.region, _x.region_exists, _x.id, _x.id_exists))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.region, _x.region_exists, _x.id, _x.id_exists,) = _get_struct_HBHB().unpack(str[start:end])
      self.region_exists = bool(self.region_exists)
      self.id_exists = bool(self.id_exists)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HBHB().pack(_x.region, _x.region_exists, _x.id, _x.id_exists))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.region, _x.region_exists, _x.id, _x.id_exists,) = _get_struct_HBHB().unpack(str[start:end])
      self.region_exists = bool(self.region_exists)
      self.id_exists = bool(self.id_exists)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HBHB = None
def _get_struct_HBHB():
    global _struct_HBHB
    if _struct_HBHB is None:
        _struct_HBHB = struct.Struct("<HBHB")
    return _struct_HBHB
