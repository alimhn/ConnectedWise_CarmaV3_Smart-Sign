# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from j2735_msgs/BrakeSystemStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import j2735_msgs.msg

class BrakeSystemStatus(genpy.Message):
  _md5sum = "29e024d3832cf8923126d15f9168e8dd"
  _type = "j2735_msgs/BrakeSystemStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# BrakeSystemStatus.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
#
# Conveys a variety of information about the current brake and system control activity of the vehicle.

#BrakeSystemStatus ::= SEQUENCE { 
#   wheelBrakes        BrakeAppliedStatus,
#   traction           TractionControlStatus,
#   abs                AntiLockBrakeStatus, 
#   scs                StabilityControlStatus,
#   brakeBoost         BrakeBoostApplied, 
#   auxBrakes          AuxiliaryBrakeStatus
#   }

#BrakeAppliedStatus ::= BIT STRING {
#   unavailable (0),  -- When set, the brake applied status is unavailable
#   leftFront   (1),  -- Left Front Active
#   leftRear    (2),  -- Left Rear Active
#   rightFront  (3),  -- Right Front Active
#   rightRear   (4)   -- Right Rear Active
#   } (SIZE (5))
#   
j2735_msgs/BrakeAppliedStatus wheelBrakes

#TractionControlStatus ::= ENUMERATED {
#   unavailable (0), -- B'00  Not Equipped with traction control 
#                    --       or traction control status is unavailable
#   off         (1), -- B'01  traction control is Off
#   on          (2), -- B'10  traction control is On (but not Engaged)
#   engaged     (3)  -- B'11  traction control is Engaged
#   }
#
j2735_msgs/TractionControlStatus traction

#AntiLockBrakeStatus ::= ENUMERATED {
#   unavailable (0), -- B'00  Vehicle Not Equipped with ABS Brakes 
#                    --       or ABS Brakes status is unavailable
#   off         (1), -- B'01  Vehicle's ABS are Off
#   on          (2), -- B'10  Vehicle's ABS are On ( but not Engaged )
#   engaged     (3)  -- B'11  Vehicle's ABS control is Engaged on any wheel
#   }
#
j2735_msgs/AntiLockBrakeStatus abs

#StabilityControlStatus ::= ENUMERATED {
#   unavailable (0), -- B'00  Not Equipped with SC
#                    --       or SC status is unavailable
#   off         (1), -- B'01  Off
#   on          (2), -- B'10  On or active (but not engaged)
#   engaged     (3)  -- B'11  stability control is Engaged 
#   }
#   
j2735_msgs/StabilityControlStatus scs

#BrakeBoostApplied ::= ENUMERATED {
#   unavailable   (0), -- Vehicle not equipped with brake boost
#                      -- or brake boost data is unavailable
#   off           (1), -- Vehicle's brake boost is off
#   on            (2)  -- Vehicle's brake boost is on (applied)
#   }
#   
j2735_msgs/BrakeBoostApplied brakeBoost

#AuxiliaryBrakeStatus ::= ENUMERATED {
#   unavailable (0), -- B'00  Vehicle Not Equipped with Aux Brakes 
#                    --       or Aux Brakes status is unavailable
#   off         (1), -- B'01  Vehicle's Aux Brakes are Off
#   on          (2), -- B'10  Vehicle's Aux Brakes are On ( Engaged )
#   reserved    (3)  -- B'11 
#   }   

j2735_msgs/AuxiliaryBrakeStatus auxBrakes
================================================================================
MSG: j2735_msgs/BrakeAppliedStatus
#
# BrakeAppliedStatus.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1
# 

#BrakeAppliedStatus ::= BIT STRING {
#   unavailable (0),  -- When set, the brake applied status is unavailable
#   leftFront   (1),  -- Left Front Active
#   leftRear    (2),  -- Left Rear Active
#   rightFront  (3),  -- Right Front Active
#   rightRear   (4)   -- Right Rear Active
#   } (SIZE (5))
#   

uint8  brake_applied_status

uint8 UNAVAILABLE=0
uint8 LEFT_FRONT=1
uint8 LEFT_REAR=2
uint8 RIGHT_FRONT=3
uint8 RIGHT_REAR=4


================================================================================
MSG: j2735_msgs/TractionControlStatus
#
# TractionControlStatus.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1

#TractionControlStatus ::= ENUMERATED {
#   unavailable (0), -- B'00  Not Equipped with traction control 
#                    --       or traction control status is unavailable
#   off         (1), -- B'01  traction control is Off
#   on          (2), -- B'10  traction control is On (but not Engaged)
#   engaged     (3)  -- B'11  traction control is Engaged
#   }
#

uint8  traction_control_status 

# enumeration values for status:
uint8  UNAVAILABLE=0
uint8  OFF=1
uint8  ON=2
uint8  ENGAGED=3



================================================================================
MSG: j2735_msgs/AntiLockBrakeStatus
#
# AntiLockBrakeStatus.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1

#AntiLockBrakeStatus ::= ENUMERATED {
#   unavailable (0), -- B'00  Vehicle Not Equipped with ABS Brakes 
#                    --       or ABS Brakes status is unavailable
#   off         (1), -- B'01  Vehicle's ABS are Off
#   on          (2), -- B'10  Vehicle's ABS are On ( but not Engaged )
#   engaged     (3)  -- B'11  Vehicle's ABS control is Engaged on any wheel
#   }
#

uint8  anti_lock_brake_status 

# enumeration values for status:
uint8  UNAVAILABLE=0
uint8  OFF=1
uint8  ON=2
uint8  ENGAGED=3

================================================================================
MSG: j2735_msgs/StabilityControlStatus
#
# StabilityControlStatus.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1

#StabilityControlStatus ::= ENUMERATED {
#   unavailable (0), -- B'00  Not Equipped with SC
#                    --       or SC status is unavailable
#   off         (1), -- B'01  Off
#   on          (2), -- B'10  On or active (but not engaged)
#   engaged     (3)  -- B'11  stability control is Engaged 
#   }
#   

uint8  stability_control_status 

# enumeration values for status:
uint8  UNAVAILABLE=0
uint8  OFF=1
uint8  ON=2
uint8  ENGAGED=3

================================================================================
MSG: j2735_msgs/BrakeBoostApplied
#
# BrakeBoostApplied.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1

#BrakeBoostApplied ::= ENUMERATED {
#   unavailable   (0), -- Vehicle not equipped with brake boost
#                      -- or brake boost data is unavailable
#   off           (1), -- Vehicle's brake boost is off
#   on            (2)  -- Vehicle's brake boost is on (applied)
#   }
#   

uint8  brake_boost_applied

# enumeration values for status:
uint8  UNAVAILABLE=0
uint8  OFF=1
uint8  ON=2

================================================================================
MSG: j2735_msgs/AuxiliaryBrakeStatus
#
# AuxiliaryBrakeStatus.msg
#
# J2735 2016 message format.
#
# @author Mae Fromm
# @version 0.1

#AuxiliaryBrakeStatus ::= ENUMERATED {
#   unavailable (0), -- B'00  Vehicle Not Equipped with Aux Brakes 
#                    --       or Aux Brakes status is unavailable
#   off         (1), -- B'01  Vehicle's Aux Brakes are Off
#   on          (2), -- B'10  Vehicle's Aux Brakes are On ( Engaged )
#   reserved    (3)  -- B'11 
#   }   

uint8  auxiliary_brake_status

# enumeration values for status:
uint8  UNAVAILABLE=0
uint8  OFF=1
uint8  ON=2
uint8  RESERVED=3
"""
  __slots__ = ['wheelBrakes','traction','abs','scs','brakeBoost','auxBrakes']
  _slot_types = ['j2735_msgs/BrakeAppliedStatus','j2735_msgs/TractionControlStatus','j2735_msgs/AntiLockBrakeStatus','j2735_msgs/StabilityControlStatus','j2735_msgs/BrakeBoostApplied','j2735_msgs/AuxiliaryBrakeStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wheelBrakes,traction,abs,scs,brakeBoost,auxBrakes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BrakeSystemStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.wheelBrakes is None:
        self.wheelBrakes = j2735_msgs.msg.BrakeAppliedStatus()
      if self.traction is None:
        self.traction = j2735_msgs.msg.TractionControlStatus()
      if self.abs is None:
        self.abs = j2735_msgs.msg.AntiLockBrakeStatus()
      if self.scs is None:
        self.scs = j2735_msgs.msg.StabilityControlStatus()
      if self.brakeBoost is None:
        self.brakeBoost = j2735_msgs.msg.BrakeBoostApplied()
      if self.auxBrakes is None:
        self.auxBrakes = j2735_msgs.msg.AuxiliaryBrakeStatus()
    else:
      self.wheelBrakes = j2735_msgs.msg.BrakeAppliedStatus()
      self.traction = j2735_msgs.msg.TractionControlStatus()
      self.abs = j2735_msgs.msg.AntiLockBrakeStatus()
      self.scs = j2735_msgs.msg.StabilityControlStatus()
      self.brakeBoost = j2735_msgs.msg.BrakeBoostApplied()
      self.auxBrakes = j2735_msgs.msg.AuxiliaryBrakeStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.wheelBrakes.brake_applied_status, _x.traction.traction_control_status, _x.abs.anti_lock_brake_status, _x.scs.stability_control_status, _x.brakeBoost.brake_boost_applied, _x.auxBrakes.auxiliary_brake_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.wheelBrakes is None:
        self.wheelBrakes = j2735_msgs.msg.BrakeAppliedStatus()
      if self.traction is None:
        self.traction = j2735_msgs.msg.TractionControlStatus()
      if self.abs is None:
        self.abs = j2735_msgs.msg.AntiLockBrakeStatus()
      if self.scs is None:
        self.scs = j2735_msgs.msg.StabilityControlStatus()
      if self.brakeBoost is None:
        self.brakeBoost = j2735_msgs.msg.BrakeBoostApplied()
      if self.auxBrakes is None:
        self.auxBrakes = j2735_msgs.msg.AuxiliaryBrakeStatus()
      end = 0
      _x = self
      start = end
      end += 6
      (_x.wheelBrakes.brake_applied_status, _x.traction.traction_control_status, _x.abs.anti_lock_brake_status, _x.scs.stability_control_status, _x.brakeBoost.brake_boost_applied, _x.auxBrakes.auxiliary_brake_status,) = _get_struct_6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.wheelBrakes.brake_applied_status, _x.traction.traction_control_status, _x.abs.anti_lock_brake_status, _x.scs.stability_control_status, _x.brakeBoost.brake_boost_applied, _x.auxBrakes.auxiliary_brake_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.wheelBrakes is None:
        self.wheelBrakes = j2735_msgs.msg.BrakeAppliedStatus()
      if self.traction is None:
        self.traction = j2735_msgs.msg.TractionControlStatus()
      if self.abs is None:
        self.abs = j2735_msgs.msg.AntiLockBrakeStatus()
      if self.scs is None:
        self.scs = j2735_msgs.msg.StabilityControlStatus()
      if self.brakeBoost is None:
        self.brakeBoost = j2735_msgs.msg.BrakeBoostApplied()
      if self.auxBrakes is None:
        self.auxBrakes = j2735_msgs.msg.AuxiliaryBrakeStatus()
      end = 0
      _x = self
      start = end
      end += 6
      (_x.wheelBrakes.brake_applied_status, _x.traction.traction_control_status, _x.abs.anti_lock_brake_status, _x.scs.stability_control_status, _x.brakeBoost.brake_boost_applied, _x.auxBrakes.auxiliary_brake_status,) = _get_struct_6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
