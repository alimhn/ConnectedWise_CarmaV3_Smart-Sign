// Generated by gencpp from file j2735_msgs/ConnectsToList.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_CONNECTSTOLIST_H
#define J2735_MSGS_MESSAGE_CONNECTSTOLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/Connection.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct ConnectsToList_
{
  typedef ConnectsToList_<ContainerAllocator> Type;

  ConnectsToList_()
    : connect_to_list()  {
    }
  ConnectsToList_(const ContainerAllocator& _alloc)
    : connect_to_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::j2735_msgs::Connection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::Connection_<ContainerAllocator> >::other >  _connect_to_list_type;
  _connect_to_list_type connect_to_list;





  typedef boost::shared_ptr< ::j2735_msgs::ConnectsToList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::ConnectsToList_<ContainerAllocator> const> ConstPtr;

}; // struct ConnectsToList_

typedef ::j2735_msgs::ConnectsToList_<std::allocator<void> > ConnectsToList;

typedef boost::shared_ptr< ::j2735_msgs::ConnectsToList > ConnectsToListPtr;
typedef boost::shared_ptr< ::j2735_msgs::ConnectsToList const> ConnectsToListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::ConnectsToList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::ConnectsToList_<ContainerAllocator1> & lhs, const ::j2735_msgs::ConnectsToList_<ContainerAllocator2> & rhs)
{
  return lhs.connect_to_list == rhs.connect_to_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::ConnectsToList_<ContainerAllocator1> & lhs, const ::j2735_msgs::ConnectsToList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::ConnectsToList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::ConnectsToList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::ConnectsToList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ebe5fd15cf3f33abba7b953dda1da83";
  }

  static const char* value(const ::j2735_msgs::ConnectsToList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ebe5fd15cf3f33aULL;
  static const uint64_t static_value2 = 0xbba7b953dda1da83ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/ConnectsToList";
  }

  static const char* value(const ::j2735_msgs::ConnectsToList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# ConnectsToList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The ConnectsToList data structure is used in the generic lane descriptions to provide a sequence of other defined\n"
"# lanes to which each lane connects beyond its stop point. See the Connection data frame entry for details. Note that this\n"
"# data frame is not used in some lane object types.\n"
"#\n"
"# ConnectsToList ::= SEQUENCE (SIZE(1..16)) OF Connection\n"
"\n"
"j2735_msgs/Connection[] connect_to_list\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/Connection\n"
"#\n"
"# Connection.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The Connection data structure is used in the ConnectsToList data frame to provide data about how the stop line at\n"
"# the end of a single lane connects to another lane beyond its stop point. The ConnectingLane entry ties an outbound\n"
"# (egress) lane by its index to a valid single maneuver required to reach that outbound lane. The SignalGroupID maps this\n"
"# to a single SPAT index. (Note that more than one entry can exist for any given lane to handle admissive and protected\n"
"# conditions).\n"
"#\n"
"# Connection ::= SEQUENCE {\n"
"# -- The subject lane connecting to this lane is:\n"
"# connectingLane ConnectingLane,\n"
"# -- The index of the connecting lane and also\n"
"# -- the maneuver from the current lane to it\n"
"# remoteIntersection IntersectionReferenceID OPTIONAL,\n"
"# -- This entry is only used when the\n"
"# -- indicated connecting lane belongs\n"
"# -- to another intersection layout. This\n"
"# -- provides a means to create meshes of lanes\n"
"# -- SPAT mapping details at the stop line are:\n"
"# signalGroup SignalGroupID OPTIONAL,\n"
"# -- The matching signal group send by\n"
"# -- the SPAT message for this lane/maneuver.\n"
"# -- Shall be present unless the connectingLane\n"
"# -- has no signal group (is un-signalized)\n"
"# userClass RestrictionClassID OPTIONAL,\n"
"# -- The Restriction Class of users this applies to\n"
"# -- The use of some lane/maneuver and SignalGroupID\n"
"# -- pairings are restricted to selected users.\n"
"# -- When absent, the SignalGroupID applies to all\n"
"# -- Movement assist details are given by:\n"
"# connectionID LaneConnectionID OPTIONAL\n"
"# -- An optional connection index used to\n"
"# -- relate this lane connection to any dynamic\n"
"# -- clearance data in the SPAT. Note that\n"
"# -- the index may be shared with other\n"
"# -- connections if the clearance data is common\n"
"# }\n"
"\n"
"j2735_msgs/ConnectingLane connecting_lane\n"
"\n"
"j2735_msgs/IntersectionReferenceID remote_intersection\n"
"bool remote_intersection_exists\n"
"\n"
"# SignalGroupID ::= INTEGER (0..255)\n"
"uint8 signal_group\n"
"bool signal_group_exists\n"
"\n"
"# RestrictionClassID ::= INTEGER (0..255)\n"
"uint8 user_class\n"
"bool user_class_exists\n"
"\n"
"# LaneConnectionID ::= INTEGER (0..255)\n"
"uint8 connection_id\n"
"bool connection_id_exists\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/ConnectingLane\n"
"#\n"
"# ConnectingLane.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# ConnectingLane ::= SEQUENCE {\n"
"# lane LaneID,\n"
"# -- Index of the connecting lane\n"
"# maneuver AllowedManeuvers OPTIONAL\n"
"# -- The Maneuver between\n"
"# -- the enclosing lane and this lane\n"
"# -- at the stop line to connect them\n"
"# }\n"
"\n"
"# LaneID ::= INTEGER (0..255)\n"
"# -- the value 0 shall be used when the lane ID is\n"
"# -- not available or not known\n"
"# -- the value 255 is reserved for future use\n"
"uint16 lane\n"
"uint16 LANE_UNAVAILABLE=0\n"
"\n"
"# -- the permitted maneuvers for this lane\n"
"# AllowedManeuvers ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# -- Allowed maneuvers at path end (stop line)\n"
"# -- *** All maneuvers with bits not set are therefore prohibited ! ***\n"
"# -- A value of zero shall be used for unknown, indicating no Maneuver\n"
"j2735_msgs/AllowedManeuvers maneuver\n"
"bool maneuver_exists\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/AllowedManeuvers\n"
"#\n"
"# AllowedManeuvers.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# AllowedManeuvers ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# -- Allowed maneuvers at path end (stop line)\n"
"# -- All maneuvers with bits not set are therefore prohibited !\n"
"# -- A value of zero shall be used for unknown, indicating no Maneuver\n"
"# maneuverStraightAllowed(0),\n"
"# -- a Straight movement is allowed in this lane\n"
"# maneuverLeftAllowed(1),\n"
"# -- a Left Turn movement is allowed in this lane\n"
"# maneuverRightAllowed(2),\n"
"# -- a Right Turn movement is allowed in this lane\n"
"# maneuverUTurnAllowed(3),\n"
"# -- a U turn movement is allowed in this lane\n"
"# maneuverLeftTurnOnRedAllowed (4),\n"
"# -- a Stop, and then proceed when safe movement\n"
"# -- is allowed in this lane\n"
"# maneuverRightTurnOnRedAllowed (5),\n"
"# -- a Stop, and then proceed when safe movement\n"
"# -- is allowed in this lane\n"
"# maneuverLaneChangeAllowed(6),\n"
"# -- a movement which changes to an outer lane\n"
"# -- on the egress side is allowed in this lane\n"
"# -- (example: left into either outbound lane)\n"
"# maneuverNoStoppingAllowed(7),\n"
"# -- the vehicle should not stop at the stop line\n"
"# -- (example: a flashing green arrow)\n"
"# yieldAllwaysRequired(8),\n"
"# -- the allowed movements above are not protected\n"
"# -- (example: an permanent yellow condition)\n"
"# goWithHalt(9),\n"
"# -- after making a full stop, may proceed\n"
"# caution(10),\n"
"# -- proceed past stop line with caution\n"
"# reserved1(11)\n"
"# -- used to align to 12 Bit Field\n"
"# } (SIZE(12))\n"
"\n"
"uint16 allowed_maneuvers\n"
"\n"
"# Bit flags\n"
"uint16 STRAIGHT=1\n"
"uint16 LEFT_TURN=2\n"
"uint16 RIGHT_TURN=4\n"
"uint16 U_TURN=8\n"
"uint16 LEFT_TURN_ON_RED=16\n"
"uint16 RIGHT_TURN_ON_RED=32\n"
"uint16 LANE_CHANGE=64\n"
"uint16 NO_STOPPING_ALLOWED=128\n"
"uint16 ALWAYS_YIELD=256\n"
"uint16 GO_WITH_HALT=512\n"
"uint16 CAUTION=1024\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/IntersectionReferenceID\n"
"#\n"
"# IntersectionReferenceID.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The IntersectionReferenceID data frame conveys the combination of an optional RoadRegulatorID and of an\n"
"# IntersectionID that is unique within that region. When the RoadRegulatorID is present the IntersectionReferenceID is\n"
"# guaranteed to be globally unique.\n"
"\n"
"# region RoadRegulatorID OPTIONAL ::= INTEGER (0..65535)\n"
"# -- a globally unique regional assignment value\n"
"# -- typical assigned to a regional DOT authority\n"
"# -- the value zero shall be used for testing needs\n"
"# 0 is a J2735 value for testing needs, and carma can use it to indicate optional field was not set or unavailable.\n"
"uint16 region\n"
"uint16 REGION_UNAVAILABLE=0\n"
"bool region_exists\n"
"\n"
"# id IntersectionID ::= INTEGER (0..65535)\n"
"# -- a unique mapping to the intersection\n"
"# -- in question within the above region of use\n"
"uint16 id\n"
;
  }

  static const char* value(const ::j2735_msgs::ConnectsToList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.connect_to_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConnectsToList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::ConnectsToList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::ConnectsToList_<ContainerAllocator>& v)
  {
    s << indent << "connect_to_list[]" << std::endl;
    for (size_t i = 0; i < v.connect_to_list.size(); ++i)
    {
      s << indent << "  connect_to_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::Connection_<ContainerAllocator> >::stream(s, indent + "    ", v.connect_to_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_CONNECTSTOLIST_H
