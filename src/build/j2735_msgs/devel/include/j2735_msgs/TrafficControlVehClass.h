// Generated by gencpp from file j2735_msgs/TrafficControlVehClass.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TRAFFICCONTROLVEHCLASS_H
#define J2735_MSGS_MESSAGE_TRAFFICCONTROLVEHCLASS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct TrafficControlVehClass_
{
  typedef TrafficControlVehClass_<ContainerAllocator> Type;

  TrafficControlVehClass_()
    : vehicle_class(0)  {
    }
  TrafficControlVehClass_(const ContainerAllocator& _alloc)
    : vehicle_class(0)  {
  (void)_alloc;
    }



   typedef uint8_t _vehicle_class_type;
  _vehicle_class_type vehicle_class;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ANY)
  #undef ANY
#endif
#if defined(_WIN32) && defined(PEDESTRIAN)
  #undef PEDESTRIAN
#endif
#if defined(_WIN32) && defined(BICYCLE)
  #undef BICYCLE
#endif
#if defined(_WIN32) && defined(MICROMOBILE)
  #undef MICROMOBILE
#endif
#if defined(_WIN32) && defined(MOTORCYCLE)
  #undef MOTORCYCLE
#endif
#if defined(_WIN32) && defined(PASSENGER_CAR)
  #undef PASSENGER_CAR
#endif
#if defined(_WIN32) && defined(LIGHT_TRUCK_VAN)
  #undef LIGHT_TRUCK_VAN
#endif
#if defined(_WIN32) && defined(BUS)
  #undef BUS
#endif
#if defined(_WIN32) && defined(TWO_AXLE_SIX_TIRE_SINGLE_UNIT_TRUCK)
  #undef TWO_AXLE_SIX_TIRE_SINGLE_UNIT_TRUCK
#endif
#if defined(_WIN32) && defined(THREE_AXLE_SINGLE_UNIT_TRUCK)
  #undef THREE_AXLE_SINGLE_UNIT_TRUCK
#endif
#if defined(_WIN32) && defined(FOUR_OR_MORE_AXLE_SINGLE_UNIT_TRUCK)
  #undef FOUR_OR_MORE_AXLE_SINGLE_UNIT_TRUCK
#endif
#if defined(_WIN32) && defined(FOUR_OR_FEWER_AXLE_SINGLE_TRAILER_TRUCK)
  #undef FOUR_OR_FEWER_AXLE_SINGLE_TRAILER_TRUCK
#endif
#if defined(_WIN32) && defined(FIVE_AXLE_SINGLE_TRAILER_TRUCK)
  #undef FIVE_AXLE_SINGLE_TRAILER_TRUCK
#endif
#if defined(_WIN32) && defined(SIX_OR_MORE_AXLE_SINGLE_TRAILER_TRUCK)
  #undef SIX_OR_MORE_AXLE_SINGLE_TRAILER_TRUCK
#endif
#if defined(_WIN32) && defined(FIVE_OR_FEWER_AXLE_MULTI_TRAILER_TRUCK)
  #undef FIVE_OR_FEWER_AXLE_MULTI_TRAILER_TRUCK
#endif
#if defined(_WIN32) && defined(SIX_AXLE_MULTI_TRAILER_TRUCK)
  #undef SIX_AXLE_MULTI_TRAILER_TRUCK
#endif
#if defined(_WIN32) && defined(SEVEN_OR_MORE_AXLE_MULTI_TRAILER_TRUCK)
  #undef SEVEN_OR_MORE_AXLE_MULTI_TRAILER_TRUCK
#endif
#if defined(_WIN32) && defined(RAIL)
  #undef RAIL
#endif
#if defined(_WIN32) && defined(UNCLASSIFIED)
  #undef UNCLASSIFIED
#endif

  enum {
    ANY = 0u,
    PEDESTRIAN = 1u,
    BICYCLE = 2u,
    MICROMOBILE = 3u,
    MOTORCYCLE = 4u,
    PASSENGER_CAR = 5u,
    LIGHT_TRUCK_VAN = 6u,
    BUS = 7u,
    TWO_AXLE_SIX_TIRE_SINGLE_UNIT_TRUCK = 8u,
    THREE_AXLE_SINGLE_UNIT_TRUCK = 9u,
    FOUR_OR_MORE_AXLE_SINGLE_UNIT_TRUCK = 10u,
    FOUR_OR_FEWER_AXLE_SINGLE_TRAILER_TRUCK = 11u,
    FIVE_AXLE_SINGLE_TRAILER_TRUCK = 12u,
    SIX_OR_MORE_AXLE_SINGLE_TRAILER_TRUCK = 13u,
    FIVE_OR_FEWER_AXLE_MULTI_TRAILER_TRUCK = 14u,
    SIX_AXLE_MULTI_TRAILER_TRUCK = 15u,
    SEVEN_OR_MORE_AXLE_MULTI_TRAILER_TRUCK = 16u,
    RAIL = 17u,
    UNCLASSIFIED = 18u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficControlVehClass_

typedef ::j2735_msgs::TrafficControlVehClass_<std::allocator<void> > TrafficControlVehClass;

typedef boost::shared_ptr< ::j2735_msgs::TrafficControlVehClass > TrafficControlVehClassPtr;
typedef boost::shared_ptr< ::j2735_msgs::TrafficControlVehClass const> TrafficControlVehClassConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator2> & rhs)
{
  return lhs.vehicle_class == rhs.vehicle_class;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89399be8dc36339b2dee535e6aa32c9a";
  }

  static const char* value(const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89399be8dc36339bULL;
  static const uint64_t static_value2 = 0x2dee535e6aa32c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TrafficControlVehClass";
  }

  static const char* value(const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TrafficControlVehClass.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# TrafficControlVehClass ::= ENUMERATED\n"
"# {\n"
"# 	any, \n"
"# 	pedestrian,\n"
"# 	bicycle,\n"
"# 	micromobile,\n"
"# 	motorcycle,\n"
"# 	passenger-car,\n"
"# 	light-truck-van,\n"
"# 	bus,\n"
"# 	two-axle-six-tire-single-unit-truck,\n"
"# 	three-axle-single-unit-truck,\n"
"# 	four-or-more-axle-single-unit-truck,\n"
"# 	four-or-fewer-axle-single-trailer-truck,\n"
"# 	five-axle-single-trailer-truck,\n"
"# 	six-or-more-axle-single-trailer-truck,\n"
"# 	five-or-fewer-axle-multi-trailer-truck,\n"
"# 	six-axle-multi-trailer-truck,\n"
"# 	seven-or-more-axle-multi-trailer-truck,\n"
"# 	rail,\n"
"# 	unclassified, \n"
"# 	...\n"
"# }\n"
"\n"
"uint8 vehicle_class\n"
"\n"
"# enumeration values for vehicle_class:\n"
"\n"
"uint8 ANY = 0\n"
"uint8 PEDESTRIAN = 1\n"
"uint8 BICYCLE = 2\n"
"uint8 MICROMOBILE = 3\n"
"uint8 MOTORCYCLE = 4\n"
"uint8 PASSENGER_CAR = 5\n"
"uint8 LIGHT_TRUCK_VAN = 6\n"
"uint8 BUS = 7\n"
"uint8 TWO_AXLE_SIX_TIRE_SINGLE_UNIT_TRUCK = 8\n"
"uint8 THREE_AXLE_SINGLE_UNIT_TRUCK = 9\n"
"uint8 FOUR_OR_MORE_AXLE_SINGLE_UNIT_TRUCK = 10\n"
"uint8 FOUR_OR_FEWER_AXLE_SINGLE_TRAILER_TRUCK = 11\n"
"uint8 FIVE_AXLE_SINGLE_TRAILER_TRUCK = 12\n"
"uint8 SIX_OR_MORE_AXLE_SINGLE_TRAILER_TRUCK = 13\n"
"uint8 FIVE_OR_FEWER_AXLE_MULTI_TRAILER_TRUCK = 14\n"
"uint8 SIX_AXLE_MULTI_TRAILER_TRUCK = 15\n"
"uint8 SEVEN_OR_MORE_AXLE_MULTI_TRAILER_TRUCK = 16\n"
"uint8 RAIL = 17\n"
"uint8 UNCLASSIFIED = 18\n"
;
  }

  static const char* value(const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicle_class);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficControlVehClass_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator>& v)
  {
    s << indent << "vehicle_class: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_class);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TRAFFICCONTROLVEHCLASS_H
