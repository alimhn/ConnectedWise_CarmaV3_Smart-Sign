// Generated by gencpp from file j2735_msgs/DataParameters.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_DATAPARAMETERS_H
#define J2735_MSGS_MESSAGE_DATAPARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct DataParameters_
{
  typedef DataParameters_<ContainerAllocator> Type;

  DataParameters_()
    : process_method()
    , process_agency()
    , last_checked_date()
    , geoid_used()  {
    }
  DataParameters_(const ContainerAllocator& _alloc)
    : process_method(_alloc)
    , process_agency(_alloc)
    , last_checked_date(_alloc)
    , geoid_used(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _process_method_type;
  _process_method_type process_method;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _process_agency_type;
  _process_agency_type process_agency;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _last_checked_date_type;
  _last_checked_date_type last_checked_date;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _geoid_used_type;
  _geoid_used_type geoid_used;





  typedef boost::shared_ptr< ::j2735_msgs::DataParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::DataParameters_<ContainerAllocator> const> ConstPtr;

}; // struct DataParameters_

typedef ::j2735_msgs::DataParameters_<std::allocator<void> > DataParameters;

typedef boost::shared_ptr< ::j2735_msgs::DataParameters > DataParametersPtr;
typedef boost::shared_ptr< ::j2735_msgs::DataParameters const> DataParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::DataParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::DataParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::DataParameters_<ContainerAllocator1> & lhs, const ::j2735_msgs::DataParameters_<ContainerAllocator2> & rhs)
{
  return lhs.process_method == rhs.process_method &&
    lhs.process_agency == rhs.process_agency &&
    lhs.last_checked_date == rhs.last_checked_date &&
    lhs.geoid_used == rhs.geoid_used;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::DataParameters_<ContainerAllocator1> & lhs, const ::j2735_msgs::DataParameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::DataParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::DataParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::DataParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::DataParameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::DataParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::DataParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::DataParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f63a06440ac4fde99ebe6427b9e011e6";
  }

  static const char* value(const ::j2735_msgs::DataParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf63a06440ac4fde9ULL;
  static const uint64_t static_value2 = 0x9ebe6427b9e011e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::DataParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/DataParameters";
  }

  static const char* value(const ::j2735_msgs::DataParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::DataParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# MapData.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DataParameters data frame is used to provide basic (static) information\n"
"# on how a map fragment was processed or determined.\n"
"#\n"
"# DataParameters ::= SEQUENCE {\n"
"# processMethod IA5String(SIZE(1..255))\n"
"# processAgency IA5String(SIZE(1..255))\n"
"# lastCheckedDate IA5String(SIZE(1..255))\n"
"# geoidUsed IA5String(SIZE(1..255))\n"
"# ...\n"
"# }\n"
"#\n"
"\n"
"string process_method\n"
"string process_agency\n"
"string last_checked_date\n"
"string geoid_used\n"
;
  }

  static const char* value(const ::j2735_msgs::DataParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::DataParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.process_method);
      stream.next(m.process_agency);
      stream.next(m.last_checked_date);
      stream.next(m.geoid_used);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::DataParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::DataParameters_<ContainerAllocator>& v)
  {
    s << indent << "process_method: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.process_method);
    s << indent << "process_agency: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.process_agency);
    s << indent << "last_checked_date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.last_checked_date);
    s << indent << "geoid_used: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.geoid_used);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_DATAPARAMETERS_H
