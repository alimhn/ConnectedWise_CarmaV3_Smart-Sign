// Generated by gencpp from file j2735_msgs/AllowedManeuvers.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_ALLOWEDMANEUVERS_H
#define J2735_MSGS_MESSAGE_ALLOWEDMANEUVERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct AllowedManeuvers_
{
  typedef AllowedManeuvers_<ContainerAllocator> Type;

  AllowedManeuvers_()
    : allowed_maneuvers(0)  {
    }
  AllowedManeuvers_(const ContainerAllocator& _alloc)
    : allowed_maneuvers(0)  {
  (void)_alloc;
    }



   typedef uint16_t _allowed_maneuvers_type;
  _allowed_maneuvers_type allowed_maneuvers;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STRAIGHT)
  #undef STRAIGHT
#endif
#if defined(_WIN32) && defined(LEFT_TURN)
  #undef LEFT_TURN
#endif
#if defined(_WIN32) && defined(RIGHT_TURN)
  #undef RIGHT_TURN
#endif
#if defined(_WIN32) && defined(U_TURN)
  #undef U_TURN
#endif
#if defined(_WIN32) && defined(LEFT_TURN_ON_RED)
  #undef LEFT_TURN_ON_RED
#endif
#if defined(_WIN32) && defined(RIGHT_TURN_ON_RED)
  #undef RIGHT_TURN_ON_RED
#endif
#if defined(_WIN32) && defined(LANE_CHANGE)
  #undef LANE_CHANGE
#endif
#if defined(_WIN32) && defined(NO_STOPPING_ALLOWED)
  #undef NO_STOPPING_ALLOWED
#endif
#if defined(_WIN32) && defined(ALWAYS_YIELD)
  #undef ALWAYS_YIELD
#endif
#if defined(_WIN32) && defined(GO_WITH_HALT)
  #undef GO_WITH_HALT
#endif
#if defined(_WIN32) && defined(CAUTION)
  #undef CAUTION
#endif

  enum {
    STRAIGHT = 1u,
    LEFT_TURN = 2u,
    RIGHT_TURN = 4u,
    U_TURN = 8u,
    LEFT_TURN_ON_RED = 16u,
    RIGHT_TURN_ON_RED = 32u,
    LANE_CHANGE = 64u,
    NO_STOPPING_ALLOWED = 128u,
    ALWAYS_YIELD = 256u,
    GO_WITH_HALT = 512u,
    CAUTION = 1024u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> const> ConstPtr;

}; // struct AllowedManeuvers_

typedef ::j2735_msgs::AllowedManeuvers_<std::allocator<void> > AllowedManeuvers;

typedef boost::shared_ptr< ::j2735_msgs::AllowedManeuvers > AllowedManeuversPtr;
typedef boost::shared_ptr< ::j2735_msgs::AllowedManeuvers const> AllowedManeuversConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator1> & lhs, const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator2> & rhs)
{
  return lhs.allowed_maneuvers == rhs.allowed_maneuvers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator1> & lhs, const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f075ceebb35b879c36c787f46eabf5a";
  }

  static const char* value(const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f075ceebb35b879ULL;
  static const uint64_t static_value2 = 0xc36c787f46eabf5aULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/AllowedManeuvers";
  }

  static const char* value(const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# AllowedManeuvers.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# AllowedManeuvers ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# -- Allowed maneuvers at path end (stop line)\n"
"# -- All maneuvers with bits not set are therefore prohibited !\n"
"# -- A value of zero shall be used for unknown, indicating no Maneuver\n"
"# maneuverStraightAllowed(0),\n"
"# -- a Straight movement is allowed in this lane\n"
"# maneuverLeftAllowed(1),\n"
"# -- a Left Turn movement is allowed in this lane\n"
"# maneuverRightAllowed(2),\n"
"# -- a Right Turn movement is allowed in this lane\n"
"# maneuverUTurnAllowed(3),\n"
"# -- a U turn movement is allowed in this lane\n"
"# maneuverLeftTurnOnRedAllowed (4),\n"
"# -- a Stop, and then proceed when safe movement\n"
"# -- is allowed in this lane\n"
"# maneuverRightTurnOnRedAllowed (5),\n"
"# -- a Stop, and then proceed when safe movement\n"
"# -- is allowed in this lane\n"
"# maneuverLaneChangeAllowed(6),\n"
"# -- a movement which changes to an outer lane\n"
"# -- on the egress side is allowed in this lane\n"
"# -- (example: left into either outbound lane)\n"
"# maneuverNoStoppingAllowed(7),\n"
"# -- the vehicle should not stop at the stop line\n"
"# -- (example: a flashing green arrow)\n"
"# yieldAllwaysRequired(8),\n"
"# -- the allowed movements above are not protected\n"
"# -- (example: an permanent yellow condition)\n"
"# goWithHalt(9),\n"
"# -- after making a full stop, may proceed\n"
"# caution(10),\n"
"# -- proceed past stop line with caution\n"
"# reserved1(11)\n"
"# -- used to align to 12 Bit Field\n"
"# } (SIZE(12))\n"
"\n"
"uint16 allowed_maneuvers\n"
"\n"
"# Bit flags\n"
"uint16 STRAIGHT=1\n"
"uint16 LEFT_TURN=2\n"
"uint16 RIGHT_TURN=4\n"
"uint16 U_TURN=8\n"
"uint16 LEFT_TURN_ON_RED=16\n"
"uint16 RIGHT_TURN_ON_RED=32\n"
"uint16 LANE_CHANGE=64\n"
"uint16 NO_STOPPING_ALLOWED=128\n"
"uint16 ALWAYS_YIELD=256\n"
"uint16 GO_WITH_HALT=512\n"
"uint16 CAUTION=1024\n"
;
  }

  static const char* value(const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.allowed_maneuvers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AllowedManeuvers_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::AllowedManeuvers_<ContainerAllocator>& v)
  {
    s << indent << "allowed_maneuvers: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.allowed_maneuvers);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_ALLOWEDMANEUVERS_H
