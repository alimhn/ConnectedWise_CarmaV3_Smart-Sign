// Generated by gencpp from file j2735_msgs/SpeedLimitType.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_SPEEDLIMITTYPE_H
#define J2735_MSGS_MESSAGE_SPEEDLIMITTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct SpeedLimitType_
{
  typedef SpeedLimitType_<ContainerAllocator> Type;

  SpeedLimitType_()
    : speed_limit_type(0)  {
    }
  SpeedLimitType_(const ContainerAllocator& _alloc)
    : speed_limit_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _speed_limit_type_type;
  _speed_limit_type_type speed_limit_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(MAXSPEEDINSCHOOLZONE)
  #undef MAXSPEEDINSCHOOLZONE
#endif
#if defined(_WIN32) && defined(MAXSPEEDINSCHOOLZONEWHENCHILDRENAREPRESENT)
  #undef MAXSPEEDINSCHOOLZONEWHENCHILDRENAREPRESENT
#endif
#if defined(_WIN32) && defined(MAXSPEEDINCONSTRUCTIONZONE)
  #undef MAXSPEEDINCONSTRUCTIONZONE
#endif
#if defined(_WIN32) && defined(VEHICLEMINSPEED)
  #undef VEHICLEMINSPEED
#endif
#if defined(_WIN32) && defined(VEHICLEMAXSPEED)
  #undef VEHICLEMAXSPEED
#endif
#if defined(_WIN32) && defined(VEHICLENIGHTMAXSPEED)
  #undef VEHICLENIGHTMAXSPEED
#endif
#if defined(_WIN32) && defined(TRUCKMINSPEED)
  #undef TRUCKMINSPEED
#endif
#if defined(_WIN32) && defined(TRUCKMAXSPEED)
  #undef TRUCKMAXSPEED
#endif
#if defined(_WIN32) && defined(TRUCKNIGHTMAXSPEED)
  #undef TRUCKNIGHTMAXSPEED
#endif
#if defined(_WIN32) && defined(VEHICLESWITHTRAILERSMINSPEED)
  #undef VEHICLESWITHTRAILERSMINSPEED
#endif
#if defined(_WIN32) && defined(VEHICLESWITHTRAILERSMAXSPEED)
  #undef VEHICLESWITHTRAILERSMAXSPEED
#endif
#if defined(_WIN32) && defined(VEHICLESWITHTRAILERSNIGHTMAXSPEED)
  #undef VEHICLESWITHTRAILERSNIGHTMAXSPEED
#endif

  enum {
    UNKNOWN = 0u,
    MAXSPEEDINSCHOOLZONE = 1u,
    MAXSPEEDINSCHOOLZONEWHENCHILDRENAREPRESENT = 2u,
    MAXSPEEDINCONSTRUCTIONZONE = 3u,
    VEHICLEMINSPEED = 4u,
    VEHICLEMAXSPEED = 5u,
    VEHICLENIGHTMAXSPEED = 6u,
    TRUCKMINSPEED = 7u,
    TRUCKMAXSPEED = 8u,
    TRUCKNIGHTMAXSPEED = 9u,
    VEHICLESWITHTRAILERSMINSPEED = 10u,
    VEHICLESWITHTRAILERSMAXSPEED = 11u,
    VEHICLESWITHTRAILERSNIGHTMAXSPEED = 12u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedLimitType_

typedef ::j2735_msgs::SpeedLimitType_<std::allocator<void> > SpeedLimitType;

typedef boost::shared_ptr< ::j2735_msgs::SpeedLimitType > SpeedLimitTypePtr;
typedef boost::shared_ptr< ::j2735_msgs::SpeedLimitType const> SpeedLimitTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::SpeedLimitType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::SpeedLimitType_<ContainerAllocator1> & lhs, const ::j2735_msgs::SpeedLimitType_<ContainerAllocator2> & rhs)
{
  return lhs.speed_limit_type == rhs.speed_limit_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::SpeedLimitType_<ContainerAllocator1> & lhs, const ::j2735_msgs::SpeedLimitType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04fbf222f6540824b156a63c8174b9b8";
  }

  static const char* value(const ::j2735_msgs::SpeedLimitType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04fbf222f6540824ULL;
  static const uint64_t static_value2 = 0xb156a63c8174b9b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/SpeedLimitType";
  }

  static const char* value(const ::j2735_msgs::SpeedLimitType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SpeedLimitType.msg\n"
"#\n"
"# The SpeedLimitType data element relates the type of speed limit to which a given speed refers.\n"
"#\n"
"# SpeedLimitType ::= ENUMERATED {\n"
"#\n"
"# unknown, -- Speed limit type not available\n"
"# maxSpeedInSchoolZone, -- Only sent when the limit is active\n"
"# maxSpeedInSchoolZoneWhenChildrenArePresent, -- Sent at any time\n"
"# maxSpeedInConstructionZone, -- Used for work zones, incident zones, etc. where a reduced speed is present\n"
"#\n"
"# vehicleMinSpeed,\n"
"# vehicleMaxSpeed, -- Regulatory speed limit for general traffic\n"
"# vehicleNightMaxSpeed,\n"
"#\n"
"# truckMinSpeed,\n"
"# truckMaxSpeed,\n"
"# truckNightMaxSpeed,\n"
"#\n"
"# vehiclesWithTrailersMinSpeed,\n"
"# vehiclesWithTrailersMaxSpeed,\n"
"# vehiclesWithTrailersNightMaxSpeed,\n"
"# ...\n"
"# }\n"
"\n"
"uint8 speed_limit_type\n"
"\n"
"uint8 UNKNOWN=0\n"
"uint8 MAXSPEEDINSCHOOLZONE=1\n"
"uint8 MAXSPEEDINSCHOOLZONEWHENCHILDRENAREPRESENT=2\n"
"uint8 MAXSPEEDINCONSTRUCTIONZONE=3\n"
"uint8 VEHICLEMINSPEED=4\n"
"uint8 VEHICLEMAXSPEED=5\n"
"uint8 VEHICLENIGHTMAXSPEED=6\n"
"uint8 TRUCKMINSPEED=7\n"
"uint8 TRUCKMAXSPEED=8\n"
"uint8 TRUCKNIGHTMAXSPEED=9\n"
"uint8 VEHICLESWITHTRAILERSMINSPEED=10\n"
"uint8 VEHICLESWITHTRAILERSMAXSPEED=11\n"
"uint8 VEHICLESWITHTRAILERSNIGHTMAXSPEED=12\n"
;
  }

  static const char* value(const ::j2735_msgs::SpeedLimitType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_limit_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedLimitType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::SpeedLimitType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::SpeedLimitType_<ContainerAllocator>& v)
  {
    s << indent << "speed_limit_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_limit_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_SPEEDLIMITTYPE_H
