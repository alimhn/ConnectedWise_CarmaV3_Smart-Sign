// Generated by gencpp from file j2735_msgs/SpeedConfidence.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_SPEEDCONFIDENCE_H
#define J2735_MSGS_MESSAGE_SPEEDCONFIDENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct SpeedConfidence_
{
  typedef SpeedConfidence_<ContainerAllocator> Type;

  SpeedConfidence_()
    : speed_confidence(0)  {
    }
  SpeedConfidence_(const ContainerAllocator& _alloc)
    : speed_confidence(0)  {
  (void)_alloc;
    }



   typedef uint8_t _speed_confidence_type;
  _speed_confidence_type speed_confidence;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNAVAILABLE)
  #undef UNAVAILABLE
#endif
#if defined(_WIN32) && defined(PREC100MS)
  #undef PREC100MS
#endif
#if defined(_WIN32) && defined(PREC10MS)
  #undef PREC10MS
#endif
#if defined(_WIN32) && defined(PREC5MS)
  #undef PREC5MS
#endif
#if defined(_WIN32) && defined(PREC1MS)
  #undef PREC1MS
#endif
#if defined(_WIN32) && defined(PREC0_1MS)
  #undef PREC0_1MS
#endif
#if defined(_WIN32) && defined(PREC0_05MS)
  #undef PREC0_05MS
#endif
#if defined(_WIN32) && defined(PREC0_01MS)
  #undef PREC0_01MS
#endif

  enum {
    UNAVAILABLE = 0u,
    PREC100MS = 1u,
    PREC10MS = 2u,
    PREC5MS = 3u,
    PREC1MS = 4u,
    PREC0_1MS = 5u,
    PREC0_05MS = 6u,
    PREC0_01MS = 7u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedConfidence_

typedef ::j2735_msgs::SpeedConfidence_<std::allocator<void> > SpeedConfidence;

typedef boost::shared_ptr< ::j2735_msgs::SpeedConfidence > SpeedConfidencePtr;
typedef boost::shared_ptr< ::j2735_msgs::SpeedConfidence const> SpeedConfidenceConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::SpeedConfidence_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::SpeedConfidence_<ContainerAllocator1> & lhs, const ::j2735_msgs::SpeedConfidence_<ContainerAllocator2> & rhs)
{
  return lhs.speed_confidence == rhs.speed_confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::SpeedConfidence_<ContainerAllocator1> & lhs, const ::j2735_msgs::SpeedConfidence_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a542e0efd9d48eb9bcc3e9968cb696e0";
  }

  static const char* value(const ::j2735_msgs::SpeedConfidence_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa542e0efd9d48eb9ULL;
  static const uint64_t static_value2 = 0xbcc3e9968cb696e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/SpeedConfidence";
  }

  static const char* value(const ::j2735_msgs::SpeedConfidence_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# SpeedConfidence.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_SpeedConfidence data element is used to provide the 95% confidence level for the currently reported\n"
"# value of DE_Speed, taking into account the current calibration and precision of the sensor(s) used to measure and/or\n"
"# calculate the value.\n"
"\n"
"# SpeedConfidence ::= ENUMERATED {\n"
"# unavailable (0), -- Not Equipped or unavailable\n"
"# prec100ms (1), -- 100 meters / sec\n"
"# prec10ms(2), -- 10 meters / sec\n"
"# prec5ms (3), -- 5 meters / sec\n"
"# prec1ms (4), -- 1 meters / sec\n"
"# prec0-1ms (5), -- 0.1 meters / sec\n"
"# prec0-05ms (6), -- -- 0.05 meters / sec\n"
"# prec0-01ms (7) -- -- 0.01 meters / sec\n"
"# }\n"
"\n"
"uint8 speed_confidence\n"
"\n"
"uint8 UNAVAILABLE=0\n"
"uint8 PREC100MS=1\n"
"uint8 PREC10MS=2\n"
"uint8 PREC5MS=3\n"
"uint8 PREC1MS=4\n"
"uint8 PREC0_1MS=5\n"
"uint8 PREC0_05MS=6\n"
"uint8 PREC0_01MS=7\n"
;
  }

  static const char* value(const ::j2735_msgs::SpeedConfidence_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedConfidence_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::SpeedConfidence_<ContainerAllocator>& v)
  {
    s << indent << "speed_confidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_SPEEDCONFIDENCE_H
