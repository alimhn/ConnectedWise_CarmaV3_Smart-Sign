// Generated by gencpp from file j2735_msgs/OffsetXaxis.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_OFFSETXAXIS_H
#define J2735_MSGS_MESSAGE_OFFSETXAXIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct OffsetXaxis_
{
  typedef OffsetXaxis_<ContainerAllocator> Type;

  OffsetXaxis_()
    : choice(0)
    , small(0)
    , large(0)  {
    }
  OffsetXaxis_(const ContainerAllocator& _alloc)
    : choice(0)
    , small(0)
    , large(0)  {
  (void)_alloc;
    }



   typedef uint8_t _choice_type;
  _choice_type choice;

   typedef int16_t _small_type;
  _small_type small;

   typedef int16_t _large_type;
  _large_type large;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SMALL)
  #undef SMALL
#endif
#if defined(_WIN32) && defined(LARGE)
  #undef LARGE
#endif

  enum {
    SMALL = 0u,
    LARGE = 1u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> const> ConstPtr;

}; // struct OffsetXaxis_

typedef ::j2735_msgs::OffsetXaxis_<std::allocator<void> > OffsetXaxis;

typedef boost::shared_ptr< ::j2735_msgs::OffsetXaxis > OffsetXaxisPtr;
typedef boost::shared_ptr< ::j2735_msgs::OffsetXaxis const> OffsetXaxisConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::OffsetXaxis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::OffsetXaxis_<ContainerAllocator1> & lhs, const ::j2735_msgs::OffsetXaxis_<ContainerAllocator2> & rhs)
{
  return lhs.choice == rhs.choice &&
    lhs.small == rhs.small &&
    lhs.large == rhs.large;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::OffsetXaxis_<ContainerAllocator1> & lhs, const ::j2735_msgs::OffsetXaxis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c890b94cd43f65cd23f448bf170a405";
  }

  static const char* value(const ::j2735_msgs::OffsetXaxis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c890b94cd43f65cULL;
  static const uint64_t static_value2 = 0xd23f448bf170a405ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/OffsetXaxis";
  }

  static const char* value(const ::j2735_msgs::OffsetXaxis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# OffsetXaxis.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# 	-- A path X offset value for translations of the\n"
"# 	-- path's points when creating translated lanes.\n"
"# 	-- The values found in the reference lane are\n"
"# 	-- all offset based on the X and Y values from\n"
"# 	-- the coordinates of the reference lane's\n"
"# 	-- initial path point.\n"
"# offsetXaxis CHOICE {\n"
"# 		small DrivenLineOffsetSm,\n"
"# 		large DrivenLineOffsetLg\n"
"# 		},\n"
"\n"
"\n"
"uint8 choice\n"
"uint8 SMALL=0\n"
"uint8 LARGE=1\n"
"\n"
"# The DrivenLineOffsetSmall data element is an integer value expressing the offset in a defined axis from a reference\n"
"# lane number from which a computed lane is offset.\n"
"# DrivenLineOffsetSm ::= INTEGER (-2047..2047)\n"
"# -- LSB units are 1 cm.\n"
"int16 small\n"
"\n"
"\n"
"# The DE_DrivenLineOffsetLarge data element is an integer value expressing the offset in a defined axis from a\n"
"# reference lane number from which a computed lane is offset.\n"
"# DrivenLineOffsetLg ::= INTEGER (-32767..32767)\n"
"# -- LSB units are 1 cm.\n"
"int16 large\n"
;
  }

  static const char* value(const ::j2735_msgs::OffsetXaxis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.choice);
      stream.next(m.small);
      stream.next(m.large);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OffsetXaxis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::OffsetXaxis_<ContainerAllocator>& v)
  {
    s << indent << "choice: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.choice);
    s << indent << "small: ";
    Printer<int16_t>::stream(s, indent + "  ", v.small);
    s << indent << "large: ";
    Printer<int16_t>::stream(s, indent + "  ", v.large);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_OFFSETXAXIS_H
