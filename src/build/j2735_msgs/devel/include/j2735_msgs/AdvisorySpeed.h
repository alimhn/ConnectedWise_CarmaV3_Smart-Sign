// Generated by gencpp from file j2735_msgs/AdvisorySpeed.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_ADVISORYSPEED_H
#define J2735_MSGS_MESSAGE_ADVISORYSPEED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/AdvisorySpeedType.h>
#include <j2735_msgs/SpeedConfidence.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct AdvisorySpeed_
{
  typedef AdvisorySpeed_<ContainerAllocator> Type;

  AdvisorySpeed_()
    : type()
    , speed(0.0)
    , speed_exists(false)
    , confidence()
    , distance(0)
    , distance_exists(false)
    , restriction_class_id(0)
    , restriction_class_id_exists(false)  {
    }
  AdvisorySpeed_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , speed(0.0)
    , speed_exists(false)
    , confidence(_alloc)
    , distance(0)
    , distance_exists(false)
    , restriction_class_id(0)
    , restriction_class_id_exists(false)  {
  (void)_alloc;
    }



   typedef  ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint8_t _speed_exists_type;
  _speed_exists_type speed_exists;

   typedef  ::j2735_msgs::SpeedConfidence_<ContainerAllocator>  _confidence_type;
  _confidence_type confidence;

   typedef uint16_t _distance_type;
  _distance_type distance;

   typedef uint8_t _distance_exists_type;
  _distance_exists_type distance_exists;

   typedef uint8_t _restriction_class_id_type;
  _restriction_class_id_type restriction_class_id;

   typedef uint8_t _restriction_class_id_exists_type;
  _restriction_class_id_exists_type restriction_class_id_exists;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SPEED_UNAVAILABLE)
  #undef SPEED_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(DISTANCE_UNKNOWN)
  #undef DISTANCE_UNKNOWN
#endif

  enum {
    DISTANCE_UNKNOWN = 0u,
  };

  static const float SPEED_UNAVAILABLE;

  typedef boost::shared_ptr< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> const> ConstPtr;

}; // struct AdvisorySpeed_

typedef ::j2735_msgs::AdvisorySpeed_<std::allocator<void> > AdvisorySpeed;

typedef boost::shared_ptr< ::j2735_msgs::AdvisorySpeed > AdvisorySpeedPtr;
typedef boost::shared_ptr< ::j2735_msgs::AdvisorySpeed const> AdvisorySpeedConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const float
      AdvisorySpeed_<ContainerAllocator>::SPEED_UNAVAILABLE =
        
          500.0
        
        ;
   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator1> & lhs, const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.speed == rhs.speed &&
    lhs.speed_exists == rhs.speed_exists &&
    lhs.confidence == rhs.confidence &&
    lhs.distance == rhs.distance &&
    lhs.distance_exists == rhs.distance_exists &&
    lhs.restriction_class_id == rhs.restriction_class_id &&
    lhs.restriction_class_id_exists == rhs.restriction_class_id_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator1> & lhs, const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "639b4e562eeb97caacd5b466a782e24a";
  }

  static const char* value(const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x639b4e562eeb97caULL;
  static const uint64_t static_value2 = 0xacd5b466a782e24aULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/AdvisorySpeed";
  }

  static const char* value(const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# AdvisorySpeed.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_AdvisorySpeed data frame is used to convey a recommended traveling approach speed to an intersection\n"
"# from the message issuer to various travelers and vehicle types. Besides support for various eco-driving applications, this\n"
"# allows transmitting recommended speeds for specialty vehicles such as transit buses.\n"
"# AdvisorySpeed ::= SEQUENCE {\n"
"# type AdvisorySpeedType,\n"
"# -- the type of advisory which this is.\n"
"# speed SpeedAdvice OPTIONAL,\n"
"# -- See Section 11 for converting and translating speed\n"
"# -- expressed in mph into units of m/s\n"
"# -- This element is optional ONLY when superceded\n"
"# -- by the presence of a regional speed element found in\n"
"# -- Reg-AdvisorySpeed entry\n"
"# confidence SpeedConfidence OPTIONAL,\n"
"# -- A confidence value for the above speed\n"
"# distance ZoneLength OPTIONAL,\n"
"# -- Unit = 1 meter,\n"
"# -- The distance indicates the region for which the advised speed\n"
"# -- is recommended, it is specified upstream from the stop bar\n"
"# -- along the connected egressing lane\n"
"# class RestrictionClassID OPTIONAL,\n"
"# -- the vehicle types to which it applies\n"
"# -- when absent, the AdvisorySpeed applies to\n"
"# -- all motor vehicle types\n"
"# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-AdvisorySpeed}} OPTIONAL,\n"
"# ...\n"
"# }\n"
"\n"
"j2735_msgs/AdvisorySpeedType type\n"
"\n"
"# SpeedAdvice ::= INTEGER (0..500) OPTIONAL\n"
"# This data element represents the recommended velocity of an object, typically a vehicle speed along a roadway,\n"
"# expressed in unsigned units of 0.1 meters per second.\n"
"#-- LSB units are 0.1 m/s^2\n"
"#-- the value 499 shall be used for values at or greater than 49.9 m/s\n"
"#-- the value 500 shall be used to indicate that speed is unavailable\n"
"float32 speed\n"
"float32 SPEED_UNAVAILABLE = 500\n"
"bool speed_exists\n"
"\n"
"# SpeedConfidence is an enum already with 0 as unavailable.\n"
"j2735_msgs/SpeedConfidence confidence\n"
"\n"
"# ZoneLength ::= INTEGER (0..10000)\n"
"# -- Unit = 1 meter, 0 = unknown,\n"
"# -- The value 10000 to be used for Distances >=10000 m\n"
"# -- (e.g. from known point to another point along a\n"
"# -- known path, often against traffic flow direction\n"
"# -- when used for measuring queues)\n"
"uint16 distance\n"
"uint16 DISTANCE_UNKNOWN=0\n"
"bool distance_exists\n"
"\n"
"# RestrictionClassID ::= INTEGER (0..255)\n"
"uint8 restriction_class_id\n"
"bool restriction_class_id_exists\n"
"\n"
"# regional #TODO: RegionalExtensions are not yet implemented in asn1c\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/AdvisorySpeedType\n"
"#\n"
"# AdvisorySpeedType.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_AdvisorySpeedType data element relates the type of travel to which a given speed refers. This element is\n"
"# typically used as part of an AdvisorySpeed data frame for signal phase and timing data.\n"
"#\n"
"# AdvisorySpeedType ::= ENUMERATED {\n"
"# none (0),\n"
"# greenwave (1),\n"
"# ecoDrive (2),\n"
"# transit (3),\n"
"# ...\n"
"# } -- Note: subject to further growth\n"
"\n"
"uint8 advisory_speed_type\n"
"\n"
"uint8 NONE=0\n"
"uint8 GREENWAVE=1\n"
"uint8 ECODRIVE=2\n"
"uint8 TRANSIT=3\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/SpeedConfidence\n"
"#\n"
"# SpeedConfidence.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_SpeedConfidence data element is used to provide the 95% confidence level for the currently reported\n"
"# value of DE_Speed, taking into account the current calibration and precision of the sensor(s) used to measure and/or\n"
"# calculate the value.\n"
"\n"
"# SpeedConfidence ::= ENUMERATED {\n"
"# unavailable (0), -- Not Equipped or unavailable\n"
"# prec100ms (1), -- 100 meters / sec\n"
"# prec10ms(2), -- 10 meters / sec\n"
"# prec5ms (3), -- 5 meters / sec\n"
"# prec1ms (4), -- 1 meters / sec\n"
"# prec0-1ms (5), -- 0.1 meters / sec\n"
"# prec0-05ms (6), -- -- 0.05 meters / sec\n"
"# prec0-01ms (7) -- -- 0.01 meters / sec\n"
"# }\n"
"\n"
"uint8 speed_confidence\n"
"\n"
"uint8 UNAVAILABLE=0\n"
"uint8 PREC100MS=1\n"
"uint8 PREC10MS=2\n"
"uint8 PREC5MS=3\n"
"uint8 PREC1MS=4\n"
"uint8 PREC0_1MS=5\n"
"uint8 PREC0_05MS=6\n"
"uint8 PREC0_01MS=7\n"
;
  }

  static const char* value(const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.speed);
      stream.next(m.speed_exists);
      stream.next(m.confidence);
      stream.next(m.distance);
      stream.next(m.distance_exists);
      stream.next(m.restriction_class_id);
      stream.next(m.restriction_class_id_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AdvisorySpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::AdvisorySpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::AdvisorySpeed_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    s << std::endl;
    Printer< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "speed_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speed_exists);
    s << indent << "confidence: ";
    s << std::endl;
    Printer< ::j2735_msgs::SpeedConfidence_<ContainerAllocator> >::stream(s, indent + "  ", v.confidence);
    s << indent << "distance: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance);
    s << indent << "distance_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.distance_exists);
    s << indent << "restriction_class_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.restriction_class_id);
    s << indent << "restriction_class_id_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.restriction_class_id_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_ADVISORYSPEED_H
