// Generated by gencpp from file j2735_msgs/TrafficControlParams.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TRAFFICCONTROLPARAMS_H
#define J2735_MSGS_MESSAGE_TRAFFICCONTROLPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/TrafficControlVehClass.h>
#include <j2735_msgs/TrafficControlSchedule.h>
#include <j2735_msgs/TrafficControlDetail.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct TrafficControlParams_
{
  typedef TrafficControlParams_<ContainerAllocator> Type;

  TrafficControlParams_()
    : vclasses()
    , schedule()
    , regulatory(false)
    , detail()  {
    }
  TrafficControlParams_(const ContainerAllocator& _alloc)
    : vclasses(_alloc)
    , schedule(_alloc)
    , regulatory(false)
    , detail(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >::other >  _vclasses_type;
  _vclasses_type vclasses;

   typedef  ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator>  _schedule_type;
  _schedule_type schedule;

   typedef uint8_t _regulatory_type;
  _regulatory_type regulatory;

   typedef  ::j2735_msgs::TrafficControlDetail_<ContainerAllocator>  _detail_type;
  _detail_type detail;





  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficControlParams_

typedef ::j2735_msgs::TrafficControlParams_<std::allocator<void> > TrafficControlParams;

typedef boost::shared_ptr< ::j2735_msgs::TrafficControlParams > TrafficControlParamsPtr;
typedef boost::shared_ptr< ::j2735_msgs::TrafficControlParams const> TrafficControlParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TrafficControlParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TrafficControlParams_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlParams_<ContainerAllocator2> & rhs)
{
  return lhs.vclasses == rhs.vclasses &&
    lhs.schedule == rhs.schedule &&
    lhs.regulatory == rhs.regulatory &&
    lhs.detail == rhs.detail;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TrafficControlParams_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2bc48933f6689ba2745ec3eb181fcbfe";
  }

  static const char* value(const ::j2735_msgs::TrafficControlParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2bc48933f6689ba2ULL;
  static const uint64_t static_value2 = 0x745ec3eb181fcbfeULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TrafficControlParams";
  }

  static const char* value(const ::j2735_msgs::TrafficControlParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TrafficControlParams.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# TrafficControlParams ::= SEQUENCE\n"
"# {\n"
"# 	vclasses SEQUENCE (SIZE(1..255)) OF TrafficControlVehClass,\n"
"# 	schedule TrafficControlSchedule,\n"
"# 	regulatory BOOLEAN,\n"
"# 	detail TrafficControlDetail\n"
"# }\n"
"\n"
"# vclasses SEQUENCE (SIZE(1..255)) OF TrafficControlVehClass,\n"
"j2735_msgs/TrafficControlVehClass[] vclasses\n"
"\n"
"# schedule TrafficControlSchedule\n"
"j2735_msgs/TrafficControlSchedule schedule\n"
"\n"
"# regulatory BOOLEAN\n"
"bool regulatory\n"
"\n"
"# detail TrafficControlDetail\n"
"j2735_msgs/TrafficControlDetail detail\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/TrafficControlVehClass\n"
"#\n"
"# TrafficControlVehClass.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# TrafficControlVehClass ::= ENUMERATED\n"
"# {\n"
"# 	any, \n"
"# 	pedestrian,\n"
"# 	bicycle,\n"
"# 	micromobile,\n"
"# 	motorcycle,\n"
"# 	passenger-car,\n"
"# 	light-truck-van,\n"
"# 	bus,\n"
"# 	two-axle-six-tire-single-unit-truck,\n"
"# 	three-axle-single-unit-truck,\n"
"# 	four-or-more-axle-single-unit-truck,\n"
"# 	four-or-fewer-axle-single-trailer-truck,\n"
"# 	five-axle-single-trailer-truck,\n"
"# 	six-or-more-axle-single-trailer-truck,\n"
"# 	five-or-fewer-axle-multi-trailer-truck,\n"
"# 	six-axle-multi-trailer-truck,\n"
"# 	seven-or-more-axle-multi-trailer-truck,\n"
"# 	rail,\n"
"# 	unclassified, \n"
"# 	...\n"
"# }\n"
"\n"
"uint8 vehicle_class\n"
"\n"
"# enumeration values for vehicle_class:\n"
"\n"
"uint8 ANY = 0\n"
"uint8 PEDESTRIAN = 1\n"
"uint8 BICYCLE = 2\n"
"uint8 MICROMOBILE = 3\n"
"uint8 MOTORCYCLE = 4\n"
"uint8 PASSENGER_CAR = 5\n"
"uint8 LIGHT_TRUCK_VAN = 6\n"
"uint8 BUS = 7\n"
"uint8 TWO_AXLE_SIX_TIRE_SINGLE_UNIT_TRUCK = 8\n"
"uint8 THREE_AXLE_SINGLE_UNIT_TRUCK = 9\n"
"uint8 FOUR_OR_MORE_AXLE_SINGLE_UNIT_TRUCK = 10\n"
"uint8 FOUR_OR_FEWER_AXLE_SINGLE_TRAILER_TRUCK = 11\n"
"uint8 FIVE_AXLE_SINGLE_TRAILER_TRUCK = 12\n"
"uint8 SIX_OR_MORE_AXLE_SINGLE_TRAILER_TRUCK = 13\n"
"uint8 FIVE_OR_FEWER_AXLE_MULTI_TRAILER_TRUCK = 14\n"
"uint8 SIX_AXLE_MULTI_TRAILER_TRUCK = 15\n"
"uint8 SEVEN_OR_MORE_AXLE_MULTI_TRAILER_TRUCK = 16\n"
"uint8 RAIL = 17\n"
"uint8 UNCLASSIFIED = 18\n"
"================================================================================\n"
"MSG: j2735_msgs/TrafficControlSchedule\n"
"#\n"
"# TrafficControlSchedule.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# TrafficControlSchedule ::= SEQUENCE\n"
"# {\n"
"# 	start EpochMins, -- start time required, even if it's the epoch value zero\n"
"# 	end [0] EpochMins OPTIONAL, -- default to max value 153722867280912\n"
"# 	dow [1] DayOfWeek OPTIONAL, \n"
"# 	between [2] SEQUENCE (SIZE(1..63)) OF DailySchedule OPTIONAL, \n"
"# 	repeat [3] RepeatParams OPTIONAL\n"
"# }\n"
"\n"
"# start EpochMins, -- start time required, even if it's the epoch value zero\n"
"uint64 start\n"
"\n"
"# end [0] EpochMins OPTIONAL, -- default to max value 153722867280912\n"
"uint64 end\n"
"bool end_exists\n"
"\n"
"# dow [1] DayOfWeek OPTIONAL, \n"
"j2735_msgs/DayOfWeek dow\n"
"bool dow_exists\n"
"\n"
"# between [2] SEQUENCE (SIZE(1..63)) OF DailySchedule OPTIONAL, \n"
"j2735_msgs/DailySchedule[] between\n"
"bool between_exists\n"
"\n"
"# repeat [3] RepeatParams OPTIONAL\n"
"j2735_msgs/RepeatParams repeat\n"
"bool repeat_exists\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/DayOfWeek\n"
"#\n"
"# DayOfWeek.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# DayOfWeek ::= BIT STRING //only J\n"
"# {\n"
"# 	sun (6), \n"
"# 	mon (5), \n"
"# 	tue (4), \n"
"# 	wed (3), \n"
"# 	thu (2), \n"
"# 	fri (1), \n"
"# 	sat (0)\n"
"# }\n"
"\n"
"uint8[7] dow\n"
"\n"
"# enumeration values for day of week\n"
"uint8 SUN = 6  \n"
"uint8 MON = 5\n"
"uint8 TUE = 4  \n"
"uint8 WED = 3  \n"
"uint8 THU = 2  \n"
"uint8 FRI = 1  \n"
"uint8 SAT = 0\n"
"================================================================================\n"
"MSG: j2735_msgs/DailySchedule\n"
"#\n"
"# DailySchedule.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification for vehicle internal use.\n"
"#\n"
"# @author Misheel Bayartsengel \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# The schedule bounds of a geofence within a specific day of the week\n"
"\n"
"# DailySchedule ::= SEQUENCE\n"
"# {\n"
"# 	begin INTEGER (0..1439), -- minutes relative to midnight local time\n"
"# 	duration INTEGER (0..1439) -- the number of active minutes, up to one day\n"
"# }\n"
"\n"
"# begin INTEGER (0..1439), -- minutes relative to midnight local time\n"
"uint16 begin\n"
"\n"
"# duration INTEGER (0..1439) -- the number of active minutes, up to one day\n"
"uint16 duration\n"
"================================================================================\n"
"MSG: j2735_msgs/RepeatParams\n"
"#\n"
"# RepeatParams.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification for vehicle internal use.\n"
"#\n"
"# @author Misheel Bayartsengel \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# RepeatParams ::= SEQUENCE\n"
"# {\n"
"# 	offset INTEGER (0..1439), -- shift repetition start relative to midnight local time\n"
"# 	period INTEGER (0..1439), -- minutes between successive time spans\n"
"# 	span INTEGER (0..1439) -- number of minutes schedule is active, must be less than the period\n"
"# }\n"
"\n"
"# Offset \n"
"# shift repetition start relative to midnight local time\n"
"uint16 offset\n"
"\n"
"# Period\n"
"# minutes between successive time spans\n"
"uint16 period\n"
"\n"
"# Span\n"
"# number of minutes schedule is active, must be less than the period\n"
"uint16 span\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/TrafficControlDetail\n"
"#\n"
"# TrafficControlDetail.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"#TrafficControlDetail ::= CHOICE\n"
"#{\n"
"#	signal OCTET STRING SIZE(0..63),\n"
"#	stop NULL,\n"
"#	yield NULL,\n"
"#	notowing NULL,\n"
"#	restricted NULL,\n"
"#	closed ENUMERATED {open, closed, taperleft, taperright, openleft, openright},\n"
"#	chains ENUMERATED {no, permitted, required},\n"
"#	direction ENUMERATED {forward, reverse},\n"
"#	lataffinity ENUMERATED {left, right},\n"
"#	latperm SEQUENCE (SIZE(2)) OF ENUMERATED {none, permitted, passing-only, emergency-only},\n"
"#	parking ENUMERATED {no, parallel, angled},\n"
"#	minspeed INTEGER (0..1023), -- tenths of m/s\n"
"#	maxspeed INTEGER (0..1023), -- tenths of m/s\n"
"#	minhdwy INTEGER (0..2047), -- tenths of meters\n"
"#	maxvehmass INTEGER (0..65535), -- kg\n"
"#	maxvehheight INTEGER (0..127), -- tenths of meters\n"
"#	maxvehwidth INTEGER (0..127), -- tenths of meters\n"
"#	maxvehlength INTEGER (0..1023), -- tenths of meters\n"
"#	maxvehaxles INTEGER (2..15),\n"
"#	minvehocc INTEGER (1..15), \n"
"#	...\n"
"#}\n"
"\n"
"\n"
"uint8 choice\n"
"\n"
"# enumeration values for choice:\n"
"\n"
"uint8 SIGNAL_CHOICE =0\n"
"uint8 STOP_CHOICE =1\n"
"uint8 YIELD_CHOICE =2\n"
"uint8 NOTOWING_CHOICE =3\n"
"uint8 RESTRICTED_CHOICE =4\n"
"uint8 CLOSED_CHOICE =5\n"
"uint8 CHAINS_CHOICE =6\n"
"uint8 DIRECTION_CHOICE =7\n"
"uint8 LATAFFINITY_CHOICE =8\n"
"uint8 LATPERM_CHOICE =9\n"
"uint8 PARKING_CHOICE =10\n"
"uint8 MINSPEED_CHOICE =11\n"
"uint8 MAXSPEED_CHOICE =12\n"
"uint8 MINHDWY_CHOICE =13\n"
"uint8 MAXVEHMASS_CHOICE =14\n"
"uint8 MAXVEHHEIGHT_CHOICE =15\n"
"uint8 MAXVEHWIDTH_CHOICE =16\n"
"uint8 MAXVEHLENGTH_CHOICE =17\n"
"uint8 MAXVEHAXLES_CHOICE =18\n"
"uint8 MINVEHOCC_CHOICE =19\n"
"\n"
"# signal ::= OCTET STRING SIZE(0..63)\n"
"uint8[] signal\n"
"\n"
"#closed ENUMERATED {open, closed, taperleft, taperright, openleft, openright}\n"
"\n"
"uint8 closed\n"
"\n"
"# enumeration values for closed:\n"
"\n"
"uint8 OPEN=0\n"
"\n"
"uint8 CLOSED=1\n"
"\n"
"uint8 TAPERLEFT=2\n"
"\n"
"uint8 TAPERRIGHT=3\n"
"\n"
"uint8 OPENLEFT=4\n"
"\n"
"uint8 OPENRIGHT=5\n"
"\n"
"#chains ENUMERATED {no, permitted, required}\n"
"\n"
"uint8 chains\n"
"\n"
"# enumeration values for chains:\n"
"\n"
"uint8 NO=0\n"
"\n"
"uint8 PERMITTED=1\n"
"\n"
"uint8 REQUIRED=2\n"
"\n"
"\n"
"#direction ENUMERATED {forward, reverse}\n"
"\n"
"uint8 direction\n"
"\n"
"# enumeration values for direction:\n"
"\n"
"uint8 FORWARD=0\n"
"\n"
"uint8 REVERSE=1\n"
"\n"
"#lataffinity ENUMERATED {left, right}\n"
"\n"
"uint8 lataffinity\n"
"\n"
"# enumeration values for lataffinity:\n"
"\n"
"uint8 LEFT=0\n"
"\n"
"uint8 RIGHT=1\n"
"\n"
"#latperm SEQUENCE (SIZE(2)) OF ENUMERATED {none, permitted, passing-only, emergency-only}\n"
"\n"
"uint8[2] latperm\n"
"\n"
"# enumeration values for latperm:\n"
"\n"
"uint8 NONE=0\n"
"\n"
"# uint8 PERMITTED=1 redeclaration\n"
"\n"
"uint8 PASSINGONLY=2\n"
"\n"
"uint8 EMERGENCYONLY=3\n"
"\n"
"#parking ENUMERATED {no, parallel, angled}\n"
"\n"
"uint8 parking\n"
"\n"
"# enumeration values for parking:\n"
"\n"
"# uint8 NO=0 redeclaration\n"
"\n"
"uint8 PARALLEL=1\n"
"\n"
"uint8 ANGLED=2\n"
"\n"
"#minspeed ::= INTEGER (0..1023), -- tenths of m/s\n"
"uint16 minspeed\n"
"\n"
"#maxspeed ::= INTEGER (0..1023), -- tenths of m/s\n"
"uint16 maxspeed\n"
"\n"
"#minhdwy ::= INTEGER (0..2047), -- tenths of meters\n"
"uint16 minhdwy\n"
"\n"
"#maxvehmass ::= INTEGER (0..65535), -- kg\n"
"uint16 maxvehmass\n"
"\n"
"#maxvehheight ::= INTEGER (0..127), -- tenths of meters\n"
"uint8 maxvehheight\n"
"\n"
"#maxvehwidth ::= INTEGER (0..127), -- tenths of meters\n"
"uint8 maxvehwidth\n"
"\n"
"#maxvehlength ::= INTEGER (0..1023), -- tenths of meters\n"
"uint16 maxvehlength\n"
"\n"
"#maxvehaxles ::= INTEGER (2..15)\n"
"uint8 maxvehaxles\n"
"\n"
"#minvehocc ::= INTEGER (1..15)\n"
"uint8 minvehocc\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::TrafficControlParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vclasses);
      stream.next(m.schedule);
      stream.next(m.regulatory);
      stream.next(m.detail);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficControlParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TrafficControlParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TrafficControlParams_<ContainerAllocator>& v)
  {
    s << indent << "vclasses[]" << std::endl;
    for (size_t i = 0; i < v.vclasses.size(); ++i)
    {
      s << indent << "  vclasses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::TrafficControlVehClass_<ContainerAllocator> >::stream(s, indent + "    ", v.vclasses[i]);
    }
    s << indent << "schedule: ";
    s << std::endl;
    Printer< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >::stream(s, indent + "  ", v.schedule);
    s << indent << "regulatory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.regulatory);
    s << indent << "detail: ";
    s << std::endl;
    Printer< ::j2735_msgs::TrafficControlDetail_<ContainerAllocator> >::stream(s, indent + "  ", v.detail);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TRAFFICCONTROLPARAMS_H
