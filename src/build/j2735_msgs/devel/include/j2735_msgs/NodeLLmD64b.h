// Generated by gencpp from file j2735_msgs/NodeLLmD64b.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_NODELLMD64B_H
#define J2735_MSGS_MESSAGE_NODELLMD64B_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct NodeLLmD64b_
{
  typedef NodeLLmD64b_<ContainerAllocator> Type;

  NodeLLmD64b_()
    : longitude(0)
    , latitude(0)  {
    }
  NodeLLmD64b_(const ContainerAllocator& _alloc)
    : longitude(0)
    , latitude(0)  {
  (void)_alloc;
    }



   typedef int32_t _longitude_type;
  _longitude_type longitude;

   typedef int32_t _latitude_type;
  _latitude_type latitude;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LONGITUDE_UNAVAILABLE)
  #undef LONGITUDE_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(LONGITUDE_MAX)
  #undef LONGITUDE_MAX
#endif
#if defined(_WIN32) && defined(LONGITUDE_MIN)
  #undef LONGITUDE_MIN
#endif
#if defined(_WIN32) && defined(LATITUDE_UNAVAILABLE)
  #undef LATITUDE_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(LATITUDE_MAX)
  #undef LATITUDE_MAX
#endif
#if defined(_WIN32) && defined(LATITUDE_MIN)
  #undef LATITUDE_MIN
#endif

  enum {
    LONGITUDE_UNAVAILABLE = 1800000001,
    LONGITUDE_MAX = 1800000000,
    LONGITUDE_MIN = -1799999999,
    LATITUDE_UNAVAILABLE = 900000001,
    LATITUDE_MAX = 900000000,
    LATITUDE_MIN = -900000000,
  };


  typedef boost::shared_ptr< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> const> ConstPtr;

}; // struct NodeLLmD64b_

typedef ::j2735_msgs::NodeLLmD64b_<std::allocator<void> > NodeLLmD64b;

typedef boost::shared_ptr< ::j2735_msgs::NodeLLmD64b > NodeLLmD64bPtr;
typedef boost::shared_ptr< ::j2735_msgs::NodeLLmD64b const> NodeLLmD64bConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator1> & lhs, const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator2> & rhs)
{
  return lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator1> & lhs, const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efa0e1c69ee465f94ef0c4372e50ef36";
  }

  static const char* value(const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefa0e1c69ee465f9ULL;
  static const uint64_t static_value2 = 0x4ef0c4372e50ef36ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/NodeLLmD64b";
  }

  static const char* value(const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# NodeLLmD64b.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# A 64-bit node type with lat-long values expressed in standard SAE one tenth of a micro degree.\n"
"\n"
"# Node-LLmD-64b ::= SEQUENCE {\n"
"# lon Longitude,\n"
"# lat Latitude\n"
"# }\n"
"\n"
"#Longitude ::= INTEGER (-1799999999..1800000001)\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 180 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"int32 longitude\n"
"\n"
"int32 LONGITUDE_UNAVAILABLE = 1800000001\n"
"int32 LONGITUDE_MAX = 1800000000\n"
"int32 LONGITUDE_MIN = -1799999999\n"
"\n"
"#Latitude ::= INTEGER (-900000000..900000001)\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 90 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"int32 latitude\n"
"\n"
"int32 LATITUDE_UNAVAILABLE = 900000001\n"
"int32 LATITUDE_MAX = 900000000\n"
"int32 LATITUDE_MIN = -900000000\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.longitude);
      stream.next(m.latitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeLLmD64b_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::NodeLLmD64b_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::NodeLLmD64b_<ContainerAllocator>& v)
  {
    s << indent << "longitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.latitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_NODELLMD64B_H
