// Generated by gencpp from file j2735_msgs/TransmissionState.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TRANSMISSIONSTATE_H
#define J2735_MSGS_MESSAGE_TRANSMISSIONSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct TransmissionState_
{
  typedef TransmissionState_<ContainerAllocator> Type;

  TransmissionState_()
    : transmission_state(0)  {
    }
  TransmissionState_(const ContainerAllocator& _alloc)
    : transmission_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _transmission_state_type;
  _transmission_state_type transmission_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NEUTRAL)
  #undef NEUTRAL
#endif
#if defined(_WIN32) && defined(PARK)
  #undef PARK
#endif
#if defined(_WIN32) && defined(FORWARDGEARS)
  #undef FORWARDGEARS
#endif
#if defined(_WIN32) && defined(REVERSEGEARS)
  #undef REVERSEGEARS
#endif
#if defined(_WIN32) && defined(RESERVED1)
  #undef RESERVED1
#endif
#if defined(_WIN32) && defined(RESERVED2)
  #undef RESERVED2
#endif
#if defined(_WIN32) && defined(RESERVED3)
  #undef RESERVED3
#endif
#if defined(_WIN32) && defined(UNAVAILABLE)
  #undef UNAVAILABLE
#endif

  enum {
    NEUTRAL = 0u,
    PARK = 1u,
    FORWARDGEARS = 2u,
    REVERSEGEARS = 3u,
    RESERVED1 = 4u,
    RESERVED2 = 5u,
    RESERVED3 = 6u,
    UNAVAILABLE = 7u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::TransmissionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TransmissionState_<ContainerAllocator> const> ConstPtr;

}; // struct TransmissionState_

typedef ::j2735_msgs::TransmissionState_<std::allocator<void> > TransmissionState;

typedef boost::shared_ptr< ::j2735_msgs::TransmissionState > TransmissionStatePtr;
typedef boost::shared_ptr< ::j2735_msgs::TransmissionState const> TransmissionStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TransmissionState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TransmissionState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TransmissionState_<ContainerAllocator1> & lhs, const ::j2735_msgs::TransmissionState_<ContainerAllocator2> & rhs)
{
  return lhs.transmission_state == rhs.transmission_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TransmissionState_<ContainerAllocator1> & lhs, const ::j2735_msgs::TransmissionState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TransmissionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TransmissionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TransmissionState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TransmissionState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TransmissionState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TransmissionState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TransmissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d6a4d2af8ea1a5841861f3e0592e05f";
  }

  static const char* value(const ::j2735_msgs::TransmissionState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d6a4d2af8ea1a58ULL;
  static const uint64_t static_value2 = 0x41861f3e0592e05fULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TransmissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TransmissionState";
  }

  static const char* value(const ::j2735_msgs::TransmissionState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TransmissionState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TransmissionState.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# Provide the current state of the vehicle transmission.\n"
"\n"
"#TransmissionState ::= ENUMERATED {\n"
"#   neutral      (0), -- Neutral\n"
"#   park         (1), -- Park \n"
"#   forwardGears (2), -- Forward gears\n"
"#   reverseGears (3), -- Reverse gears \n"
"#   reserved1    (4),      \n"
"#   reserved2    (5),      \n"
"#   reserved3    (6),      \n"
"#   unavailable  (7)  -- not-equipped or unavailable value,\n"
"#   -- Any related speed is relative to the vehicle reference frame used\n"
"#   }\n"
"\n"
"uint8  transmission_state\n"
"\n"
"# enumeration values for status:\n"
"uint8 NEUTRAL=0\n"
"uint8 PARK=1\n"
"uint8 FORWARDGEARS=2\n"
"uint8 REVERSEGEARS=3\n"
"uint8 RESERVED1=4\n"
"uint8 RESERVED2=5\n"
"uint8 RESERVED3=6\n"
"uint8 UNAVAILABLE=7\n"
;
  }

  static const char* value(const ::j2735_msgs::TransmissionState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TransmissionState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transmission_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransmissionState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TransmissionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TransmissionState_<ContainerAllocator>& v)
  {
    s << indent << "transmission_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.transmission_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TRANSMISSIONSTATE_H
