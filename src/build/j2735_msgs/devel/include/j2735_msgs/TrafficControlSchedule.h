// Generated by gencpp from file j2735_msgs/TrafficControlSchedule.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TRAFFICCONTROLSCHEDULE_H
#define J2735_MSGS_MESSAGE_TRAFFICCONTROLSCHEDULE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/DayOfWeek.h>
#include <j2735_msgs/DailySchedule.h>
#include <j2735_msgs/RepeatParams.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct TrafficControlSchedule_
{
  typedef TrafficControlSchedule_<ContainerAllocator> Type;

  TrafficControlSchedule_()
    : start(0)
    , end(0)
    , end_exists(false)
    , dow()
    , dow_exists(false)
    , between()
    , between_exists(false)
    , repeat()
    , repeat_exists(false)  {
    }
  TrafficControlSchedule_(const ContainerAllocator& _alloc)
    : start(0)
    , end(0)
    , end_exists(false)
    , dow(_alloc)
    , dow_exists(false)
    , between(_alloc)
    , between_exists(false)
    , repeat(_alloc)
    , repeat_exists(false)  {
  (void)_alloc;
    }



   typedef uint64_t _start_type;
  _start_type start;

   typedef uint64_t _end_type;
  _end_type end;

   typedef uint8_t _end_exists_type;
  _end_exists_type end_exists;

   typedef  ::j2735_msgs::DayOfWeek_<ContainerAllocator>  _dow_type;
  _dow_type dow;

   typedef uint8_t _dow_exists_type;
  _dow_exists_type dow_exists;

   typedef std::vector< ::j2735_msgs::DailySchedule_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::DailySchedule_<ContainerAllocator> >::other >  _between_type;
  _between_type between;

   typedef uint8_t _between_exists_type;
  _between_exists_type between_exists;

   typedef  ::j2735_msgs::RepeatParams_<ContainerAllocator>  _repeat_type;
  _repeat_type repeat;

   typedef uint8_t _repeat_exists_type;
  _repeat_exists_type repeat_exists;





  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficControlSchedule_

typedef ::j2735_msgs::TrafficControlSchedule_<std::allocator<void> > TrafficControlSchedule;

typedef boost::shared_ptr< ::j2735_msgs::TrafficControlSchedule > TrafficControlSchedulePtr;
typedef boost::shared_ptr< ::j2735_msgs::TrafficControlSchedule const> TrafficControlScheduleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.end == rhs.end &&
    lhs.end_exists == rhs.end_exists &&
    lhs.dow == rhs.dow &&
    lhs.dow_exists == rhs.dow_exists &&
    lhs.between == rhs.between &&
    lhs.between_exists == rhs.between_exists &&
    lhs.repeat == rhs.repeat &&
    lhs.repeat_exists == rhs.repeat_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d17eb8005cfede95b7226b8161cb7840";
  }

  static const char* value(const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd17eb8005cfede95ULL;
  static const uint64_t static_value2 = 0xb7226b8161cb7840ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TrafficControlSchedule";
  }

  static const char* value(const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TrafficControlSchedule.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# TrafficControlSchedule ::= SEQUENCE\n"
"# {\n"
"# 	start EpochMins, -- start time required, even if it's the epoch value zero\n"
"# 	end [0] EpochMins OPTIONAL, -- default to max value 153722867280912\n"
"# 	dow [1] DayOfWeek OPTIONAL, \n"
"# 	between [2] SEQUENCE (SIZE(1..63)) OF DailySchedule OPTIONAL, \n"
"# 	repeat [3] RepeatParams OPTIONAL\n"
"# }\n"
"\n"
"# start EpochMins, -- start time required, even if it's the epoch value zero\n"
"uint64 start\n"
"\n"
"# end [0] EpochMins OPTIONAL, -- default to max value 153722867280912\n"
"uint64 end\n"
"bool end_exists\n"
"\n"
"# dow [1] DayOfWeek OPTIONAL, \n"
"j2735_msgs/DayOfWeek dow\n"
"bool dow_exists\n"
"\n"
"# between [2] SEQUENCE (SIZE(1..63)) OF DailySchedule OPTIONAL, \n"
"j2735_msgs/DailySchedule[] between\n"
"bool between_exists\n"
"\n"
"# repeat [3] RepeatParams OPTIONAL\n"
"j2735_msgs/RepeatParams repeat\n"
"bool repeat_exists\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/DayOfWeek\n"
"#\n"
"# DayOfWeek.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# DayOfWeek ::= BIT STRING //only J\n"
"# {\n"
"# 	sun (6), \n"
"# 	mon (5), \n"
"# 	tue (4), \n"
"# 	wed (3), \n"
"# 	thu (2), \n"
"# 	fri (1), \n"
"# 	sat (0)\n"
"# }\n"
"\n"
"uint8[7] dow\n"
"\n"
"# enumeration values for day of week\n"
"uint8 SUN = 6  \n"
"uint8 MON = 5\n"
"uint8 TUE = 4  \n"
"uint8 WED = 3  \n"
"uint8 THU = 2  \n"
"uint8 FRI = 1  \n"
"uint8 SAT = 0\n"
"================================================================================\n"
"MSG: j2735_msgs/DailySchedule\n"
"#\n"
"# DailySchedule.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification for vehicle internal use.\n"
"#\n"
"# @author Misheel Bayartsengel \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# The schedule bounds of a geofence within a specific day of the week\n"
"\n"
"# DailySchedule ::= SEQUENCE\n"
"# {\n"
"# 	begin INTEGER (0..1439), -- minutes relative to midnight local time\n"
"# 	duration INTEGER (0..1439) -- the number of active minutes, up to one day\n"
"# }\n"
"\n"
"# begin INTEGER (0..1439), -- minutes relative to midnight local time\n"
"uint16 begin\n"
"\n"
"# duration INTEGER (0..1439) -- the number of active minutes, up to one day\n"
"uint16 duration\n"
"================================================================================\n"
"MSG: j2735_msgs/RepeatParams\n"
"#\n"
"# RepeatParams.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification for vehicle internal use.\n"
"#\n"
"# @author Misheel Bayartsengel \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# RepeatParams ::= SEQUENCE\n"
"# {\n"
"# 	offset INTEGER (0..1439), -- shift repetition start relative to midnight local time\n"
"# 	period INTEGER (0..1439), -- minutes between successive time spans\n"
"# 	span INTEGER (0..1439) -- number of minutes schedule is active, must be less than the period\n"
"# }\n"
"\n"
"# Offset \n"
"# shift repetition start relative to midnight local time\n"
"uint16 offset\n"
"\n"
"# Period\n"
"# minutes between successive time spans\n"
"uint16 period\n"
"\n"
"# Span\n"
"# number of minutes schedule is active, must be less than the period\n"
"uint16 span\n"
;
  }

  static const char* value(const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.end);
      stream.next(m.end_exists);
      stream.next(m.dow);
      stream.next(m.dow_exists);
      stream.next(m.between);
      stream.next(m.between_exists);
      stream.next(m.repeat);
      stream.next(m.repeat_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficControlSchedule_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TrafficControlSchedule_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.end);
    s << indent << "end_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.end_exists);
    s << indent << "dow: ";
    s << std::endl;
    Printer< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >::stream(s, indent + "  ", v.dow);
    s << indent << "dow_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dow_exists);
    s << indent << "between[]" << std::endl;
    for (size_t i = 0; i < v.between.size(); ++i)
    {
      s << indent << "  between[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::DailySchedule_<ContainerAllocator> >::stream(s, indent + "    ", v.between[i]);
    }
    s << indent << "between_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.between_exists);
    s << indent << "repeat: ";
    s << std::endl;
    Printer< ::j2735_msgs::RepeatParams_<ContainerAllocator> >::stream(s, indent + "  ", v.repeat);
    s << indent << "repeat_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.repeat_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TRAFFICCONTROLSCHEDULE_H
