// Generated by gencpp from file j2735_msgs/RoadSegmentReferenceID.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_ROADSEGMENTREFERENCEID_H
#define J2735_MSGS_MESSAGE_ROADSEGMENTREFERENCEID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct RoadSegmentReferenceID_
{
  typedef RoadSegmentReferenceID_<ContainerAllocator> Type;

  RoadSegmentReferenceID_()
    : region(0)
    , region_exists(false)
    , id(0)
    , id_exists(false)  {
    }
  RoadSegmentReferenceID_(const ContainerAllocator& _alloc)
    : region(0)
    , region_exists(false)
    , id(0)
    , id_exists(false)  {
  (void)_alloc;
    }



   typedef uint16_t _region_type;
  _region_type region;

   typedef uint8_t _region_exists_type;
  _region_exists_type region_exists;

   typedef uint16_t _id_type;
  _id_type id;

   typedef uint8_t _id_exists_type;
  _id_exists_type id_exists;





  typedef boost::shared_ptr< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> const> ConstPtr;

}; // struct RoadSegmentReferenceID_

typedef ::j2735_msgs::RoadSegmentReferenceID_<std::allocator<void> > RoadSegmentReferenceID;

typedef boost::shared_ptr< ::j2735_msgs::RoadSegmentReferenceID > RoadSegmentReferenceIDPtr;
typedef boost::shared_ptr< ::j2735_msgs::RoadSegmentReferenceID const> RoadSegmentReferenceIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator1> & lhs, const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator2> & rhs)
{
  return lhs.region == rhs.region &&
    lhs.region_exists == rhs.region_exists &&
    lhs.id == rhs.id &&
    lhs.id_exists == rhs.id_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator1> & lhs, const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4bf4691f490fdc19634fca26ef0c582f";
  }

  static const char* value(const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4bf4691f490fdc19ULL;
  static const uint64_t static_value2 = 0x634fca26ef0c582fULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/RoadSegmentReferenceID";
  }

  static const char* value(const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# RoadSegmentReferenceID.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_RoadSegmentReferenceID data frame is used to convey theRoadSegmentID which is unique to a given\n"
"# road segment of interest, and also the RoadRegulatorID assigned to the region in which it is operating (when required).\n"
"\n"
"# RoadSegmentReferenceID ::= SEQUENCE {\n"
"# region RoadRegulatorID OPTIONAL,\n"
"# -- a globally unique regional assignment value\n"
"# -- typically assigned to a regional DOT authority\n"
"# -- the value zero shall be used for testing needs\n"
"# id RoadSegmentID\n"
"# -- a unique mapping to the road segment\n"
"# -- in question within the above region of use\n"
"# -- during its period of assignment and use\n"
"# -- note that unlike intersectionID values,\n"
"# -- this value can be reused by the region\n"
"# }\n"
"\n"
"# RoadRegulatorID ::= INTEGER (0..65535)\n"
"uint16 region\n"
"bool region_exists\n"
"\n"
"# RoadSegmentID ::= INTEGER (0..65535)\n"
"# -- The values zero to 255 shall be used for testing only\n"
"# -- Note that the value assigned to an RoadSegment will be\n"
"# -- unique within a given regional ID only during its use\n"
"uint16 id\n"
"bool id_exists\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.region);
      stream.next(m.region_exists);
      stream.next(m.id);
      stream.next(m.id_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadSegmentReferenceID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::RoadSegmentReferenceID_<ContainerAllocator>& v)
  {
    s << indent << "region: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.region);
    s << indent << "region_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.region_exists);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "id_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_ROADSEGMENTREFERENCEID_H
