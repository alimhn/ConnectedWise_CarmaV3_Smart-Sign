// Generated by gencpp from file j2735_msgs/IntersectionReferenceID.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_INTERSECTIONREFERENCEID_H
#define J2735_MSGS_MESSAGE_INTERSECTIONREFERENCEID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct IntersectionReferenceID_
{
  typedef IntersectionReferenceID_<ContainerAllocator> Type;

  IntersectionReferenceID_()
    : region(0)
    , region_exists(false)
    , id(0)  {
    }
  IntersectionReferenceID_(const ContainerAllocator& _alloc)
    : region(0)
    , region_exists(false)
    , id(0)  {
  (void)_alloc;
    }



   typedef uint16_t _region_type;
  _region_type region;

   typedef uint8_t _region_exists_type;
  _region_exists_type region_exists;

   typedef uint16_t _id_type;
  _id_type id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(REGION_UNAVAILABLE)
  #undef REGION_UNAVAILABLE
#endif

  enum {
    REGION_UNAVAILABLE = 0u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> const> ConstPtr;

}; // struct IntersectionReferenceID_

typedef ::j2735_msgs::IntersectionReferenceID_<std::allocator<void> > IntersectionReferenceID;

typedef boost::shared_ptr< ::j2735_msgs::IntersectionReferenceID > IntersectionReferenceIDPtr;
typedef boost::shared_ptr< ::j2735_msgs::IntersectionReferenceID const> IntersectionReferenceIDConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator1> & lhs, const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator2> & rhs)
{
  return lhs.region == rhs.region &&
    lhs.region_exists == rhs.region_exists &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator1> & lhs, const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab9a4df76e7acc4e7573572145314417";
  }

  static const char* value(const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab9a4df76e7acc4eULL;
  static const uint64_t static_value2 = 0x7573572145314417ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/IntersectionReferenceID";
  }

  static const char* value(const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# IntersectionReferenceID.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The IntersectionReferenceID data frame conveys the combination of an optional RoadRegulatorID and of an\n"
"# IntersectionID that is unique within that region. When the RoadRegulatorID is present the IntersectionReferenceID is\n"
"# guaranteed to be globally unique.\n"
"\n"
"# region RoadRegulatorID OPTIONAL ::= INTEGER (0..65535)\n"
"# -- a globally unique regional assignment value\n"
"# -- typical assigned to a regional DOT authority\n"
"# -- the value zero shall be used for testing needs\n"
"# 0 is a J2735 value for testing needs, and carma can use it to indicate optional field was not set or unavailable.\n"
"uint16 region\n"
"uint16 REGION_UNAVAILABLE=0\n"
"bool region_exists\n"
"\n"
"# id IntersectionID ::= INTEGER (0..65535)\n"
"# -- a unique mapping to the intersection\n"
"# -- in question within the above region of use\n"
"uint16 id\n"
;
  }

  static const char* value(const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.region);
      stream.next(m.region_exists);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntersectionReferenceID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::IntersectionReferenceID_<ContainerAllocator>& v)
  {
    s << indent << "region: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.region);
    s << indent << "region_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.region_exists);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_INTERSECTIONREFERENCEID_H
