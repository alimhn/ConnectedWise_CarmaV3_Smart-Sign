// Generated by gencpp from file j2735_msgs/TrafficControlRequestV01.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TRAFFICCONTROLREQUESTV01_H
#define J2735_MSGS_MESSAGE_TRAFFICCONTROLREQUESTV01_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/Id64b.h>
#include <j2735_msgs/TrafficControlBounds.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct TrafficControlRequestV01_
{
  typedef TrafficControlRequestV01_<ContainerAllocator> Type;

  TrafficControlRequestV01_()
    : reqid()
    , reqseq(0)
    , scale(0)
    , bounds()  {
    }
  TrafficControlRequestV01_(const ContainerAllocator& _alloc)
    : reqid(_alloc)
    , reqseq(0)
    , scale(0)
    , bounds(_alloc)  {
  (void)_alloc;
    }



   typedef  ::j2735_msgs::Id64b_<ContainerAllocator>  _reqid_type;
  _reqid_type reqid;

   typedef uint8_t _reqseq_type;
  _reqseq_type reqseq;

   typedef int8_t _scale_type;
  _scale_type scale;

   typedef std::vector< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >::other >  _bounds_type;
  _bounds_type bounds;





  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficControlRequestV01_

typedef ::j2735_msgs::TrafficControlRequestV01_<std::allocator<void> > TrafficControlRequestV01;

typedef boost::shared_ptr< ::j2735_msgs::TrafficControlRequestV01 > TrafficControlRequestV01Ptr;
typedef boost::shared_ptr< ::j2735_msgs::TrafficControlRequestV01 const> TrafficControlRequestV01ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator2> & rhs)
{
  return lhs.reqid == rhs.reqid &&
    lhs.reqseq == rhs.reqseq &&
    lhs.scale == rhs.scale &&
    lhs.bounds == rhs.bounds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c9add83cd83b8c7ef3a3df866b7f621";
  }

  static const char* value(const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c9add83cd83b8c7ULL;
  static const uint64_t static_value2 = 0xef3a3df866b7f621ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TrafficControlRequestV01";
  }

  static const char* value(const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TrafficControlRequestV01.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"#TrafficControlRequestV01 ::= SEQUENCE\n"
"#{\n"
"#	reqid Id64b, -- randomly generated ephemeral request identifier\n"
"#	reqseq INTEGER (0..255), -- sequential counter used to differentiate traffic control requests\n"
"#	scale INTEGER (-3..3), -- vertex offset units 10^n meters\n"
"#	bounds SEQUENCE (SIZE(1..63)) OF TrafficControlBounds\n"
"#}\n"
"\n"
"\n"
"# reqid ::= Id64b\n"
"j2735_msgs/Id64b reqid\n"
"\n"
"# reqseq ::= INTEGER (0..255)\n"
"uint8 reqseq\n"
"\n"
"# Scale ::= INTEGER (-3..3)  \n"
"int8 scale\n"
"\n"
"# Bounds SEQUENCE (SIZE(1..63)) OF TrafficControlBounds\n"
"j2735_msgs/TrafficControlBounds[] bounds\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/Id64b\n"
"#\n"
"# Id64b.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# Id64b ::= OCTET STRING (SIZE(8)) -- 8-byte binary value that can be used for shorter unique ids\n"
"\n"
"uint8[8] id\n"
"================================================================================\n"
"MSG: j2735_msgs/TrafficControlBounds\n"
"#\n"
"# TrafficControlBounds.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"\n"
"#TrafficControlBounds ::= SEQUENCE\n"
"#{\n"
"#	oldest EpochMins, -- timestamp of oldest traffic control message within bounds\n"
"#	reflon Longitude, -- initial vertex reference longitude\n"
"#	reflat Latitude, -- initial vertex reference latitude\n"
"#	offsets SEQUENCE (SIZE(3)) OF OffsetPoint -- relative vertex positions in scaled meters\n"
"#}\n"
"\n"
"#oldest ::= EpochMins\n"
"uint64 oldest\n"
"\n"
"# reflon ::= INTEGER (-1799999999..1800000000)\n"
"#  -- initial vertex reference longitude\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 180 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"int32 reflon\n"
"\n"
"int32 REFLON_MAX = 1800000000\n"
"int32 REFLON_MIN = -1799999999\n"
"int32 REFLON_UNAVAILABLE = 1800000001\n"
"\n"
"\n"
"# reflat ::= INTEGER (-900000000..900000000)\n"
"#  -- initial vertex reference latitude\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 90 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"int32 reflat\n"
"\n"
"int32 REFLAT_MAX = 900000000\n"
"int32 REFLAT_MIN = -900000000\n"
"int32 REFLAT_UNAVAILABLE = 900000001\n"
"\n"
"#offsets ::= SEQUENCE (SIZE(3)) OF OffsetPoint \n"
"j2735_msgs/OffsetPoint[3] offsets\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/OffsetPoint\n"
"#\n"
"# OffsetPoint.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"#OffsetPoint ::= SEQUENCE\n"
"#{\n"
"#	deltax INTEGER (-32768..32767), -- relative horizontal vertex position in scaled meters\n"
"#	deltay INTEGER (-32768..32767) -- relative vertical vertex position in scaled meters\n"
"#}\n"
"\n"
"#deltax ::= INTEGER (-32768..32767)\n"
"int16 deltax\n"
"\n"
"#deltay ::= INTEGER (-32768..32767)\n"
"int16 deltay\n"
"\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reqid);
      stream.next(m.reqseq);
      stream.next(m.scale);
      stream.next(m.bounds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficControlRequestV01_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator>& v)
  {
    s << indent << "reqid: ";
    s << std::endl;
    Printer< ::j2735_msgs::Id64b_<ContainerAllocator> >::stream(s, indent + "  ", v.reqid);
    s << indent << "reqseq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reqseq);
    s << indent << "scale: ";
    Printer<int8_t>::stream(s, indent + "  ", v.scale);
    s << indent << "bounds[]" << std::endl;
    for (size_t i = 0; i < v.bounds.size(); ++i)
    {
      s << indent << "  bounds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >::stream(s, indent + "    ", v.bounds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TRAFFICCONTROLREQUESTV01_H
