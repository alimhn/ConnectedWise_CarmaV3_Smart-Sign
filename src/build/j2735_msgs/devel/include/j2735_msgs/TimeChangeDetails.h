// Generated by gencpp from file j2735_msgs/TimeChangeDetails.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TIMECHANGEDETAILS_H
#define J2735_MSGS_MESSAGE_TIMECHANGEDETAILS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct TimeChangeDetails_
{
  typedef TimeChangeDetails_<ContainerAllocator> Type;

  TimeChangeDetails_()
    : start_time(0)
    , start_time_exists(false)
    , min_end_time(0)
    , max_end_time(0)
    , max_end_time_exists(false)
    , likely_time(0)
    , likely_time_exists(false)
    , confidence(0)
    , confidence_exists(false)
    , next_time(0)
    , next_time_exists(false)  {
    }
  TimeChangeDetails_(const ContainerAllocator& _alloc)
    : start_time(0)
    , start_time_exists(false)
    , min_end_time(0)
    , max_end_time(0)
    , max_end_time_exists(false)
    , likely_time(0)
    , likely_time_exists(false)
    , confidence(0)
    , confidence_exists(false)
    , next_time(0)
    , next_time_exists(false)  {
  (void)_alloc;
    }



   typedef uint16_t _start_time_type;
  _start_time_type start_time;

   typedef uint8_t _start_time_exists_type;
  _start_time_exists_type start_time_exists;

   typedef uint16_t _min_end_time_type;
  _min_end_time_type min_end_time;

   typedef uint16_t _max_end_time_type;
  _max_end_time_type max_end_time;

   typedef uint8_t _max_end_time_exists_type;
  _max_end_time_exists_type max_end_time_exists;

   typedef uint16_t _likely_time_type;
  _likely_time_type likely_time;

   typedef uint8_t _likely_time_exists_type;
  _likely_time_exists_type likely_time_exists;

   typedef uint8_t _confidence_type;
  _confidence_type confidence;

   typedef uint8_t _confidence_exists_type;
  _confidence_exists_type confidence_exists;

   typedef uint16_t _next_time_type;
  _next_time_type next_time;

   typedef uint8_t _next_time_exists_type;
  _next_time_exists_type next_time_exists;





  typedef boost::shared_ptr< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> const> ConstPtr;

}; // struct TimeChangeDetails_

typedef ::j2735_msgs::TimeChangeDetails_<std::allocator<void> > TimeChangeDetails;

typedef boost::shared_ptr< ::j2735_msgs::TimeChangeDetails > TimeChangeDetailsPtr;
typedef boost::shared_ptr< ::j2735_msgs::TimeChangeDetails const> TimeChangeDetailsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator1> & lhs, const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator2> & rhs)
{
  return lhs.start_time == rhs.start_time &&
    lhs.start_time_exists == rhs.start_time_exists &&
    lhs.min_end_time == rhs.min_end_time &&
    lhs.max_end_time == rhs.max_end_time &&
    lhs.max_end_time_exists == rhs.max_end_time_exists &&
    lhs.likely_time == rhs.likely_time &&
    lhs.likely_time_exists == rhs.likely_time_exists &&
    lhs.confidence == rhs.confidence &&
    lhs.confidence_exists == rhs.confidence_exists &&
    lhs.next_time == rhs.next_time &&
    lhs.next_time_exists == rhs.next_time_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator1> & lhs, const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48110a8000070c77171eb1bdfafa99fe";
  }

  static const char* value(const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48110a8000070c77ULL;
  static const uint64_t static_value2 = 0x171eb1bdfafa99feULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TimeChangeDetails";
  }

  static const char* value(const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TimeChangeDetails.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_TimeChangeDetails data frame conveys details about the timing of a phase within a movement. The core\n"
"# data concept expressed is the time stamp (time mark) at which the related phase will change to the next state. This is\n"
"# often found in the MinEndTime element, but the other elements may be needed to convey the full concept when adaptive\n"
"# timing is employed.\n"
"#\n"
"#\n"
"# TimeChangeDetails ::= SEQUENCE {\n"
"# startTime TimeMark OPTIONAL,\n"
"# -- When this phase 1st started\n"
"# minEndTime TimeMark,\n"
"# -- Expected shortest end time\n"
"# maxEndTime TimeMark OPTIONAL,\n"
"# -- Expected longest end time\n"
"# likelyTime TimeMark OPTIONAL,\n"
"# -- Best predicted value based on other data\n"
"# confidence TimeIntervalConfidence OPTIONAL,\n"
"# -- Applies to above time element only\n"
"# nextTime TimeMark OPTIONAL\n"
"# -- A rough estimate of time when\n"
"# -- this phase may next occur again\n"
"# -- used to support various ECO driving power\n"
"# -- management needs.\n"
"# }\n"
"\n"
"# TimeMark ::= INTEGER (0..36001)\n"
"# -- Tenths of a second in the current or next hour\n"
"# -- In units of 1/10th second from UTC time\n"
"# -- A range of 0~36000 covers one hour\n"
"# -- The values 35991..35999 are used when a leap second occurs\n"
"# -- The value 36000 is used to indicate time >3600 seconds\n"
"# -- 36001 is to be used when value undefined or unknown\n"
"# -- Note that this is NOT expressed in GPS time\n"
"# -- or in local time\n"
"uint16 start_time\n"
"bool start_time_exists\n"
"\n"
"uint16 min_end_time\n"
"\n"
"uint16 max_end_time\n"
"bool max_end_time_exists\n"
"\n"
"uint16 likely_time\n"
"bool likely_time_exists\n"
"\n"
"#TimeIntervalConfidence ::= INTEGER (0..15)\n"
"uint8 confidence\n"
"bool confidence_exists\n"
"\n"
"# TimeMark ::= INTEGER (0..36001)\n"
"uint16 next_time\n"
"bool next_time_exists\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_time);
      stream.next(m.start_time_exists);
      stream.next(m.min_end_time);
      stream.next(m.max_end_time);
      stream.next(m.max_end_time_exists);
      stream.next(m.likely_time);
      stream.next(m.likely_time_exists);
      stream.next(m.confidence);
      stream.next(m.confidence_exists);
      stream.next(m.next_time);
      stream.next(m.next_time_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeChangeDetails_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TimeChangeDetails_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TimeChangeDetails_<ContainerAllocator>& v)
  {
    s << indent << "start_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.start_time);
    s << indent << "start_time_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_time_exists);
    s << indent << "min_end_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.min_end_time);
    s << indent << "max_end_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.max_end_time);
    s << indent << "max_end_time_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.max_end_time_exists);
    s << indent << "likely_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.likely_time);
    s << indent << "likely_time_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.likely_time_exists);
    s << indent << "confidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confidence);
    s << indent << "confidence_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confidence_exists);
    s << indent << "next_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.next_time);
    s << indent << "next_time_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.next_time_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TIMECHANGEDETAILS_H
