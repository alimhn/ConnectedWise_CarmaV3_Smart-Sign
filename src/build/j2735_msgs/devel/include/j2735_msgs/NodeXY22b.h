// Generated by gencpp from file j2735_msgs/NodeXY22b.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_NODEXY22B_H
#define J2735_MSGS_MESSAGE_NODEXY22B_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct NodeXY22b_
{
  typedef NodeXY22b_<ContainerAllocator> Type;

  NodeXY22b_()
    : x(0.0)
    , y(0.0)  {
    }
  NodeXY22b_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::j2735_msgs::NodeXY22b_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::NodeXY22b_<ContainerAllocator> const> ConstPtr;

}; // struct NodeXY22b_

typedef ::j2735_msgs::NodeXY22b_<std::allocator<void> > NodeXY22b;

typedef boost::shared_ptr< ::j2735_msgs::NodeXY22b > NodeXY22bPtr;
typedef boost::shared_ptr< ::j2735_msgs::NodeXY22b const> NodeXY22bConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::NodeXY22b_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::NodeXY22b_<ContainerAllocator1> & lhs, const ::j2735_msgs::NodeXY22b_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::NodeXY22b_<ContainerAllocator1> & lhs, const ::j2735_msgs::NodeXY22b_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::NodeXY22b_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::NodeXY22b_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::NodeXY22b_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff8d7d66dd3e4b731ef14a45d38888b6";
  }

  static const char* value(const ::j2735_msgs::NodeXY22b_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff8d7d66dd3e4b73ULL;
  static const uint64_t static_value2 = 0x1ef14a45d38888b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/NodeXY22b";
  }

  static const char* value(const ::j2735_msgs::NodeXY22b_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# NodeXY22b.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# A 22-bit node type with offset values from the last point in X and Y.\n"
"\n"
"# Node-XY-22b ::= SEQUENCE {\n"
"# x Offset-B11,\n"
"# y Offset-B11\n"
"# }\n"
"\n"
"# Offset-B11 ::= INTEGER (-1024..1023)\n"
"# -- a range of +- 10.23 meters\n"
"# An 11-bit delta offset in X or Y direction from some known point. For non-vehicle centric coordinate frames of\n"
"# reference, offset is positive to the East (X) and to the North (Y) directions. The most negative value shall be used to\n"
"# indicate an unknown value.\n"
"\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::j2735_msgs::NodeXY22b_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeXY22b_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::NodeXY22b_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::NodeXY22b_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_NODEXY22B_H
