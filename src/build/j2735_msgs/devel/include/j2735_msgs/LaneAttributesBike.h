// Generated by gencpp from file j2735_msgs/LaneAttributesBike.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_LANEATTRIBUTESBIKE_H
#define J2735_MSGS_MESSAGE_LANEATTRIBUTESBIKE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct LaneAttributesBike_
{
  typedef LaneAttributesBike_<ContainerAllocator> Type;

  LaneAttributesBike_()
    : lane_attributes_bike(0)  {
    }
  LaneAttributesBike_(const ContainerAllocator& _alloc)
    : lane_attributes_bike(0)  {
  (void)_alloc;
    }



   typedef uint16_t _lane_attributes_bike_type;
  _lane_attributes_bike_type lane_attributes_bike;





  typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> const> ConstPtr;

}; // struct LaneAttributesBike_

typedef ::j2735_msgs::LaneAttributesBike_<std::allocator<void> > LaneAttributesBike;

typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesBike > LaneAttributesBikePtr;
typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesBike const> LaneAttributesBikeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator2> & rhs)
{
  return lhs.lane_attributes_bike == rhs.lane_attributes_bike;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d97edc5cc6e1a0f94524b84eca2f039f";
  }

  static const char* value(const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd97edc5cc6e1a0f9ULL;
  static const uint64_t static_value2 = 0x4524b84eca2f039fULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/LaneAttributesBike";
  }

  static const char* value(const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# LaneAttributesBike.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneAttributes-Bike data element relates specific properties found in a bicycle lane type.\n"
"#\n"
"# LaneAttributes-Bike ::= BIT STRING {\n"
"#	-- With bits as defined:\n"
"#	bikeRevocableLane (0),\n"
"#		-- this lane may be activated or not based\n"
"#		-- on the current SPAT message contents\n"
"#		-- if not asserted, the lane is ALWAYS present\n"
"#	pedestrianUseAllowed (1),\n"
"#		-- The path allows pedestrian traffic,\n"
"#		-- if not set, this mode is prohibited\n"
"#	isBikeFlyOverLane (2),\n"
"#		-- path of lane is not at grade\n"
"#	fixedCycleTime (3),\n"
"#		-- the phases use preset times\n"
"#		-- Bits 7~15 reserved and set to zero\n"
"#	} (SIZE (16))\n"
"\n"
"uint16 lane_attributes_bike\n"
;
  }

  static const char* value(const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_attributes_bike);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneAttributesBike_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::LaneAttributesBike_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::LaneAttributesBike_<ContainerAllocator>& v)
  {
    s << indent << "lane_attributes_bike: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lane_attributes_bike);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_LANEATTRIBUTESBIKE_H
