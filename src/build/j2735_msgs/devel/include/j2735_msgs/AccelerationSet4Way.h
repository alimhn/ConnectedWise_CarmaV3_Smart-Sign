// Generated by gencpp from file j2735_msgs/AccelerationSet4Way.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_ACCELERATIONSET4WAY_H
#define J2735_MSGS_MESSAGE_ACCELERATIONSET4WAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct AccelerationSet4Way_
{
  typedef AccelerationSet4Way_<ContainerAllocator> Type;

  AccelerationSet4Way_()
    : longitudinal(0)
    , lateral(0)
    , vert(0)
    , yaw_rate(0)  {
    }
  AccelerationSet4Way_(const ContainerAllocator& _alloc)
    : longitudinal(0)
    , lateral(0)
    , vert(0)
    , yaw_rate(0)  {
  (void)_alloc;
    }



   typedef int16_t _longitudinal_type;
  _longitudinal_type longitudinal;

   typedef int16_t _lateral_type;
  _lateral_type lateral;

   typedef int8_t _vert_type;
  _vert_type vert;

   typedef int16_t _yaw_rate_type;
  _yaw_rate_type yaw_rate;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACCELERATION_UNAVAILABLE)
  #undef ACCELERATION_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(ACCELERATION_MAX)
  #undef ACCELERATION_MAX
#endif
#if defined(_WIN32) && defined(ACCELERATION_MIN)
  #undef ACCELERATION_MIN
#endif
#if defined(_WIN32) && defined(ACCELERATION_VERTICAL_UNAVAILABLE)
  #undef ACCELERATION_VERTICAL_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(ACCELERATION_VERTICAL_MAX)
  #undef ACCELERATION_VERTICAL_MAX
#endif
#if defined(_WIN32) && defined(ACCELERATION_VERTICAL_MIN)
  #undef ACCELERATION_VERTICAL_MIN
#endif
#if defined(_WIN32) && defined(YAWRATE_UNAVAILABLE)
  #undef YAWRATE_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(YAWRATE_MAX)
  #undef YAWRATE_MAX
#endif
#if defined(_WIN32) && defined(YAWRATE_MIN)
  #undef YAWRATE_MIN
#endif

  enum {
    ACCELERATION_UNAVAILABLE = 2001,
    ACCELERATION_MAX = 2000,
    ACCELERATION_MIN = -2000,
    ACCELERATION_VERTICAL_UNAVAILABLE = -127,
    ACCELERATION_VERTICAL_MAX = 127,
    ACCELERATION_VERTICAL_MIN = -126,
    YAWRATE_UNAVAILABLE = 0,
    YAWRATE_MAX = 32767,
    YAWRATE_MIN = -32767,
  };


  typedef boost::shared_ptr< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> const> ConstPtr;

}; // struct AccelerationSet4Way_

typedef ::j2735_msgs::AccelerationSet4Way_<std::allocator<void> > AccelerationSet4Way;

typedef boost::shared_ptr< ::j2735_msgs::AccelerationSet4Way > AccelerationSet4WayPtr;
typedef boost::shared_ptr< ::j2735_msgs::AccelerationSet4Way const> AccelerationSet4WayConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator1> & lhs, const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator2> & rhs)
{
  return lhs.longitudinal == rhs.longitudinal &&
    lhs.lateral == rhs.lateral &&
    lhs.vert == rhs.vert &&
    lhs.yaw_rate == rhs.yaw_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator1> & lhs, const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a04db6910213061e094b67068abaf00f";
  }

  static const char* value(const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa04db6910213061eULL;
  static const uint64_t static_value2 = 0x094b67068abaf00fULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/AccelerationSet4Way";
  }

  static const char* value(const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# AccelerationSet4Way.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# Set of acceleration values in 3 orthogonal directions of the vehicle and with yaw rotation rates expressed as a structure. \n"
"# The positive longitudinal axis is to the front of the vehicle. \n"
"# The positive lateral axis is to the right side of the vehicle (facing forward)\n"
"# Positive yaw is to the right (clockwise)\n"
"# The positive vertical \"z\" axis is downward with the zero point at the bottom of the vehicle's tires. \n"
"\n"
"#AccelerationSet4Way ::= SEQUENCE {\n"
"#   long Acceleration,          -- Along the Vehicle Longitudinal axis\n"
"#   lat  Acceleration,          -- Along the Vehicle Lateral axis\n"
"#   vert VerticalAcceleration,  -- Along the Vehicle Vertical axis\n"
"#   yaw  YawRate\n"
"#}\n"
"\n"
"#Acceleration ::= INTEGER (-2000..2001) \n"
"#   -- LSB units are 0.01 m/s^2\n"
"#   -- the value 2000 shall be used for values greater than 2000     \n"
"#   -- the value -2000 shall be used for values less than -2000  \n"
"#   -- a value of 2001 shall be used for Unavailable\n"
"#   -- Convert to m/s^2 with factor 0.01 when this field is used\n"
"int16 longitudinal\n"
"int16 lateral\n"
"\n"
"int16 ACCELERATION_UNAVAILABLE = 2001\n"
"int16 ACCELERATION_MAX = 2000\n"
"int16 ACCELERATION_MIN = -2000\n"
"\n"
"#VerticalAcceleration ::= INTEGER (-127..127) \n"
"#   -- LSB units of 0.02 G steps over -2.52 to +2.54 G\n"
"#   -- The value +127 shall be used for ranges >= 2.54 G\n"
"#   -- The value -126 shall be used for ranges <= 2.52 G\n"
"#   -- The value -127 shall be used for unavailable\n"
"#   -- Convert to m/s^2 with factor 0.196 when this field is used\n"
"int8 vert\n"
"\n"
"int8 ACCELERATION_VERTICAL_UNAVAILABLE = -127\n"
"int8 ACCELERATION_VERTICAL_MAX = 127\n"
"int8 ACCELERATION_VERTICAL_MIN = -126\n"
"\n"
"#YawRate ::= INTEGER (-32767..32767)\n"
"#   -- LSB units of 0.01 degrees per second (signed)\n"
"#   -- Convert to degree with factor 0.01 when this field is used\n"
"int16 yaw_rate\n"
"\n"
"int16 YAWRATE_UNAVAILABLE = 0\n"
"int16 YAWRATE_MAX = 32767\n"
"int16 YAWRATE_MIN = -32767\n"
;
  }

  static const char* value(const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.longitudinal);
      stream.next(m.lateral);
      stream.next(m.vert);
      stream.next(m.yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelerationSet4Way_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::AccelerationSet4Way_<ContainerAllocator>& v)
  {
    s << indent << "longitudinal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.longitudinal);
    s << indent << "lateral: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lateral);
    s << indent << "vert: ";
    Printer<int8_t>::stream(s, indent + "  ", v.vert);
    s << indent << "yaw_rate: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_ACCELERATIONSET4WAY_H
