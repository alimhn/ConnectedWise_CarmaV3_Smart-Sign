// Generated by gencpp from file j2735_msgs/LaneAttributesStriping.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_LANEATTRIBUTESSTRIPING_H
#define J2735_MSGS_MESSAGE_LANEATTRIBUTESSTRIPING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct LaneAttributesStriping_
{
  typedef LaneAttributesStriping_<ContainerAllocator> Type;

  LaneAttributesStriping_()
    : lane_attributes_striping(0)  {
    }
  LaneAttributesStriping_(const ContainerAllocator& _alloc)
    : lane_attributes_striping(0)  {
  (void)_alloc;
    }



   typedef uint16_t _lane_attributes_striping_type;
  _lane_attributes_striping_type lane_attributes_striping;





  typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> const> ConstPtr;

}; // struct LaneAttributesStriping_

typedef ::j2735_msgs::LaneAttributesStriping_<std::allocator<void> > LaneAttributesStriping;

typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesStriping > LaneAttributesStripingPtr;
typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesStriping const> LaneAttributesStripingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator2> & rhs)
{
  return lhs.lane_attributes_striping == rhs.lane_attributes_striping;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2426985d7e69b33e60c48db181bef6d2";
  }

  static const char* value(const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2426985d7e69b33eULL;
  static const uint64_t static_value2 = 0x60c48db181bef6d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/LaneAttributesStriping";
  }

  static const char* value(const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# LaneAttributesBarrier.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneAttributes-Striping data element relates specific properties found\n"
"# in various types of ground striping lane types.\n"
"#\n"
"# LaneAttributes-Striping ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# stripeToConnectingLanesRevocableLane(0),\n"
"# -- this lane may be activated or not activated based\n"
"# -- on the current SPAT message contents\n"
"# -- if not asserted, the lane is ALWAYS present\n"
"# stripeDrawOnLeft(1),\n"
"# stripeDrawOnRight(2),\n"
"# -- which side of lane to mark\n"
"# stripeToConnectingLanesLeft(3),\n"
"# stripeToConnectingLanesRight(4),\n"
"# stripeToConnectingLanesAhead(5)\n"
"# -- the stripe type should be\n"
"# -- presented to the user visually\n"
"# -- to reflect stripes in the\n"
"# -- intersection for the type of\n"
"# -- movement indicated\n"
"# -- Bits 6~15 reserved and set to zero\n"
"# } (SIZE (16))\n"
"\n"
"uint16 lane_attributes_striping\n"
;
  }

  static const char* value(const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_attributes_striping);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneAttributesStriping_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::LaneAttributesStriping_<ContainerAllocator>& v)
  {
    s << indent << "lane_attributes_striping: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lane_attributes_striping);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_LANEATTRIBUTESSTRIPING_H
