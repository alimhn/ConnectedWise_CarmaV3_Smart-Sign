// Generated by gencpp from file j2735_msgs/SegmentAttributeXYList.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_SEGMENTATTRIBUTEXYLIST_H
#define J2735_MSGS_MESSAGE_SEGMENTATTRIBUTEXYLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/SegmentAttributeXY.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct SegmentAttributeXYList_
{
  typedef SegmentAttributeXYList_<ContainerAllocator> Type;

  SegmentAttributeXYList_()
    : segment_attribute_xy()  {
    }
  SegmentAttributeXYList_(const ContainerAllocator& _alloc)
    : segment_attribute_xy(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::j2735_msgs::SegmentAttributeXY_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::SegmentAttributeXY_<ContainerAllocator> >::other >  _segment_attribute_xy_type;
  _segment_attribute_xy_type segment_attribute_xy;





  typedef boost::shared_ptr< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> const> ConstPtr;

}; // struct SegmentAttributeXYList_

typedef ::j2735_msgs::SegmentAttributeXYList_<std::allocator<void> > SegmentAttributeXYList;

typedef boost::shared_ptr< ::j2735_msgs::SegmentAttributeXYList > SegmentAttributeXYListPtr;
typedef boost::shared_ptr< ::j2735_msgs::SegmentAttributeXYList const> SegmentAttributeXYListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator1> & lhs, const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator2> & rhs)
{
  return lhs.segment_attribute_xy == rhs.segment_attribute_xy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator1> & lhs, const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c89c8ea8487e4681667c586a26613e54";
  }

  static const char* value(const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc89c8ea8487e4681ULL;
  static const uint64_t static_value2 = 0x667c586a26613e54ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/SegmentAttributeXYList";
  }

  static const char* value(const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# NodeAttributeXYList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"#The DF_SegmentAttributeXYList data frame consists of a list of SegmentAttributeXY entries.\n"
"\n"
"#SegmentAttributeXYList ::= SEQUENCE (SIZE(1..8)) OF SegmentAttributeXY\n"
"\n"
"j2735_msgs/SegmentAttributeXY[] segment_attribute_xy\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/SegmentAttributeXY\n"
"#\n"
"# SegmentAttributeXY.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_SegmentAttributeXY data element is an enumerated list of attributes about the current lane segment which\n"
"# may be enabled or disabled to indicate the presence or absence of the selected attribute on the segment.\n"
"#\n"
"# SegmentAttributeXY ::= ENUMERATED {\n"
"# -- Various values which can be Enabled and Disabled for a lane segment\n"
"#\n"
"# -- General Items\n"
"# reserved	,\n"
"# doNotBlock	, 	-- segment where a vehicle\n"
"# 		  	-- may not come to a stop\n"
"# whiteLine	, 	-- segment where lane crossing not allowed\n"
"# 		  	-- such as the final few meters of a lane\n"
"#\n"
"# -- Porous Lane states, merging, turn outs, parking etc.\n"
"# mergingLaneLeft,  	-- indicates porous lanes\n"
"# mergingLaneRight,\n"
"# curbOnLeft,	  	-- indicates presence of curbs\n"
"# curbOnRight,\n"
"# loadingzoneOnLeft,	-- loading or drop off zones\n"
"# loadingzoneOnRight,\n"
"# turnOutPointOnLeft,	-- opening to adjacent street/alley/road\n"
"# turnOutPointOnRight,\n"
"# adjacentParkingOnLeft, 	-- side of road parking\n"
"# adjacentParkingOnRight,\n"
"#\n"
"# -- Bike Lane Needs\n"
"# adjacentBikeLaneOnLeft, -- presence of marked bike lanes\n"
"# adjacentBikeLaneOnRight,\n"
"# sharedBikeLane, 	-- right of way is shared with bikes\n"
"# 			-- who may occupy entire lane width\n"
"# bikeBoxInFront,\n"
"#\n"
"# -- Transit Needs\n"
"# transitStopOnLeft,	-- any form of bus/transit loading\n"
"# 			-- with pull in-out access to lane on left\n"
"# transitStopOnRight, 	-- any form of bus/transit loading\n"
"# 			-- with pull in-out access to lane on right\n"
"# transitStopInLane, 	-- any form of bus/transit loading\n"
"# 			-- in mid path of the lane\n"
"# sharedWithTrackedVehicle, -- lane is shared with train or trolley\n"
"# 			-- not used for crossing tracks\n"
"#\n"
"# -- Pedestrian Support Attributes\n"
"# safeIsland, 		-- begin/end a safety island in path\n"
"# lowCurbsPresent, 	-- for ADA support\n"
"# rumbleStripPresent, 	-- for ADA support\n"
"# audibleSignalingPresent, -- for ADA support\n"
"# adaptiveTimingPresent, 	-- for ADA support\n"
"# rfSignalRequestPresent, -- Supports RF push to walk technologies\n"
"# partialCurbIntrusion, 	-- path is blocked by a median or curb\n"
"# 			-- but at least 1 meter remains open for use\n"
"# 			-- and at-grade passage\n"
"#\n"
"# -- Lane geometry details\n"
"# taperToLeft,		-- Used to control final path shape\n"
"# taperToRight,		-- Used to control final path shape\n"
"# taperToCenterLine,	-- Used to control final path shape\n"
"#\n"
"# -- Parking Lane and Curb Attributes\n"
"# parallelParking, 	-- Parking at an angle with the street\n"
"# freeParking, 		-- no restriction on use of parking\n"
"# timeRestrictionsOnParking , -- Parking is not permitted at all times\n"
"# 			-- typically used when the 'parking' lane\n"
"# 			-- becomes a driving lane at times\n"
"# costToPark, 		-- Used where parking has a cost\n"
"# midBlockCurbPresent, 	-- a protruding curb near lane edge\n"
"# unEvenPavementPresent, 	-- a disjoint height at lane edge\n"
"# ...\n"
"# }\n"
"\n"
"uint8  segment_attribute_xy\n"
"\n"
"uint8 RESERVED=0\n"
"uint8 DONOTBLOCK=1\n"
"uint8 WHITELINE=2\n"
"uint8 MERGINGLANELEFT=3\n"
"uint8 MERGINGLANERIGHT=4\n"
"uint8 CURBONLEFT=5\n"
"uint8 CURBONRIGHT=6\n"
"uint8 LOADINGZONEONLEFT=7\n"
"uint8 LOADINGZONEONRIGHT=8\n"
"uint8 TURNOUTPOINTONLEFT=9\n"
"uint8 TURNOUTPOINTONRIGHT=10\n"
"uint8 ADJACENTPARKINGONLEFT=11\n"
"uint8 ADJACENTPARKINGONRIGHT=12\n"
"uint8 ADJACENTBIKELANEONLEFT=13\n"
"uint8 ADJACENTBIKELANEONRIGHT=14\n"
"uint8 SHAREDBIKELANE=15\n"
"uint8 BIKEBOXINFRONT=16\n"
"uint8 TRANSITSTOPONLEFT=17\n"
"uint8 TRANSITSTOPONRIGHT=18\n"
"uint8 TRANSITSTOPINLANE=19\n"
"uint8 SHAREDWITHTRACKEDVEHICLE=20\n"
"uint8 SAFEISLAND=21\n"
"uint8 LOWCURBSPRESENT=22\n"
"uint8 RUMBLESTRIPPRESENT=23\n"
"uint8 AUDIBLESIGNALINGPRESENT=24\n"
"uint8 ADAPTIVETIMINGPRESENT=25\n"
"uint8 RFSIGNALREQUESTPRESENT=26\n"
"uint8 PARTIALCURBINTRUSION=27\n"
"uint8 TAPERTOLEFT=28\n"
"uint8 TAPERTORIGHT=29\n"
"uint8 TAPERTOCENTERLINE=30\n"
"uint8 PARALLELPARKING=31\n"
"uint8 FREEPARKING=32\n"
"uint8 TIMERESTRICTIONSONPARKING=33\n"
"uint8 COSTTOPARK=34\n"
"uint8 MIDBLOCKCURBPRESENT=35\n"
"uint8 UNEVENPAVEMENTPRESENT=36\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segment_attribute_xy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SegmentAttributeXYList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator>& v)
  {
    s << indent << "segment_attribute_xy[]" << std::endl;
    for (size_t i = 0; i < v.segment_attribute_xy.size(); ++i)
    {
      s << indent << "  segment_attribute_xy[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::SegmentAttributeXY_<ContainerAllocator> >::stream(s, indent + "    ", v.segment_attribute_xy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_SEGMENTATTRIBUTEXYLIST_H
