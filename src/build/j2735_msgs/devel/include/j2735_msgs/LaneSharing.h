// Generated by gencpp from file j2735_msgs/LaneSharing.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_LANESHARING_H
#define J2735_MSGS_MESSAGE_LANESHARING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct LaneSharing_
{
  typedef LaneSharing_<ContainerAllocator> Type;

  LaneSharing_()
    : lane_sharing(0)  {
    }
  LaneSharing_(const ContainerAllocator& _alloc)
    : lane_sharing(0)  {
  (void)_alloc;
    }



   typedef uint16_t _lane_sharing_type;
  _lane_sharing_type lane_sharing;





  typedef boost::shared_ptr< ::j2735_msgs::LaneSharing_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::LaneSharing_<ContainerAllocator> const> ConstPtr;

}; // struct LaneSharing_

typedef ::j2735_msgs::LaneSharing_<std::allocator<void> > LaneSharing;

typedef boost::shared_ptr< ::j2735_msgs::LaneSharing > LaneSharingPtr;
typedef boost::shared_ptr< ::j2735_msgs::LaneSharing const> LaneSharingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::LaneSharing_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::LaneSharing_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::LaneSharing_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneSharing_<ContainerAllocator2> & rhs)
{
  return lhs.lane_sharing == rhs.lane_sharing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::LaneSharing_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneSharing_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneSharing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneSharing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneSharing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneSharing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneSharing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneSharing_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::LaneSharing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5b20babfaf86f7076116f556cbdd772";
  }

  static const char* value(const ::j2735_msgs::LaneSharing_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5b20babfaf86f70ULL;
  static const uint64_t static_value2 = 0x76116f556cbdd772ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::LaneSharing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/LaneSharing";
  }

  static const char* value(const ::j2735_msgs::LaneSharing_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::LaneSharing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# LaneSharing.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"#\n"
"# LaneSharing ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# overlappingLaneDescriptionProvided (0),\n"
"# -- Assert when another lane object is present to describe the\n"
"# -- path of the overlapping shared lane\n"
"# -- this construct is not used for lane objects which simply cross\n"
"# multipleLanesTreatedAsOneLane(1),\n"
"# -- Assert if the lane object path and width details represents\n"
"# -- multiple lanes within it that are not further described\n"
"# -- Various modes and type of traffic that may share this lane:\n"
"# otherNonMotorizedTrafficTypes (2), -- horse drawn etc.\n"
"# individualMotorizedVehicleTraffic (3),\n"
"# busVehicleTraffic (4),\n"
"# taxiVehicleTraffic (5),\n"
"# pedestriansTraffic (6),\n"
"# cyclistVehicleTraffic (7),\n"
"# trackedVehicleTraffic (8),\n"
"# pedestrianTraffic (9)\n"
"# } (SIZE (10))\n"
"# -- All zeros would indicate 'not shared' and 'not overlapping'\n"
"\n"
"uint16 lane_sharing\n"
;
  }

  static const char* value(const ::j2735_msgs::LaneSharing_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::LaneSharing_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_sharing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneSharing_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::LaneSharing_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::LaneSharing_<ContainerAllocator>& v)
  {
    s << indent << "lane_sharing: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lane_sharing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_LANESHARING_H
