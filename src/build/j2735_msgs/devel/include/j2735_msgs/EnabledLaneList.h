// Generated by gencpp from file j2735_msgs/EnabledLaneList.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_ENABLEDLANELIST_H
#define J2735_MSGS_MESSAGE_ENABLEDLANELIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct EnabledLaneList_
{
  typedef EnabledLaneList_<ContainerAllocator> Type;

  EnabledLaneList_()
    : lane_id_list()  {
    }
  EnabledLaneList_(const ContainerAllocator& _alloc)
    : lane_id_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _lane_id_list_type;
  _lane_id_list_type lane_id_list;





  typedef boost::shared_ptr< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> const> ConstPtr;

}; // struct EnabledLaneList_

typedef ::j2735_msgs::EnabledLaneList_<std::allocator<void> > EnabledLaneList;

typedef boost::shared_ptr< ::j2735_msgs::EnabledLaneList > EnabledLaneListPtr;
typedef boost::shared_ptr< ::j2735_msgs::EnabledLaneList const> EnabledLaneListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::EnabledLaneList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::EnabledLaneList_<ContainerAllocator1> & lhs, const ::j2735_msgs::EnabledLaneList_<ContainerAllocator2> & rhs)
{
  return lhs.lane_id_list == rhs.lane_id_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::EnabledLaneList_<ContainerAllocator1> & lhs, const ::j2735_msgs::EnabledLaneList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bac2474615e566c4122e6a3675ef4441";
  }

  static const char* value(const ::j2735_msgs::EnabledLaneList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbac2474615e566c4ULL;
  static const uint64_t static_value2 = 0x122e6a3675ef4441ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/EnabledLaneList";
  }

  static const char* value(const ::j2735_msgs::EnabledLaneList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# EnabledLaneList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The Enabled Lane List data frame is a sequence of lane IDs for lane objects that are activated in the current map\n"
"# configuration. These lanes, unlike most lanes, have their RevocableLane bit set to one (asserted). Such lanes are not\n"
"# considered to be part of the current map unless they are in the Enabled Lane List. This concept is used to describe all the\n"
"# possible regulatory states for a given physical lane.\n"
"#\n"
"# EnabledLaneList ::= SEQUENCE (SIZE(1..16)) OF LaneID\n"
"#-- The unique ID numbers for each\n"
"#-- lane object which is 'active'\n"
"#-- as part of the dynamic map contents.\n"
"\n"
"# LaneID ::= INTEGER (0..255)\n"
"# -- the value 0 shall be used when the lane ID is not available or not known\n"
"# -- the value 255 is reserved for future use\n"
"uint16[] lane_id_list\n"
;
  }

  static const char* value(const ::j2735_msgs::EnabledLaneList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_id_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EnabledLaneList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::EnabledLaneList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::EnabledLaneList_<ContainerAllocator>& v)
  {
    s << indent << "lane_id_list[]" << std::endl;
    for (size_t i = 0; i < v.lane_id_list.size(); ++i)
    {
      s << indent << "  lane_id_list[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.lane_id_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_ENABLEDLANELIST_H
