// Generated by gencpp from file j2735_msgs/RestrictionClassList.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_RESTRICTIONCLASSLIST_H
#define J2735_MSGS_MESSAGE_RESTRICTIONCLASSLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/RestrictionClassAssignment.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct RestrictionClassList_
{
  typedef RestrictionClassList_<ContainerAllocator> Type;

  RestrictionClassList_()
    : restriction_class_list()  {
    }
  RestrictionClassList_(const ContainerAllocator& _alloc)
    : restriction_class_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::j2735_msgs::RestrictionClassAssignment_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::RestrictionClassAssignment_<ContainerAllocator> >::other >  _restriction_class_list_type;
  _restriction_class_list_type restriction_class_list;





  typedef boost::shared_ptr< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> const> ConstPtr;

}; // struct RestrictionClassList_

typedef ::j2735_msgs::RestrictionClassList_<std::allocator<void> > RestrictionClassList;

typedef boost::shared_ptr< ::j2735_msgs::RestrictionClassList > RestrictionClassListPtr;
typedef boost::shared_ptr< ::j2735_msgs::RestrictionClassList const> RestrictionClassListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::RestrictionClassList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::RestrictionClassList_<ContainerAllocator1> & lhs, const ::j2735_msgs::RestrictionClassList_<ContainerAllocator2> & rhs)
{
  return lhs.restriction_class_list == rhs.restriction_class_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::RestrictionClassList_<ContainerAllocator1> & lhs, const ::j2735_msgs::RestrictionClassList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39c5820cd159fd97238dd797c4d5b5d8";
  }

  static const char* value(const ::j2735_msgs::RestrictionClassList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39c5820cd159fd97ULL;
  static const uint64_t static_value2 = 0x238dd797c4d5b5d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/RestrictionClassList";
  }

  static const char* value(const ::j2735_msgs::RestrictionClassList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# RestrictionClassList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_RestrictionClassList data frame is used to enumerate a list of user classes which belong to a given\n"
"# assigned index. The resulting collection is treated as a group by the signal controller when it issues movement data\n"
"# (signal phase information) with the GroupID for this group. This data frame is typically static for long periods of time\n"
"# (months) and conveyed to the user by means of the MAP message.\n"
"\n"
"# RestrictionClassList ::= SEQUENCE (SIZE(1..254)) OF RestrictionClassAssignment\n"
"\n"
"j2735_msgs/RestrictionClassAssignment[] restriction_class_list\n"
"================================================================================\n"
"MSG: j2735_msgs/RestrictionClassAssignment\n"
"#\n"
"# RestrictionClassAssignment.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_RestrictionClassAssignment data frame is used to assign (or bind) a single RestrictionClassID data\n"
"# element to a list of all user classes to which it applies. A collection of these bindings is conveyed in the\n"
"# RestrictionClassList data frame in the MAP message to travelers.\n"
"#\n"
"# RestrictionClassAssignment ::= SEQUENCE {\n"
"# id RestrictionClassID,\n"
"# -- the unique value (within an intersection or local region)\n"
"# -- that is assigned to this group of users\n"
"# users RestrictionUserTypeList\n"
"# -- The list of user types/classes\n"
"# -- to which this restriction ID applies\n"
"# }\n"
"\n"
"# RestrictionClassID ::= INTEGER (0..255)\n"
"uint8 id\n"
"\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::RestrictionClassList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.restriction_class_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RestrictionClassList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::RestrictionClassList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::RestrictionClassList_<ContainerAllocator>& v)
  {
    s << indent << "restriction_class_list[]" << std::endl;
    for (size_t i = 0; i < v.restriction_class_list.size(); ++i)
    {
      s << indent << "  restriction_class_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::RestrictionClassAssignment_<ContainerAllocator> >::stream(s, indent + "    ", v.restriction_class_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_RESTRICTIONCLASSLIST_H
