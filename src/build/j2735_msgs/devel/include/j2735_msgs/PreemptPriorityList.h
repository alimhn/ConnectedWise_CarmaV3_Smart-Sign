// Generated by gencpp from file j2735_msgs/PreemptPriorityList.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_PREEMPTPRIORITYLIST_H
#define J2735_MSGS_MESSAGE_PREEMPTPRIORITYLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/SignalControlZone.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct PreemptPriorityList_
{
  typedef PreemptPriorityList_<ContainerAllocator> Type;

  PreemptPriorityList_()
    : preempt_priority_list()  {
    }
  PreemptPriorityList_(const ContainerAllocator& _alloc)
    : preempt_priority_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::j2735_msgs::SignalControlZone_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::SignalControlZone_<ContainerAllocator> >::other >  _preempt_priority_list_type;
  _preempt_priority_list_type preempt_priority_list;





  typedef boost::shared_ptr< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> const> ConstPtr;

}; // struct PreemptPriorityList_

typedef ::j2735_msgs::PreemptPriorityList_<std::allocator<void> > PreemptPriorityList;

typedef boost::shared_ptr< ::j2735_msgs::PreemptPriorityList > PreemptPriorityListPtr;
typedef boost::shared_ptr< ::j2735_msgs::PreemptPriorityList const> PreemptPriorityListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator1> & lhs, const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator2> & rhs)
{
  return lhs.preempt_priority_list == rhs.preempt_priority_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator1> & lhs, const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "540868150c1511ed84c0943e75886b4a";
  }

  static const char* value(const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x540868150c1511edULL;
  static const uint64_t static_value2 = 0x84c0943e75886b4aULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/PreemptPriorityList";
  }

  static const char* value(const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# PreemptPriorityList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_PreemptPriorityList data frame consists of a list of RegionalSignalControlZone entries.\n"
"#\n"
"# PreemptPriorityList ::= SEQUENCE (SIZE(1..32)) OF SignalControlZone\n"
"#\n"
"#\n"
"\n"
"j2735_msgs/SignalControlZone[] preempt_priority_list\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/SignalControlZone\n"
"#\n"
"# SignalControlZone.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# SignalControlZone ::= SEQUENCE {\n"
"# zone RegionalExtension {{REGION.Reg-SignalControlZone}},\n"
"# ...\n"
"# }\n"
"#\n"
"# regional_extension  #TODO: RegionalExtensions are not yet implemented in asn1c\n"
;
  }

  static const char* value(const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.preempt_priority_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PreemptPriorityList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::PreemptPriorityList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::PreemptPriorityList_<ContainerAllocator>& v)
  {
    s << indent << "preempt_priority_list[]" << std::endl;
    for (size_t i = 0; i < v.preempt_priority_list.size(); ++i)
    {
      s << indent << "  preempt_priority_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::SignalControlZone_<ContainerAllocator> >::stream(s, indent + "    ", v.preempt_priority_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_PREEMPTPRIORITYLIST_H
