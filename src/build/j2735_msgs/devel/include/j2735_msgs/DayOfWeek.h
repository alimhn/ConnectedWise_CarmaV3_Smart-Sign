// Generated by gencpp from file j2735_msgs/DayOfWeek.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_DAYOFWEEK_H
#define J2735_MSGS_MESSAGE_DAYOFWEEK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct DayOfWeek_
{
  typedef DayOfWeek_<ContainerAllocator> Type;

  DayOfWeek_()
    : dow()  {
      dow.assign(0);
  }
  DayOfWeek_(const ContainerAllocator& _alloc)
    : dow()  {
  (void)_alloc;
      dow.assign(0);
  }



   typedef boost::array<uint8_t, 7>  _dow_type;
  _dow_type dow;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUN)
  #undef SUN
#endif
#if defined(_WIN32) && defined(MON)
  #undef MON
#endif
#if defined(_WIN32) && defined(TUE)
  #undef TUE
#endif
#if defined(_WIN32) && defined(WED)
  #undef WED
#endif
#if defined(_WIN32) && defined(THU)
  #undef THU
#endif
#if defined(_WIN32) && defined(FRI)
  #undef FRI
#endif
#if defined(_WIN32) && defined(SAT)
  #undef SAT
#endif

  enum {
    SUN = 6u,
    MON = 5u,
    TUE = 4u,
    WED = 3u,
    THU = 2u,
    FRI = 1u,
    SAT = 0u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::DayOfWeek_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::DayOfWeek_<ContainerAllocator> const> ConstPtr;

}; // struct DayOfWeek_

typedef ::j2735_msgs::DayOfWeek_<std::allocator<void> > DayOfWeek;

typedef boost::shared_ptr< ::j2735_msgs::DayOfWeek > DayOfWeekPtr;
typedef boost::shared_ptr< ::j2735_msgs::DayOfWeek const> DayOfWeekConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::DayOfWeek_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::DayOfWeek_<ContainerAllocator1> & lhs, const ::j2735_msgs::DayOfWeek_<ContainerAllocator2> & rhs)
{
  return lhs.dow == rhs.dow;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::DayOfWeek_<ContainerAllocator1> & lhs, const ::j2735_msgs::DayOfWeek_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::DayOfWeek_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::DayOfWeek_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::DayOfWeek_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f02f8ee3b681fb434a4b191ed968fae8";
  }

  static const char* value(const ::j2735_msgs::DayOfWeek_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf02f8ee3b681fb43ULL;
  static const uint64_t static_value2 = 0x4a4b191ed968fae8ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/DayOfWeek";
  }

  static const char* value(const ::j2735_msgs::DayOfWeek_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# DayOfWeek.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# DayOfWeek ::= BIT STRING //only J\n"
"# {\n"
"# 	sun (6), \n"
"# 	mon (5), \n"
"# 	tue (4), \n"
"# 	wed (3), \n"
"# 	thu (2), \n"
"# 	fri (1), \n"
"# 	sat (0)\n"
"# }\n"
"\n"
"uint8[7] dow\n"
"\n"
"# enumeration values for day of week\n"
"uint8 SUN = 6  \n"
"uint8 MON = 5\n"
"uint8 TUE = 4  \n"
"uint8 WED = 3  \n"
"uint8 THU = 2  \n"
"uint8 FRI = 1  \n"
"uint8 SAT = 0\n"
;
  }

  static const char* value(const ::j2735_msgs::DayOfWeek_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DayOfWeek_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::DayOfWeek_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::DayOfWeek_<ContainerAllocator>& v)
  {
    s << indent << "dow[]" << std::endl;
    for (size_t i = 0; i < v.dow.size(); ++i)
    {
      s << indent << "  dow[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.dow[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_DAYOFWEEK_H
