// Generated by gencpp from file j2735_msgs/TrafficControlRequest.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TRAFFICCONTROLREQUEST_H
#define J2735_MSGS_MESSAGE_TRAFFICCONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/TrafficControlRequestV01.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct TrafficControlRequest_
{
  typedef TrafficControlRequest_<ContainerAllocator> Type;

  TrafficControlRequest_()
    : choice(0)
    , tcrV01()  {
    }
  TrafficControlRequest_(const ContainerAllocator& _alloc)
    : choice(0)
    , tcrV01(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _choice_type;
  _choice_type choice;

   typedef  ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator>  _tcrV01_type;
  _tcrV01_type tcrV01;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESERVED)
  #undef RESERVED
#endif
#if defined(_WIN32) && defined(TCRV01)
  #undef TCRV01
#endif

  enum {
    RESERVED = 0u,
    TCRV01 = 1u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficControlRequest_

typedef ::j2735_msgs::TrafficControlRequest_<std::allocator<void> > TrafficControlRequest;

typedef boost::shared_ptr< ::j2735_msgs::TrafficControlRequest > TrafficControlRequestPtr;
typedef boost::shared_ptr< ::j2735_msgs::TrafficControlRequest const> TrafficControlRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.choice == rhs.choice &&
    lhs.tcrV01 == rhs.tcrV01;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4cf6cce1430d4d443b6d27e379c1881";
  }

  static const char* value(const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4cf6cce1430d4d4ULL;
  static const uint64_t static_value2 = 0x43b6d27e379c1881ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TrafficControlRequest";
  }

  static const char* value(const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TrafficControlRequest.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"#TrafficControlRequest ::= CHOICE\n"
"#{\n"
"#	reserved NULL, -- skip version zero\n"
"#	tcrV01 TrafficControlRequestV01, -- traffic control request version 1\n"
"#	...\n"
"#}\n"
"\n"
"uint8 choice\n"
"\n"
"uint8 RESERVED=0\n"
"uint8 TCRV01=1\n"
"\n"
"#tcrV01 ::= TrafficControlRequestV01\n"
"j2735_msgs/TrafficControlRequestV01 tcrV01\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/TrafficControlRequestV01\n"
"#\n"
"# TrafficControlRequestV01.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"#TrafficControlRequestV01 ::= SEQUENCE\n"
"#{\n"
"#	reqid Id64b, -- randomly generated ephemeral request identifier\n"
"#	reqseq INTEGER (0..255), -- sequential counter used to differentiate traffic control requests\n"
"#	scale INTEGER (-3..3), -- vertex offset units 10^n meters\n"
"#	bounds SEQUENCE (SIZE(1..63)) OF TrafficControlBounds\n"
"#}\n"
"\n"
"\n"
"# reqid ::= Id64b\n"
"j2735_msgs/Id64b reqid\n"
"\n"
"# reqseq ::= INTEGER (0..255)\n"
"uint8 reqseq\n"
"\n"
"# Scale ::= INTEGER (-3..3)  \n"
"int8 scale\n"
"\n"
"# Bounds SEQUENCE (SIZE(1..63)) OF TrafficControlBounds\n"
"j2735_msgs/TrafficControlBounds[] bounds\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/Id64b\n"
"#\n"
"# Id64b.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# Id64b ::= OCTET STRING (SIZE(8)) -- 8-byte binary value that can be used for shorter unique ids\n"
"\n"
"uint8[8] id\n"
"================================================================================\n"
"MSG: j2735_msgs/TrafficControlBounds\n"
"#\n"
"# TrafficControlBounds.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"\n"
"#TrafficControlBounds ::= SEQUENCE\n"
"#{\n"
"#	oldest EpochMins, -- timestamp of oldest traffic control message within bounds\n"
"#	reflon Longitude, -- initial vertex reference longitude\n"
"#	reflat Latitude, -- initial vertex reference latitude\n"
"#	offsets SEQUENCE (SIZE(3)) OF OffsetPoint -- relative vertex positions in scaled meters\n"
"#}\n"
"\n"
"#oldest ::= EpochMins\n"
"uint64 oldest\n"
"\n"
"# reflon ::= INTEGER (-1799999999..1800000000)\n"
"#  -- initial vertex reference longitude\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 180 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"int32 reflon\n"
"\n"
"int32 REFLON_MAX = 1800000000\n"
"int32 REFLON_MIN = -1799999999\n"
"int32 REFLON_UNAVAILABLE = 1800000001\n"
"\n"
"\n"
"# reflat ::= INTEGER (-900000000..900000000)\n"
"#  -- initial vertex reference latitude\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 90 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"int32 reflat\n"
"\n"
"int32 REFLAT_MAX = 900000000\n"
"int32 REFLAT_MIN = -900000000\n"
"int32 REFLAT_UNAVAILABLE = 900000001\n"
"\n"
"#offsets ::= SEQUENCE (SIZE(3)) OF OffsetPoint \n"
"j2735_msgs/OffsetPoint[3] offsets\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/OffsetPoint\n"
"#\n"
"# OffsetPoint.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"#OffsetPoint ::= SEQUENCE\n"
"#{\n"
"#	deltax INTEGER (-32768..32767), -- relative horizontal vertex position in scaled meters\n"
"#	deltay INTEGER (-32768..32767) -- relative vertical vertex position in scaled meters\n"
"#}\n"
"\n"
"#deltax ::= INTEGER (-32768..32767)\n"
"int16 deltax\n"
"\n"
"#deltay ::= INTEGER (-32768..32767)\n"
"int16 deltay\n"
"\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.choice);
      stream.next(m.tcrV01);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TrafficControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TrafficControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "choice: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.choice);
    s << indent << "tcrV01: ";
    s << std::endl;
    Printer< ::j2735_msgs::TrafficControlRequestV01_<ContainerAllocator> >::stream(s, indent + "  ", v.tcrV01);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TRAFFICCONTROLREQUEST_H
