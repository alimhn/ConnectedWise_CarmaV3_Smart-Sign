// Generated by gencpp from file j2735_msgs/AdvisorySpeedType.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_ADVISORYSPEEDTYPE_H
#define J2735_MSGS_MESSAGE_ADVISORYSPEEDTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct AdvisorySpeedType_
{
  typedef AdvisorySpeedType_<ContainerAllocator> Type;

  AdvisorySpeedType_()
    : advisory_speed_type(0)  {
    }
  AdvisorySpeedType_(const ContainerAllocator& _alloc)
    : advisory_speed_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _advisory_speed_type_type;
  _advisory_speed_type_type advisory_speed_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(GREENWAVE)
  #undef GREENWAVE
#endif
#if defined(_WIN32) && defined(ECODRIVE)
  #undef ECODRIVE
#endif
#if defined(_WIN32) && defined(TRANSIT)
  #undef TRANSIT
#endif

  enum {
    NONE = 0u,
    GREENWAVE = 1u,
    ECODRIVE = 2u,
    TRANSIT = 3u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> const> ConstPtr;

}; // struct AdvisorySpeedType_

typedef ::j2735_msgs::AdvisorySpeedType_<std::allocator<void> > AdvisorySpeedType;

typedef boost::shared_ptr< ::j2735_msgs::AdvisorySpeedType > AdvisorySpeedTypePtr;
typedef boost::shared_ptr< ::j2735_msgs::AdvisorySpeedType const> AdvisorySpeedTypeConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator1> & lhs, const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator2> & rhs)
{
  return lhs.advisory_speed_type == rhs.advisory_speed_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator1> & lhs, const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2577b7d853d2b485bd9efc66a0050f71";
  }

  static const char* value(const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2577b7d853d2b485ULL;
  static const uint64_t static_value2 = 0xbd9efc66a0050f71ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/AdvisorySpeedType";
  }

  static const char* value(const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# AdvisorySpeedType.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_AdvisorySpeedType data element relates the type of travel to which a given speed refers. This element is\n"
"# typically used as part of an AdvisorySpeed data frame for signal phase and timing data.\n"
"#\n"
"# AdvisorySpeedType ::= ENUMERATED {\n"
"# none (0),\n"
"# greenwave (1),\n"
"# ecoDrive (2),\n"
"# transit (3),\n"
"# ...\n"
"# } -- Note: subject to further growth\n"
"\n"
"uint8 advisory_speed_type\n"
"\n"
"uint8 NONE=0\n"
"uint8 GREENWAVE=1\n"
"uint8 ECODRIVE=2\n"
"uint8 TRANSIT=3\n"
;
  }

  static const char* value(const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.advisory_speed_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AdvisorySpeedType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::AdvisorySpeedType_<ContainerAllocator>& v)
  {
    s << indent << "advisory_speed_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.advisory_speed_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_ADVISORYSPEEDTYPE_H
