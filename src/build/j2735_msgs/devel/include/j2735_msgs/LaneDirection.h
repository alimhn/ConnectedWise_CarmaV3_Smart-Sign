// Generated by gencpp from file j2735_msgs/LaneDirection.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_LANEDIRECTION_H
#define J2735_MSGS_MESSAGE_LANEDIRECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct LaneDirection_
{
  typedef LaneDirection_<ContainerAllocator> Type;

  LaneDirection_()
    : lane_direction(0)  {
    }
  LaneDirection_(const ContainerAllocator& _alloc)
    : lane_direction(0)  {
  (void)_alloc;
    }



   typedef uint8_t _lane_direction_type;
  _lane_direction_type lane_direction;





  typedef boost::shared_ptr< ::j2735_msgs::LaneDirection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::LaneDirection_<ContainerAllocator> const> ConstPtr;

}; // struct LaneDirection_

typedef ::j2735_msgs::LaneDirection_<std::allocator<void> > LaneDirection;

typedef boost::shared_ptr< ::j2735_msgs::LaneDirection > LaneDirectionPtr;
typedef boost::shared_ptr< ::j2735_msgs::LaneDirection const> LaneDirectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::LaneDirection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::LaneDirection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::LaneDirection_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneDirection_<ContainerAllocator2> & rhs)
{
  return lhs.lane_direction == rhs.lane_direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::LaneDirection_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneDirection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneDirection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneDirection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneDirection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneDirection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::LaneDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e54bbf0b78a512c3a5e1e30ccec9630b";
  }

  static const char* value(const ::j2735_msgs::LaneDirection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe54bbf0b78a512c3ULL;
  static const uint64_t static_value2 = 0xa5e1e30ccec9630bULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::LaneDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/LaneDirection";
  }

  static const char* value(const ::j2735_msgs::LaneDirection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::LaneDirection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# LaneDirection.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneDirection data element is used to denote the allowed direction of travel over a lane object. By convention,\n"
"# the lane object is always described from the stop line outwards away from the intersection. Therefore, the ingress\n"
"# direction is from the end of the path to the stop line and the egress direction is from the stop line outwards. It should be\n"
"# noted that some lane objects are not used for travel and that some lane objects allow bi-directional travel.\n"
"#\n"
"# LaneDirection ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# -- Allowed directions of travel in the lane object\n"
"# -- All lanes are described from the stop line outwards\n"
"# ingressPath (0),\n"
"# -- travel from rear of path to front is allowed\n"
"# egressPath (1)\n"
"# -- travel from front of path to rear is allowed\n"
"# -- Notes: No Travel, i.e. the lane object type does not support travel (medians, curbs, etc.)\n"
"# is indicated by not asserting any bit value\n"
"# - Bi-Directional Travel (such as a ped crosswalk) is indicated by asserting both of the bits\n"
"# } (SIZE (2))\n"
"\n"
"uint8 lane_direction\n"
;
  }

  static const char* value(const ::j2735_msgs::LaneDirection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::LaneDirection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneDirection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::LaneDirection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::LaneDirection_<ContainerAllocator>& v)
  {
    s << indent << "lane_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_LANEDIRECTION_H
