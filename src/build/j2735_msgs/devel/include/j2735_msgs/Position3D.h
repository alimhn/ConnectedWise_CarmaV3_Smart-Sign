// Generated by gencpp from file j2735_msgs/Position3D.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_POSITION3D_H
#define J2735_MSGS_MESSAGE_POSITION3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct Position3D_
{
  typedef Position3D_<ContainerAllocator> Type;

  Position3D_()
    : latitude(0.0)
    , longitude(0.0)
    , elevation(0.0)
    , elevation_exists(false)  {
    }
  Position3D_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , elevation(0.0)
    , elevation_exists(false)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef float _elevation_type;
  _elevation_type elevation;

   typedef uint8_t _elevation_exists_type;
  _elevation_exists_type elevation_exists;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LATITUDE_UNAVAILABLE)
  #undef LATITUDE_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(LATITUDE_MAX)
  #undef LATITUDE_MAX
#endif
#if defined(_WIN32) && defined(LATITUDE_MIN)
  #undef LATITUDE_MIN
#endif
#if defined(_WIN32) && defined(LONGITUDE_UNAVAILABLE)
  #undef LONGITUDE_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(LONGITUDE_MAX)
  #undef LONGITUDE_MAX
#endif
#if defined(_WIN32) && defined(LONGITUDE_MIN)
  #undef LONGITUDE_MIN
#endif
#if defined(_WIN32) && defined(ELEVATION_UNAVAILABLE)
  #undef ELEVATION_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(ELEVATION_MAX)
  #undef ELEVATION_MAX
#endif
#if defined(_WIN32) && defined(ELEVATION_MIN)
  #undef ELEVATION_MIN
#endif


  static const double LATITUDE_UNAVAILABLE;
  static const double LATITUDE_MAX;
  static const double LATITUDE_MIN;
  static const double LONGITUDE_UNAVAILABLE;
  static const double LONGITUDE_MAX;
  static const double LONGITUDE_MIN;
  static const float ELEVATION_UNAVAILABLE;
  static const float ELEVATION_MAX;
  static const float ELEVATION_MIN;

  typedef boost::shared_ptr< ::j2735_msgs::Position3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::Position3D_<ContainerAllocator> const> ConstPtr;

}; // struct Position3D_

typedef ::j2735_msgs::Position3D_<std::allocator<void> > Position3D;

typedef boost::shared_ptr< ::j2735_msgs::Position3D > Position3DPtr;
typedef boost::shared_ptr< ::j2735_msgs::Position3D const> Position3DConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      Position3D_<ContainerAllocator>::LATITUDE_UNAVAILABLE =
        
          90.0000001
        
        ;
   

   
   template<typename ContainerAllocator> const double
      Position3D_<ContainerAllocator>::LATITUDE_MAX =
        
          90.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      Position3D_<ContainerAllocator>::LATITUDE_MIN =
        
          -90.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      Position3D_<ContainerAllocator>::LONGITUDE_UNAVAILABLE =
        
          180.0000001
        
        ;
   

   
   template<typename ContainerAllocator> const double
      Position3D_<ContainerAllocator>::LONGITUDE_MAX =
        
          180.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      Position3D_<ContainerAllocator>::LONGITUDE_MIN =
        
          -179.9999999
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Position3D_<ContainerAllocator>::ELEVATION_UNAVAILABLE =
        
          -409.6
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Position3D_<ContainerAllocator>::ELEVATION_MAX =
        
          6143.9
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Position3D_<ContainerAllocator>::ELEVATION_MIN =
        
          -409.5
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::Position3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::Position3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::Position3D_<ContainerAllocator1> & lhs, const ::j2735_msgs::Position3D_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.elevation == rhs.elevation &&
    lhs.elevation_exists == rhs.elevation_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::Position3D_<ContainerAllocator1> & lhs, const ::j2735_msgs::Position3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::Position3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::Position3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::Position3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::Position3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::Position3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::Position3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::Position3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e694623847c02ec14299578943eeb2e";
  }

  static const char* value(const ::j2735_msgs::Position3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e694623847c02ecULL;
  static const uint64_t static_value2 = 0x14299578943eeb2eULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::Position3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/Position3D";
  }

  static const char* value(const ::j2735_msgs::Position3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::Position3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Position3D.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"# Provides a precise location in the WGS-84 coordinate system, from which short offsets may be used\n"
"# to create additional data using a flat earth projection centered on this location.\n"
"\n"
"# Position3D ::= SEQUENCE {\n"
"\n"
"# lat Latitude, -- in 1/10th micro degrees\n"
"# Latitude ::= INTEGER (-900000000..900000001)\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 90 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"float64 latitude\n"
"\n"
"float64 LATITUDE_UNAVAILABLE = 90.0000001\n"
"float64 LATITUDE_MAX = 90.0\n"
"float64 LATITUDE_MIN = -90.0\n"
"\n"
"# long Longitude, -- in 1/10th micro degrees\n"
"# Longitude ::= INTEGER (-1799999999..1800000001)\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 180 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"float64 longitude\n"
"\n"
"float64 LONGITUDE_UNAVAILABLE = 180.0000001\n"
"float64 LONGITUDE_MAX = 180.0\n"
"float64 LONGITUDE_MIN = -179.9999999\n"
"\n"
"# elevation Elevation OPTIONAL, -- in 10 cm units\n"
"# Elevation ::= INTEGER (-4096..61439)\n"
"#  -- In units of 10 cm steps above or below the reference ellipsoid\n"
"#  -- Providing a range of -409.5 to + 6143.9 meters\n"
"#  -- The value -4096 shall be used when Unknown is to be sent\n"
"#  -- Convert to meter with factor 0.1 when field is used\n"
"float32 elevation\n"
"bool elevation_exists\n"
"\n"
"float32 ELEVATION_UNAVAILABLE = -409.6\n"
"float32 ELEVATION_MAX = 6143.9\n"
"float32 ELEVATION_MIN = -409.5\n"
"\n"
"#TODO: RegionalExtensions are not yet implemented in asn1c\n"
"# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-Position3D}} OPTIONAL,\n"
;
  }

  static const char* value(const ::j2735_msgs::Position3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::Position3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.elevation);
      stream.next(m.elevation_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::Position3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::Position3D_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "elevation: ";
    Printer<float>::stream(s, indent + "  ", v.elevation);
    s << indent << "elevation_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.elevation_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_POSITION3D_H
