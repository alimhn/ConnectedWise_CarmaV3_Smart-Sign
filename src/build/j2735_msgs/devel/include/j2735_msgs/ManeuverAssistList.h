// Generated by gencpp from file j2735_msgs/ManeuverAssistList.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_MANEUVERASSISTLIST_H
#define J2735_MSGS_MESSAGE_MANEUVERASSISTLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/ConnectionManeuverAssist.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct ManeuverAssistList_
{
  typedef ManeuverAssistList_<ContainerAllocator> Type;

  ManeuverAssistList_()
    : connection_maneuver_assist_list()  {
    }
  ManeuverAssistList_(const ContainerAllocator& _alloc)
    : connection_maneuver_assist_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::j2735_msgs::ConnectionManeuverAssist_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::ConnectionManeuverAssist_<ContainerAllocator> >::other >  _connection_maneuver_assist_list_type;
  _connection_maneuver_assist_list_type connection_maneuver_assist_list;





  typedef boost::shared_ptr< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> const> ConstPtr;

}; // struct ManeuverAssistList_

typedef ::j2735_msgs::ManeuverAssistList_<std::allocator<void> > ManeuverAssistList;

typedef boost::shared_ptr< ::j2735_msgs::ManeuverAssistList > ManeuverAssistListPtr;
typedef boost::shared_ptr< ::j2735_msgs::ManeuverAssistList const> ManeuverAssistListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator1> & lhs, const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator2> & rhs)
{
  return lhs.connection_maneuver_assist_list == rhs.connection_maneuver_assist_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator1> & lhs, const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2086e09532cefc78ee69224b474da338";
  }

  static const char* value(const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2086e09532cefc78ULL;
  static const uint64_t static_value2 = 0xee69224b474da338ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/ManeuverAssistList";
  }

  static const char* value(const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This entry is used directly by one other data structure in this standard, a DF called DF_LaneAttributes <ASN>.\n"
"#  In addition, this item may be used by data structures in other ITS standards.\n"
"# ManeuverAssistList ::= SEQUENCE (SIZE(1..16)) OF ConnectionManeuverAssist\n"
"\n"
"j2735_msgs/ConnectionManeuverAssist[] connection_maneuver_assist_list\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/ConnectionManeuverAssist\n"
"\n"
"# The ConnectionManeuverAssist data frame contains information about the the dynamic flow of traffic for the lane(s)\n"
"# and maneuvers in question (as determined by the LaneConnectionID). Note that this information can be sent regarding\n"
"# any lane-to-lane movement; it need not be limited to the lanes with active (non-red) phases when sent.\n"
"#\n"
"# ConnectionManeuverAssist ::= SEQUENCE {\n"
"# connectionID LaneConnectionID,\n"
"# -- the common connectionID used by all lanes to which\n"
"# -- this data applies\n"
"# -- (this value traces to ConnectsTo entries in lanes)\n"
"# -- Expected Clearance Information\n"
"# queueLength ZoneLength OPTIONAL,\n"
"# -- Unit = 1 meter, 0 = no queue\n"
"# -- The distance from the stop line to the back\n"
"# -- edge of the last vehicle in the queue,\n"
"# -- as measured along the lane center line.\n"
"# availableStorageLength ZoneLength OPTIONAL,\n"
"# -- Unit = 1 meter, 0 = no space remains\n"
"# -- Distance (e.g. beginning from the downstream\n"
"# -- stop-line up to a given distance) with a high\n"
"# -- probability for successfully executing the\n"
"# -- connecting maneuver between the two lanes\n"
"# -- during the current cycle.\n"
"# -- Used for enhancing the awareness of vehicles\n"
"# -- to anticipate if they can pass the stop line\n"
"# -- of the lane. Used for optimizing the green wave,\n"
"# -- due to knowledge of vehicles waiting in front\n"
"# -- of a red light (downstream).\n"
"# -- The element nextTime in TimeChangeDetails\n"
"# -- in the containing data frame contains the next\n"
"# -- timemark at which an active phase is expected,\n"
"# -- a form of storage flush interval.\n"
"# waitOnStop WaitOnStopline OPTIONAL,\n"
"# -- If \"true\", the vehicles on this specific connecting\n"
"# -- maneuver have to stop on the stop-line and not\n"
"# -- to enter the collision area\n"
"# pedBicycleDetect PedestrianBicycleDetect OPTIONAL,\n"
"# -- true if ANY ped or bicycles are detected crossing\n"
"# -- the above lanes. Set to false ONLY if there is a\n"
"# -- high certainty that there are none present,\n"
"# -- otherwise element is not sent.\n"
"# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-ConnectionManeuverAssist}} OPTIONAL,\n"
"# ...\n"
"# }\n"
"\n"
"# LaneConnectionID ::= INTEGER (0..255)\n"
"uint8 connection_id\n"
"\n"
"# ZoneLength ::= INTEGER (0..10000)\n"
"# -- Unit = 1 meter, 0 = unknown,\n"
"# -- The value 10000 to be used for Distances >=10000 m\n"
"# -- (e.g. from known point to another point along a\n"
"# -- known path, often against traffic flow direction\n"
"# -- when used for measuring queues)\n"
"uint16 queue_length\n"
"bool queue_length_exists\n"
"\n"
"# ZoneLength ::= INTEGER (0..10000)\n"
"uint16 available_storage_length\n"
"bool available_storage_length_exists\n"
"\n"
"# WaitOnStopline ::= BOOLEAN --- True or False\n"
"# -- If \"true\", the vehicles on this specific connecting\n"
"# -- maneuver have to stop on the stop-line\n"
"# -- and not to enter the collision area\n"
"bool wait_on_stop\n"
"bool wait_on_stop_exists\n"
"\n"
"# PedestrianBicycleDetect ::= BOOLEAN\n"
"# -- true if ANY Pedestrians or Bicyclists are\n"
"# -- detected crossing the target lane or lanes\n"
"bool ped_bicycle_detect\n"
"bool ped_bicycle_detect_exists\n"
"\n"
"# regional #TODO: RegionalExtensions are not yet implemented in asn1c\n"
;
  }

  static const char* value(const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.connection_maneuver_assist_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManeuverAssistList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::ManeuverAssistList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::ManeuverAssistList_<ContainerAllocator>& v)
  {
    s << indent << "connection_maneuver_assist_list[]" << std::endl;
    for (size_t i = 0; i < v.connection_maneuver_assist_list.size(); ++i)
    {
      s << indent << "  connection_maneuver_assist_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::ConnectionManeuverAssist_<ContainerAllocator> >::stream(s, indent + "    ", v.connection_maneuver_assist_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_MANEUVERASSISTLIST_H
