// Generated by gencpp from file j2735_msgs/ComputedLane.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_COMPUTEDLANE_H
#define J2735_MSGS_MESSAGE_COMPUTEDLANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/OffsetXaxis.h>
#include <j2735_msgs/OffsetYaxis.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct ComputedLane_
{
  typedef ComputedLane_<ContainerAllocator> Type;

  ComputedLane_()
    : reference_lane_id(0)
    , offset_x_axis()
    , offset_y_axis()
    , rotateXY(0)
    , rotatexy_exists(false)
    , scale_x_axis(0)
    , scale_x_axis_exists(false)
    , scale_y_axis(0)
    , scale_y_axis_exists(false)  {
    }
  ComputedLane_(const ContainerAllocator& _alloc)
    : reference_lane_id(0)
    , offset_x_axis(_alloc)
    , offset_y_axis(_alloc)
    , rotateXY(0)
    , rotatexy_exists(false)
    , scale_x_axis(0)
    , scale_x_axis_exists(false)
    , scale_y_axis(0)
    , scale_y_axis_exists(false)  {
  (void)_alloc;
    }



   typedef uint16_t _reference_lane_id_type;
  _reference_lane_id_type reference_lane_id;

   typedef  ::j2735_msgs::OffsetXaxis_<ContainerAllocator>  _offset_x_axis_type;
  _offset_x_axis_type offset_x_axis;

   typedef  ::j2735_msgs::OffsetYaxis_<ContainerAllocator>  _offset_y_axis_type;
  _offset_y_axis_type offset_y_axis;

   typedef uint16_t _rotateXY_type;
  _rotateXY_type rotateXY;

   typedef uint8_t _rotatexy_exists_type;
  _rotatexy_exists_type rotatexy_exists;

   typedef int16_t _scale_x_axis_type;
  _scale_x_axis_type scale_x_axis;

   typedef uint8_t _scale_x_axis_exists_type;
  _scale_x_axis_exists_type scale_x_axis_exists;

   typedef int16_t _scale_y_axis_type;
  _scale_y_axis_type scale_y_axis;

   typedef uint8_t _scale_y_axis_exists_type;
  _scale_y_axis_exists_type scale_y_axis_exists;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ROTATEXY_INVALID)
  #undef ROTATEXY_INVALID
#endif

  enum {
    ROTATEXY_INVALID = 255u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::ComputedLane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::ComputedLane_<ContainerAllocator> const> ConstPtr;

}; // struct ComputedLane_

typedef ::j2735_msgs::ComputedLane_<std::allocator<void> > ComputedLane;

typedef boost::shared_ptr< ::j2735_msgs::ComputedLane > ComputedLanePtr;
typedef boost::shared_ptr< ::j2735_msgs::ComputedLane const> ComputedLaneConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::ComputedLane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::ComputedLane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::ComputedLane_<ContainerAllocator1> & lhs, const ::j2735_msgs::ComputedLane_<ContainerAllocator2> & rhs)
{
  return lhs.reference_lane_id == rhs.reference_lane_id &&
    lhs.offset_x_axis == rhs.offset_x_axis &&
    lhs.offset_y_axis == rhs.offset_y_axis &&
    lhs.rotateXY == rhs.rotateXY &&
    lhs.rotatexy_exists == rhs.rotatexy_exists &&
    lhs.scale_x_axis == rhs.scale_x_axis &&
    lhs.scale_x_axis_exists == rhs.scale_x_axis_exists &&
    lhs.scale_y_axis == rhs.scale_y_axis &&
    lhs.scale_y_axis_exists == rhs.scale_y_axis_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::ComputedLane_<ContainerAllocator1> & lhs, const ::j2735_msgs::ComputedLane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::ComputedLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::ComputedLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::ComputedLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::ComputedLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::ComputedLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::ComputedLane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::ComputedLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e35ff00529bfc2e7f719199f8b58201";
  }

  static const char* value(const ::j2735_msgs::ComputedLane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e35ff00529bfc2eULL;
  static const uint64_t static_value2 = 0x7f719199f8b58201ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::ComputedLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/ComputedLane";
  }

  static const char* value(const ::j2735_msgs::ComputedLane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::ComputedLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# NodeListXY.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# ComputedLane ::= SEQUENCE {\n"
"# -- Data needed to created a computed lane\n"
"# referenceLaneId LaneID,\n"
"# 	-- the lane ID upon which this\n"
"# 	-- computed lane will be based\n"
"# 	-- Lane Offset in X and Y direction\n"
"# offsetXaxis CHOICE {\n"
"# 		small DrivenLineOffsetSm,\n"
"# 		large DrivenLineOffsetLg\n"
"# 		},\n"
"# offsetYaxis CHOICE {\n"
"# 		small DrivenLineOffsetSm,\n"
"# 		large DrivenLineOffsetLg\n"
"# 		},\n"
"# 	-- A path X offset value for translations of the\n"
"# 	-- path's points when creating translated lanes.\n"
"# 	-- The values found in the reference lane are\n"
"# 	-- all offset based on the X and Y values from\n"
"# 	-- the coordinates of the reference lane's\n"
"# 	-- initial path point.\n"
"#\n"
"# -- Lane Rotation\n"
"# rotateXY Angle OPTIONAL,\n"
"# 	-- A path rotation value for the entire lane\n"
"# 	-- Observe that this rotates the existing orientation\n"
"# 	-- of the referenced lane, it does not replace it.\n"
"# 	-- Rotation occurs about the initial path point.\n"
"# -- Lane Path Scale (zooming)\n"
"# scaleXaxis Scale-B12 OPTIONAL,\n"
"# scaleYaxis Scale-B12 OPTIONAL,\n"
"# 	-- value for translations or zooming of the path's\n"
"# 	-- points. The values found in the reference lane\n"
"# 	-- are all expanded or contracted based on the X\n"
"# 	-- and Y and width values from the coordinates of\n"
"# 	-- the reference lane's initial path point.\n"
"# 	-- The Z axis remains untouched.\n"
"# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-ComputedLane}} OPTIONAL,\n"
"# ...\n"
"# }\n"
"\n"
"# LaneID ::= INTEGER (0..255)\n"
"# -- the value 0 shall be used when the lane ID is\n"
"# -- not available or not known\n"
"# -- the value 255 is reserved for future use\n"
"uint16 reference_lane_id\n"
"\n"
"# The DrivenLineOffsetSmall data element is an integer value expressing the offset in a defined axis from a reference\n"
"# lane number from which a computed lane is offset.\n"
"# DrivenLineOffsetSm ::= INTEGER (-2047..2047)\n"
"# -- LSB units are 1 cm.\n"
"# The DE_DrivenLineOffsetLarge data element is an integer value expressing the offset in a defined axis from a\n"
"# reference lane number from which a computed lane is offset.\n"
"# DrivenLineOffsetLg ::= INTEGER (-32767..32767)\n"
"# -- LSB units are 1 cm.\n"
"\n"
"j2735_msgs/OffsetXaxis offset_x_axis\n"
"\n"
"j2735_msgs/OffsetYaxis offset_y_axis\n"
"\n"
"# Angle ::= INTEGER (0..239)\n"
"#  -- Unsigned units of 1.5 degree, in 1 octet\n"
"#  -- the true north is 0, positive is clockwise\n"
"#  -- the values 240 to 254 shall not be sent\n"
"#  -- the value 255 (0xFF) indicates an invalid value\n"
"# NOTE: use invalid value to indicate unavailability as well.\n"
"uint16 rotateXY\n"
"uint16 ROTATEXY_INVALID=255\n"
"bool rotatexy_exists\n"
"\n"
"# Scale-B12 ::= INTEGER (-2048..2047)\n"
"# A 12-bit signed scaling factor supporting scales from zero (which is not used) to >200%.\n"
"# In this data element, the value zero is taken to represent a value of one (scale 1:1).\n"
"int16 scale_x_axis\n"
"bool scale_x_axis_exists\n"
"\n"
"int16 scale_y_axis\n"
"bool scale_y_axis_exists\n"
"\n"
"# regional #TODO: RegionalExtensions are not yet implemented in asn1c\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/OffsetXaxis\n"
"#\n"
"# OffsetXaxis.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# 	-- A path X offset value for translations of the\n"
"# 	-- path's points when creating translated lanes.\n"
"# 	-- The values found in the reference lane are\n"
"# 	-- all offset based on the X and Y values from\n"
"# 	-- the coordinates of the reference lane's\n"
"# 	-- initial path point.\n"
"# offsetXaxis CHOICE {\n"
"# 		small DrivenLineOffsetSm,\n"
"# 		large DrivenLineOffsetLg\n"
"# 		},\n"
"\n"
"\n"
"uint8 choice\n"
"uint8 SMALL=0\n"
"uint8 LARGE=1\n"
"\n"
"# The DrivenLineOffsetSmall data element is an integer value expressing the offset in a defined axis from a reference\n"
"# lane number from which a computed lane is offset.\n"
"# DrivenLineOffsetSm ::= INTEGER (-2047..2047)\n"
"# -- LSB units are 1 cm.\n"
"int16 small\n"
"\n"
"\n"
"# The DE_DrivenLineOffsetLarge data element is an integer value expressing the offset in a defined axis from a\n"
"# reference lane number from which a computed lane is offset.\n"
"# DrivenLineOffsetLg ::= INTEGER (-32767..32767)\n"
"# -- LSB units are 1 cm.\n"
"int16 large\n"
"================================================================================\n"
"MSG: j2735_msgs/OffsetYaxis\n"
"#\n"
"# OffsetYaxis.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# 	-- A path X offset value for translations of the\n"
"# 	-- path's points when creating translated lanes.\n"
"# 	-- The values found in the reference lane are\n"
"# 	-- all offset based on the X and Y values from\n"
"# 	-- the coordinates of the reference lane's\n"
"# 	-- initial path point.\n"
"# offsetYaxis CHOICE {\n"
"# 		small DrivenLineOffsetSm,\n"
"# 		large DrivenLineOffsetLg\n"
"# 		},\n"
"\n"
"uint8 choice\n"
"uint8 SMALL=0\n"
"uint8 LARGE=1\n"
"\n"
"# The DrivenLineOffsetSmall data element is an integer value expressing the offset in a defined axis from a reference\n"
"# lane number from which a computed lane is offset.\n"
"# DrivenLineOffsetSm ::= INTEGER (-2047..2047)\n"
"# -- LSB units are 1 cm.\n"
"int16 small\n"
"\n"
"\n"
"# The DE_DrivenLineOffsetLarge data element is an integer value expressing the offset in a defined axis from a\n"
"# reference lane number from which a computed lane is offset.\n"
"# DrivenLineOffsetLg ::= INTEGER (-32767..32767)\n"
"# -- LSB units are 1 cm.\n"
"int16 large\n"
;
  }

  static const char* value(const ::j2735_msgs::ComputedLane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::ComputedLane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reference_lane_id);
      stream.next(m.offset_x_axis);
      stream.next(m.offset_y_axis);
      stream.next(m.rotateXY);
      stream.next(m.rotatexy_exists);
      stream.next(m.scale_x_axis);
      stream.next(m.scale_x_axis_exists);
      stream.next(m.scale_y_axis);
      stream.next(m.scale_y_axis_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ComputedLane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::ComputedLane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::ComputedLane_<ContainerAllocator>& v)
  {
    s << indent << "reference_lane_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.reference_lane_id);
    s << indent << "offset_x_axis: ";
    s << std::endl;
    Printer< ::j2735_msgs::OffsetXaxis_<ContainerAllocator> >::stream(s, indent + "  ", v.offset_x_axis);
    s << indent << "offset_y_axis: ";
    s << std::endl;
    Printer< ::j2735_msgs::OffsetYaxis_<ContainerAllocator> >::stream(s, indent + "  ", v.offset_y_axis);
    s << indent << "rotateXY: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rotateXY);
    s << indent << "rotatexy_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rotatexy_exists);
    s << indent << "scale_x_axis: ";
    Printer<int16_t>::stream(s, indent + "  ", v.scale_x_axis);
    s << indent << "scale_x_axis_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scale_x_axis_exists);
    s << indent << "scale_y_axis: ";
    Printer<int16_t>::stream(s, indent + "  ", v.scale_y_axis);
    s << indent << "scale_y_axis_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.scale_y_axis_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_COMPUTEDLANE_H
