// Generated by gencpp from file j2735_msgs/NodeAttributeSetXY.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_NODEATTRIBUTESETXY_H
#define J2735_MSGS_MESSAGE_NODEATTRIBUTESETXY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/NodeAttributeXYList.h>
#include <j2735_msgs/SegmentAttributeXYList.h>
#include <j2735_msgs/SegmentAttributeXYList.h>
#include <j2735_msgs/LaneDataAttributeList.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct NodeAttributeSetXY_
{
  typedef NodeAttributeSetXY_<ContainerAllocator> Type;

  NodeAttributeSetXY_()
    : local_node()
    , local_node_exists(false)
    , disabled()
    , disabled_exists(false)
    , enabled()
    , enabled_exists(false)
    , data()
    , data_exists(false)
    , dWitdh(0.0)
    , dWitdh_exists(false)
    , dElevation(0.0)
    , dElevation_exists(false)  {
    }
  NodeAttributeSetXY_(const ContainerAllocator& _alloc)
    : local_node(_alloc)
    , local_node_exists(false)
    , disabled(_alloc)
    , disabled_exists(false)
    , enabled(_alloc)
    , enabled_exists(false)
    , data(_alloc)
    , data_exists(false)
    , dWitdh(0.0)
    , dWitdh_exists(false)
    , dElevation(0.0)
    , dElevation_exists(false)  {
  (void)_alloc;
    }



   typedef  ::j2735_msgs::NodeAttributeXYList_<ContainerAllocator>  _local_node_type;
  _local_node_type local_node;

   typedef uint8_t _local_node_exists_type;
  _local_node_exists_type local_node_exists;

   typedef  ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator>  _disabled_type;
  _disabled_type disabled;

   typedef uint8_t _disabled_exists_type;
  _disabled_exists_type disabled_exists;

   typedef  ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator>  _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _enabled_exists_type;
  _enabled_exists_type enabled_exists;

   typedef  ::j2735_msgs::LaneDataAttributeList_<ContainerAllocator>  _data_type;
  _data_type data;

   typedef uint8_t _data_exists_type;
  _data_exists_type data_exists;

   typedef float _dWitdh_type;
  _dWitdh_type dWitdh;

   typedef uint8_t _dWitdh_exists_type;
  _dWitdh_exists_type dWitdh_exists;

   typedef float _dElevation_type;
  _dElevation_type dElevation;

   typedef uint8_t _dElevation_exists_type;
  _dElevation_exists_type dElevation_exists;





  typedef boost::shared_ptr< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> const> ConstPtr;

}; // struct NodeAttributeSetXY_

typedef ::j2735_msgs::NodeAttributeSetXY_<std::allocator<void> > NodeAttributeSetXY;

typedef boost::shared_ptr< ::j2735_msgs::NodeAttributeSetXY > NodeAttributeSetXYPtr;
typedef boost::shared_ptr< ::j2735_msgs::NodeAttributeSetXY const> NodeAttributeSetXYConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator1> & lhs, const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator2> & rhs)
{
  return lhs.local_node == rhs.local_node &&
    lhs.local_node_exists == rhs.local_node_exists &&
    lhs.disabled == rhs.disabled &&
    lhs.disabled_exists == rhs.disabled_exists &&
    lhs.enabled == rhs.enabled &&
    lhs.enabled_exists == rhs.enabled_exists &&
    lhs.data == rhs.data &&
    lhs.data_exists == rhs.data_exists &&
    lhs.dWitdh == rhs.dWitdh &&
    lhs.dWitdh_exists == rhs.dWitdh_exists &&
    lhs.dElevation == rhs.dElevation &&
    lhs.dElevation_exists == rhs.dElevation_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator1> & lhs, const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e75cafda077f3683a1724bd1ccd8baf4";
  }

  static const char* value(const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe75cafda077f3683ULL;
  static const uint64_t static_value2 = 0xa1724bd1ccd8baf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/NodeAttributeSetXY";
  }

  static const char* value(const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# NodeAttributeSetXY.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_NodeAttributeSetXY is a data frame used to convey one or more changes in the attribute set which occur\n"
"# at the node point at which it is used. Some of these attributes persist until the end of the lane or until changed again or\n"
"# turned off.\n"
"#\n"
"# NodeAttributeSetXY ::= SEQUENCE {\n"
"# localNode NodeAttributeXYList OPTIONAL,\n"
"# -- Attribute states which pertain to this node point\n"
"# disabled SegmentAttributeXYList OPTIONAL,\n"
"# -- Attribute states which are disabled at this node point\n"
"# enabled SegmentAttributeXYList OPTIONAL,\n"
"# -- Attribute states which are enabled at this node point\n"
"# -- and which remain enabled until disabled or the lane ends\n"
"# data LaneDataAttributeList OPTIONAL,\n"
"# -- Attributes which require an additional data values\n"
"# -- some of these are local to the node point, while others\n"
"# -- persist with the provided values until changed\n"
"# -- and this is indicated in each entry\n"
"# dWidth Offset-B10 OPTIONAL,\n"
"# -- A value added to the current lane width\n"
"# -- at this node and from this node onwards, in 1cm steps\n"
"# -- lane width between nodes are a linear taper between pts\n"
"# -- the value of zero shall not be sent here\n"
"# dElevation Offset-B10 OPTIONAL,\n"
"# -- A value added to the current Elevation\n"
"# -- at this node from this node onwards, in 10cm steps\n"
"# -- elevations between nodes are a linear taper between pts\n"
"# -- the value of zero shall not be sent here\n"
"# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-NodeAttributeSetXY}}OPTIONAL,\n"
"# ...\n"
"# }\n"
"\n"
"j2735_msgs/NodeAttributeXYList local_node\n"
"bool local_node_exists\n"
"\n"
"j2735_msgs/SegmentAttributeXYList disabled\n"
"bool disabled_exists\n"
"\n"
"j2735_msgs/SegmentAttributeXYList enabled\n"
"bool enabled_exists\n"
"\n"
"j2735_msgs/LaneDataAttributeList data\n"
"bool data_exists\n"
"\n"
"# Offset-B10 ::= INTEGER (-512..511)\n"
"# -- a range of +- 5.11 meters\n"
"float32 dWitdh\n"
"bool dWitdh_exists\n"
"\n"
"float32 dElevation\n"
"bool dElevation_exists\n"
"\n"
"# regional #TODO: RegionalExtensions are not yet implemented in asn1c\n"
"================================================================================\n"
"MSG: j2735_msgs/NodeAttributeXYList\n"
"#\n"
"# NodeAttributeXYList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The NodeAttributeXYList data frame consists of a list of NodeAttributeXY entries.\n"
"#\n"
"# NodeAttributeXYList ::= SEQUENCE (SIZE(1..8)) OF NodeAttributeXY\n"
"\n"
"j2735_msgs/NodeAttributeXY[] node_attribute_xy_List\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/NodeAttributeXY\n"
"#\n"
"# NodeAttributeXY.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_NodeAttributeXY data element is an enumerated list of attributes which can pertain to the current node\n"
"# point.\n"
"#\n"
"# NodeAttributeXY ::= ENUMERATED {\n"
"# -- Various values which pertain only to the current node point\n"
"#\n"
"# -- General Items\n"
"# reserved,\n"
"# stopLine,		-- point where a mid-path stop line exists\n"
"# 			-- See also 'do not block' for segments\n"
"# -- Path finish details\n"
"# roundedCapStyleA, 	-- Used to control final path rounded end shape\n"
"# 		   	-- with edge of curve at final point in a circle\n"
"# roundedCapStyleB,	-- Used to control final path rounded end shape\n"
"# 			-- with edge of curve extending 50% of width past\n"
"# 			-- final point in a circle\n"
"#\n"
"# -- Topography Points (items with no concept of a distance along the path)\n"
"# mergePoint,		-- Japan merge with 1 or more lanes\n"
"# divergePoint,		-- Japan diverge with 1 or more lanes\n"
"# downstreamStopLine,	-- Japan style downstream intersection\n"
"# 			-- (a 2nd intersection) stop line\n"
"# downstreamStartNode, 	-- Japan style downstream intersection\n"
"# 			-- (a 2nd intersection) start node\n"
"#\n"
"# -- Pedestrian Support Attributes\n"
"# closedToTraffic,	-- where a pedestrian may NOT go\n"
"# 			-- to be used during construction events\n"
"# safeIsland,		-- a pedestrian safe stopping point\n"
"# 			-- also called a traffic island\n"
"# 			-- This usage described a point feature on a path,\n"
"# 			-- other entries can describe a path\n"
"# curbPresentAtStepOff, 	-- the sidewalk to street curb is NOT\n"
"# 			-- angled where it meets the edge of the\n"
"# 			-- roadway (user must step up/down)\n"
"# -- Lane geometry details (see standard for defined shapes)\n"
"# hydrantPresent,		-- Or other services access\n"
"# ...\n"
"# }\n"
"\n"
"\n"
"uint8  node_attribute_xy\n"
"\n"
"# enumeration values for status:\n"
"uint8 RESERVED=0\n"
"uint8 STOPLINE=1\n"
"uint8 ROUNDEDCAPSTYLEA=2\n"
"uint8 ROUNDEDCAPSTYLEB=3\n"
"uint8 MERGEPOINT=4\n"
"uint8 DIVERGEPOINT=5\n"
"uint8 DOWNSTREAMSTOPLINE=6\n"
"uint8 DOWNSTREAMSTARTNODE=7\n"
"uint8 CLOSEDTOTRAFFIC=8\n"
"uint8 SAFEISLAND=9\n"
"uint8 CURBPRESENTATSTEPOFF=10\n"
"uint8 HYDRANTPRESENT=11\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/SegmentAttributeXYList\n"
"#\n"
"# NodeAttributeXYList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"#The DF_SegmentAttributeXYList data frame consists of a list of SegmentAttributeXY entries.\n"
"\n"
"#SegmentAttributeXYList ::= SEQUENCE (SIZE(1..8)) OF SegmentAttributeXY\n"
"\n"
"j2735_msgs/SegmentAttributeXY[] segment_attribute_xy\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/SegmentAttributeXY\n"
"#\n"
"# SegmentAttributeXY.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_SegmentAttributeXY data element is an enumerated list of attributes about the current lane segment which\n"
"# may be enabled or disabled to indicate the presence or absence of the selected attribute on the segment.\n"
"#\n"
"# SegmentAttributeXY ::= ENUMERATED {\n"
"# -- Various values which can be Enabled and Disabled for a lane segment\n"
"#\n"
"# -- General Items\n"
"# reserved	,\n"
"# doNotBlock	, 	-- segment where a vehicle\n"
"# 		  	-- may not come to a stop\n"
"# whiteLine	, 	-- segment where lane crossing not allowed\n"
"# 		  	-- such as the final few meters of a lane\n"
"#\n"
"# -- Porous Lane states, merging, turn outs, parking etc.\n"
"# mergingLaneLeft,  	-- indicates porous lanes\n"
"# mergingLaneRight,\n"
"# curbOnLeft,	  	-- indicates presence of curbs\n"
"# curbOnRight,\n"
"# loadingzoneOnLeft,	-- loading or drop off zones\n"
"# loadingzoneOnRight,\n"
"# turnOutPointOnLeft,	-- opening to adjacent street/alley/road\n"
"# turnOutPointOnRight,\n"
"# adjacentParkingOnLeft, 	-- side of road parking\n"
"# adjacentParkingOnRight,\n"
"#\n"
"# -- Bike Lane Needs\n"
"# adjacentBikeLaneOnLeft, -- presence of marked bike lanes\n"
"# adjacentBikeLaneOnRight,\n"
"# sharedBikeLane, 	-- right of way is shared with bikes\n"
"# 			-- who may occupy entire lane width\n"
"# bikeBoxInFront,\n"
"#\n"
"# -- Transit Needs\n"
"# transitStopOnLeft,	-- any form of bus/transit loading\n"
"# 			-- with pull in-out access to lane on left\n"
"# transitStopOnRight, 	-- any form of bus/transit loading\n"
"# 			-- with pull in-out access to lane on right\n"
"# transitStopInLane, 	-- any form of bus/transit loading\n"
"# 			-- in mid path of the lane\n"
"# sharedWithTrackedVehicle, -- lane is shared with train or trolley\n"
"# 			-- not used for crossing tracks\n"
"#\n"
"# -- Pedestrian Support Attributes\n"
"# safeIsland, 		-- begin/end a safety island in path\n"
"# lowCurbsPresent, 	-- for ADA support\n"
"# rumbleStripPresent, 	-- for ADA support\n"
"# audibleSignalingPresent, -- for ADA support\n"
"# adaptiveTimingPresent, 	-- for ADA support\n"
"# rfSignalRequestPresent, -- Supports RF push to walk technologies\n"
"# partialCurbIntrusion, 	-- path is blocked by a median or curb\n"
"# 			-- but at least 1 meter remains open for use\n"
"# 			-- and at-grade passage\n"
"#\n"
"# -- Lane geometry details\n"
"# taperToLeft,		-- Used to control final path shape\n"
"# taperToRight,		-- Used to control final path shape\n"
"# taperToCenterLine,	-- Used to control final path shape\n"
"#\n"
"# -- Parking Lane and Curb Attributes\n"
"# parallelParking, 	-- Parking at an angle with the street\n"
"# freeParking, 		-- no restriction on use of parking\n"
"# timeRestrictionsOnParking , -- Parking is not permitted at all times\n"
"# 			-- typically used when the 'parking' lane\n"
"# 			-- becomes a driving lane at times\n"
"# costToPark, 		-- Used where parking has a cost\n"
"# midBlockCurbPresent, 	-- a protruding curb near lane edge\n"
"# unEvenPavementPresent, 	-- a disjoint height at lane edge\n"
"# ...\n"
"# }\n"
"\n"
"uint8  segment_attribute_xy\n"
"\n"
"uint8 RESERVED=0\n"
"uint8 DONOTBLOCK=1\n"
"uint8 WHITELINE=2\n"
"uint8 MERGINGLANELEFT=3\n"
"uint8 MERGINGLANERIGHT=4\n"
"uint8 CURBONLEFT=5\n"
"uint8 CURBONRIGHT=6\n"
"uint8 LOADINGZONEONLEFT=7\n"
"uint8 LOADINGZONEONRIGHT=8\n"
"uint8 TURNOUTPOINTONLEFT=9\n"
"uint8 TURNOUTPOINTONRIGHT=10\n"
"uint8 ADJACENTPARKINGONLEFT=11\n"
"uint8 ADJACENTPARKINGONRIGHT=12\n"
"uint8 ADJACENTBIKELANEONLEFT=13\n"
"uint8 ADJACENTBIKELANEONRIGHT=14\n"
"uint8 SHAREDBIKELANE=15\n"
"uint8 BIKEBOXINFRONT=16\n"
"uint8 TRANSITSTOPONLEFT=17\n"
"uint8 TRANSITSTOPONRIGHT=18\n"
"uint8 TRANSITSTOPINLANE=19\n"
"uint8 SHAREDWITHTRACKEDVEHICLE=20\n"
"uint8 SAFEISLAND=21\n"
"uint8 LOWCURBSPRESENT=22\n"
"uint8 RUMBLESTRIPPRESENT=23\n"
"uint8 AUDIBLESIGNALINGPRESENT=24\n"
"uint8 ADAPTIVETIMINGPRESENT=25\n"
"uint8 RFSIGNALREQUESTPRESENT=26\n"
"uint8 PARTIALCURBINTRUSION=27\n"
"uint8 TAPERTOLEFT=28\n"
"uint8 TAPERTORIGHT=29\n"
"uint8 TAPERTOCENTERLINE=30\n"
"uint8 PARALLELPARKING=31\n"
"uint8 FREEPARKING=32\n"
"uint8 TIMERESTRICTIONSONPARKING=33\n"
"uint8 COSTTOPARK=34\n"
"uint8 MIDBLOCKCURBPRESENT=35\n"
"uint8 UNEVENPAVEMENTPRESENT=36\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneDataAttributeList\n"
"#\n"
"# LaneDataAttributeList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneDataAttributeList data frame consists of a list of LaneDataAttribute entries.\n"
"#\n"
"# LaneDataAttributeList ::= SEQUENCE (SIZE(1..8)) OF LaneDataAttribute\n"
"\n"
"j2735_msgs/LaneDataAttribute[] lane_attribute_list\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneDataAttribute\n"
"\n"
"\n"
"# The data frame DF_LaneDataAttribute is used to relate an attribute and a control value at a node point or along a\n"
"# lane segment from an enumerated list of defined choices. It is then followed by a defined data value associated with it and\n"
"# which is defined elsewhere in this standard.\n"
"\n"
"\n"
"# LaneDataAttribute ::= CHOICE {\n"
"# -- Segment attribute types and the data needed for each\n"
"# pathEndPointAngle DeltaAngle,\n"
"# -- adjusts final point/width slant\n"
"# -- of the lane to align with the stop line\n"
"# laneCrownPointCenter RoadwayCrownAngle,\n"
"# -- sets the canter of the road bed\n"
"# -- from centerline point\n"
"# laneCrownPointLeft RoadwayCrownAngle,\n"
"# -- sets the canter of the road bed\n"
"# -- from left edge\n"
"# laneCrownPointRight RoadwayCrownAngle,\n"
"# -- sets the canter of the road bed\n"
"# -- from right edge\n"
"# laneAngle MergeDivergeNodeAngle,\n"
"# -- the angle or direction of another lane\n"
"# -- this is required to support Japan style\n"
"# -- when a merge point angle is required\n"
"# speedLimits SpeedLimitList,\n"
"# -- Reference regulatory speed limits\n"
"# -- used by all segments\n"
"# -- Add others as needed, in regional space\n"
"# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-LaneDataAttribute}},\n"
"# ...\n"
"# }\n"
"\n"
"uint8 choice\n"
"uint8 PATH_END_POINT_ANGLE=0\n"
"uint8 LANE_CROWN_POINT_CENTER=1\n"
"uint8 LANE_CROWN_POINT_LEFT=2\n"
"uint8 LANE_CROWN_POINT_RIGHT=3\n"
"uint8 LANE_ANGLE=4\n"
"uint8 SPEED_LIMITS=5\n"
"\n"
"# DeltaAngle ::= INTEGER (-150..150)\n"
"# -- With an angle range from\n"
"# -- negative 150 to positive 150\n"
"# -- in one degree steps where zero is directly\n"
"# -- along the axis or the lane center line as defined by the\n"
"# -- two closest points\n"
"#\n"
"# The DeltaAngle data element provides the final angle used in the last point of the lane path.\n"
"# Used to \"cant\" the stop line of the lane.\n"
"\n"
"int16 path_end_point_angle\n"
"\n"
"# RoadwayCrownAngle ::= INTEGER (-128..127)\n"
"# -- In LSB units of 0.3 degrees of angle\n"
"# -- over a range of -38.1 to + 38.1 degrees\n"
"# -- The value -128 shall be used for unknown\n"
"# -- The value zero shall be used for angles\n"
"# -- which are between -0.15 and +0.15\n"
"#\n"
"# The RoadwayCrownAngle data element relates the gross tangential angle of the roadway surface with respect to\n"
"# the local horizontal axis and is measured at the indicated part of the lane.\n"
"\n"
"int8 lane_crown_point_center\n"
"int8 lane_crown_point_right\n"
"int8 lane_crown_point_left\n"
"\n"
"# MergeDivergeNodeAngle ::= INTEGER (-180..180)\n"
"# -- In units of 1.5 degrees from north\n"
"# -- the value -180 shall be used to represent\n"
"# -- data is not available or unknown\n"
"int16 lane_angle\n"
"\n"
"# SpeedLimitList ::= SEQUENCE (SIZE(1..9)) OF RegulatorySpeedLimit\n"
"j2735_msgs/SpeedLimitList speed_limits\n"
"\n"
"# regional #TODO: RegionalExtensions are not yet implemented in asn1c\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/SpeedLimitList\n"
"#\n"
"# SpeedLimitList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# SpeedLimitList ::= SEQUENCE (SIZE(1..9)) OF RegulatorySpeedLimit\n"
"\n"
"#A list of RegulatorySpeedLimit\n"
"j2735_msgs/RegulatorySpeedLimit[] speed_limits\n"
"================================================================================\n"
"MSG: j2735_msgs/RegulatorySpeedLimit\n"
"#\n"
"# RegulatorySpeedLimit.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"# Used to convey a regulatory speed about a lane, lanes, or roadway segment.\n"
"\n"
"# RegulatorySpeedLimit ::= SEQUENCE {\n"
"# type SpeedLimitType,\n"
"# -- The type of regulatory speed which follows\n"
"j2735_msgs/SpeedLimitType type\n"
"\n"
"# speed Velocity\n"
"# Velocity ::= INTEGER (0..8191) -- Units of 0.02 m/s\n"
"#-- The value 8191 indicates that velocity is unavailable\n"
"float64 speed\n"
"================================================================================\n"
"MSG: j2735_msgs/SpeedLimitType\n"
"# SpeedLimitType.msg\n"
"#\n"
"# The SpeedLimitType data element relates the type of speed limit to which a given speed refers.\n"
"#\n"
"# SpeedLimitType ::= ENUMERATED {\n"
"#\n"
"# unknown, -- Speed limit type not available\n"
"# maxSpeedInSchoolZone, -- Only sent when the limit is active\n"
"# maxSpeedInSchoolZoneWhenChildrenArePresent, -- Sent at any time\n"
"# maxSpeedInConstructionZone, -- Used for work zones, incident zones, etc. where a reduced speed is present\n"
"#\n"
"# vehicleMinSpeed,\n"
"# vehicleMaxSpeed, -- Regulatory speed limit for general traffic\n"
"# vehicleNightMaxSpeed,\n"
"#\n"
"# truckMinSpeed,\n"
"# truckMaxSpeed,\n"
"# truckNightMaxSpeed,\n"
"#\n"
"# vehiclesWithTrailersMinSpeed,\n"
"# vehiclesWithTrailersMaxSpeed,\n"
"# vehiclesWithTrailersNightMaxSpeed,\n"
"# ...\n"
"# }\n"
"\n"
"uint8 speed_limit_type\n"
"\n"
"uint8 UNKNOWN=0\n"
"uint8 MAXSPEEDINSCHOOLZONE=1\n"
"uint8 MAXSPEEDINSCHOOLZONEWHENCHILDRENAREPRESENT=2\n"
"uint8 MAXSPEEDINCONSTRUCTIONZONE=3\n"
"uint8 VEHICLEMINSPEED=4\n"
"uint8 VEHICLEMAXSPEED=5\n"
"uint8 VEHICLENIGHTMAXSPEED=6\n"
"uint8 TRUCKMINSPEED=7\n"
"uint8 TRUCKMAXSPEED=8\n"
"uint8 TRUCKNIGHTMAXSPEED=9\n"
"uint8 VEHICLESWITHTRAILERSMINSPEED=10\n"
"uint8 VEHICLESWITHTRAILERSMAXSPEED=11\n"
"uint8 VEHICLESWITHTRAILERSNIGHTMAXSPEED=12\n"
;
  }

  static const char* value(const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.local_node);
      stream.next(m.local_node_exists);
      stream.next(m.disabled);
      stream.next(m.disabled_exists);
      stream.next(m.enabled);
      stream.next(m.enabled_exists);
      stream.next(m.data);
      stream.next(m.data_exists);
      stream.next(m.dWitdh);
      stream.next(m.dWitdh_exists);
      stream.next(m.dElevation);
      stream.next(m.dElevation_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeAttributeSetXY_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::NodeAttributeSetXY_<ContainerAllocator>& v)
  {
    s << indent << "local_node: ";
    s << std::endl;
    Printer< ::j2735_msgs::NodeAttributeXYList_<ContainerAllocator> >::stream(s, indent + "  ", v.local_node);
    s << indent << "local_node_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.local_node_exists);
    s << indent << "disabled: ";
    s << std::endl;
    Printer< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >::stream(s, indent + "  ", v.disabled);
    s << indent << "disabled_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disabled_exists);
    s << indent << "enabled: ";
    s << std::endl;
    Printer< ::j2735_msgs::SegmentAttributeXYList_<ContainerAllocator> >::stream(s, indent + "  ", v.enabled);
    s << indent << "enabled_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled_exists);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::j2735_msgs::LaneDataAttributeList_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
    s << indent << "data_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data_exists);
    s << indent << "dWitdh: ";
    Printer<float>::stream(s, indent + "  ", v.dWitdh);
    s << indent << "dWitdh_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dWitdh_exists);
    s << indent << "dElevation: ";
    Printer<float>::stream(s, indent + "  ", v.dElevation);
    s << indent << "dElevation_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dElevation_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_NODEATTRIBUTESETXY_H
