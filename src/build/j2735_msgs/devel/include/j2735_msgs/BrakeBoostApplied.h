// Generated by gencpp from file j2735_msgs/BrakeBoostApplied.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_BRAKEBOOSTAPPLIED_H
#define J2735_MSGS_MESSAGE_BRAKEBOOSTAPPLIED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct BrakeBoostApplied_
{
  typedef BrakeBoostApplied_<ContainerAllocator> Type;

  BrakeBoostApplied_()
    : brake_boost_applied(0)  {
    }
  BrakeBoostApplied_(const ContainerAllocator& _alloc)
    : brake_boost_applied(0)  {
  (void)_alloc;
    }



   typedef uint8_t _brake_boost_applied_type;
  _brake_boost_applied_type brake_boost_applied;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNAVAILABLE)
  #undef UNAVAILABLE
#endif
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(ON)
  #undef ON
#endif

  enum {
    UNAVAILABLE = 0u,
    OFF = 1u,
    ON = 2u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> const> ConstPtr;

}; // struct BrakeBoostApplied_

typedef ::j2735_msgs::BrakeBoostApplied_<std::allocator<void> > BrakeBoostApplied;

typedef boost::shared_ptr< ::j2735_msgs::BrakeBoostApplied > BrakeBoostAppliedPtr;
typedef boost::shared_ptr< ::j2735_msgs::BrakeBoostApplied const> BrakeBoostAppliedConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator1> & lhs, const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator2> & rhs)
{
  return lhs.brake_boost_applied == rhs.brake_boost_applied;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator1> & lhs, const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff8787fa0a36560577484f92f3640ad7";
  }

  static const char* value(const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff8787fa0a365605ULL;
  static const uint64_t static_value2 = 0x77484f92f3640ad7ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/BrakeBoostApplied";
  }

  static const char* value(const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# BrakeBoostApplied.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"\n"
"#BrakeBoostApplied ::= ENUMERATED {\n"
"#   unavailable   (0), -- Vehicle not equipped with brake boost\n"
"#                      -- or brake boost data is unavailable\n"
"#   off           (1), -- Vehicle's brake boost is off\n"
"#   on            (2)  -- Vehicle's brake boost is on (applied)\n"
"#   }\n"
"#   \n"
"\n"
"uint8  brake_boost_applied\n"
"\n"
"# enumeration values for status:\n"
"uint8  UNAVAILABLE=0\n"
"uint8  OFF=1\n"
"uint8  ON=2\n"
;
  }

  static const char* value(const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brake_boost_applied);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BrakeBoostApplied_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::BrakeBoostApplied_<ContainerAllocator>& v)
  {
    s << indent << "brake_boost_applied: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_boost_applied);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_BRAKEBOOSTAPPLIED_H
