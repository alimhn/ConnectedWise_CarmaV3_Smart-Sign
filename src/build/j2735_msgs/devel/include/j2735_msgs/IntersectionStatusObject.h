// Generated by gencpp from file j2735_msgs/IntersectionStatusObject.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_INTERSECTIONSTATUSOBJECT_H
#define J2735_MSGS_MESSAGE_INTERSECTIONSTATUSOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct IntersectionStatusObject_
{
  typedef IntersectionStatusObject_<ContainerAllocator> Type;

  IntersectionStatusObject_()
    : intersection_status_object(0)  {
    }
  IntersectionStatusObject_(const ContainerAllocator& _alloc)
    : intersection_status_object(0)  {
  (void)_alloc;
    }



   typedef uint16_t _intersection_status_object_type;
  _intersection_status_object_type intersection_status_object;





  typedef boost::shared_ptr< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> const> ConstPtr;

}; // struct IntersectionStatusObject_

typedef ::j2735_msgs::IntersectionStatusObject_<std::allocator<void> > IntersectionStatusObject;

typedef boost::shared_ptr< ::j2735_msgs::IntersectionStatusObject > IntersectionStatusObjectPtr;
typedef boost::shared_ptr< ::j2735_msgs::IntersectionStatusObject const> IntersectionStatusObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator1> & lhs, const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator2> & rhs)
{
  return lhs.intersection_status_object == rhs.intersection_status_object;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator1> & lhs, const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "189e3f94ed4f7d42fc526476bb41da86";
  }

  static const char* value(const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x189e3f94ed4f7d42ULL;
  static const uint64_t static_value2 = 0xfc526476bb41da86ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/IntersectionStatusObject";
  }

  static const char* value(const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# IntersectionStatusObject.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The Intersection Status Object contains Advanced Traffic Controller (ATC) status information that may be sent to\n"
"# local OBUs as part of the SPAT process.\n"
"\n"
"# IntersectionStatusObject ::= BIT STRING {\n"
"# manualControlIsEnabled (0),\n"
"# -- Timing reported is per programmed values, etc. but person\n"
"# -- at cabinet can manually request that certain intervals are\n"
"# -- terminated early (e.g. green).\n"
"# stopTimeIsActivated (1),\n"
"# -- And all counting/timing has stopped.\n"
"# failureFlash (2),\n"
"# -- Above to be used for any detected hardware failures,\n"
"# -- e.g. conflict monitor as well as for police flash\n"
"# preemptIsActive (3),\n"
"# signalPriorityIsActive (4),\n"
"# -- Additional states\n"
"# fixedTimeOperation (5),\n"
"# -- Schedule of signals is based on time only\n"
"# -- (i.e. the state can be calculated)\n"
"# trafficDependentOperation (6),\n"
"# -- Operation is based on different levels of traffic parameters\n"
"# -- (requests, duration of gaps or more complex parameters)\n"
"# standbyOperation (7),\n"
"# -- Controller: partially switched off or partially amber flashing\n"
"# failureMode (8),\n"
"# -- Controller has a problem or failure in operation\n"
"# off (9),\n"
"# -- Controller is switched off\n"
"# -- Related to MAP and SPAT bindings\n"
"# recentMAPmessageUpdate (10),\n"
"# -- Map revision with content changes\n"
"# recentChangeInMAPassignedLanesIDsUsed (11),\n"
"# -- Change in MAP's assigned lanes used (lane changes)\n"
"# -- Changes in the active lane list description\n"
"# noValidMAPisAvailableAtThisTime (12),\n"
"# -- MAP (and various lanes indexes) not available\n"
"# noValidSPATisAvailableAtThisTime (13)\n"
"# -- SPAT system is not working at this time\n"
"# -- Bits 14,15 reserved at this time and shall be zero\n"
"# } (SIZE(16))\n"
"\n"
"uint16 intersection_status_object\n"
;
  }

  static const char* value(const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intersection_status_object);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntersectionStatusObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::IntersectionStatusObject_<ContainerAllocator>& v)
  {
    s << indent << "intersection_status_object: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.intersection_status_object);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_INTERSECTIONSTATUSOBJECT_H
