// Generated by gencpp from file j2735_msgs/Id64b.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_ID64B_H
#define J2735_MSGS_MESSAGE_ID64B_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct Id64b_
{
  typedef Id64b_<ContainerAllocator> Type;

  Id64b_()
    : id()  {
      id.assign(0);
  }
  Id64b_(const ContainerAllocator& _alloc)
    : id()  {
  (void)_alloc;
      id.assign(0);
  }



   typedef boost::array<uint8_t, 8>  _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::j2735_msgs::Id64b_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::Id64b_<ContainerAllocator> const> ConstPtr;

}; // struct Id64b_

typedef ::j2735_msgs::Id64b_<std::allocator<void> > Id64b;

typedef boost::shared_ptr< ::j2735_msgs::Id64b > Id64bPtr;
typedef boost::shared_ptr< ::j2735_msgs::Id64b const> Id64bConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::Id64b_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::Id64b_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::Id64b_<ContainerAllocator1> & lhs, const ::j2735_msgs::Id64b_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::Id64b_<ContainerAllocator1> & lhs, const ::j2735_msgs::Id64b_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::Id64b_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::Id64b_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::Id64b_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::Id64b_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::Id64b_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::Id64b_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::Id64b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f930fa161339760af1ea9b5fe1cfec73";
  }

  static const char* value(const ::j2735_msgs::Id64b_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf930fa161339760aULL;
  static const uint64_t static_value2 = 0xf1ea9b5fe1cfec73ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::Id64b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/Id64b";
  }

  static const char* value(const ::j2735_msgs::Id64b_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::Id64b_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Id64b.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# Id64b ::= OCTET STRING (SIZE(8)) -- 8-byte binary value that can be used for shorter unique ids\n"
"\n"
"uint8[8] id\n"
;
  }

  static const char* value(const ::j2735_msgs::Id64b_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::Id64b_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Id64b_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::Id64b_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::Id64b_<ContainerAllocator>& v)
  {
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.id[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_ID64B_H
