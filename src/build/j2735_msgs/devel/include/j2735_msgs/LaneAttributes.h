// Generated by gencpp from file j2735_msgs/LaneAttributes.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_LANEATTRIBUTES_H
#define J2735_MSGS_MESSAGE_LANEATTRIBUTES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/LaneDirection.h>
#include <j2735_msgs/LaneSharing.h>
#include <j2735_msgs/LaneTypeAttributes.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct LaneAttributes_
{
  typedef LaneAttributes_<ContainerAllocator> Type;

  LaneAttributes_()
    : directional_use()
    , shared_with()
    , laneType()  {
    }
  LaneAttributes_(const ContainerAllocator& _alloc)
    : directional_use(_alloc)
    , shared_with(_alloc)
    , laneType(_alloc)  {
  (void)_alloc;
    }



   typedef  ::j2735_msgs::LaneDirection_<ContainerAllocator>  _directional_use_type;
  _directional_use_type directional_use;

   typedef  ::j2735_msgs::LaneSharing_<ContainerAllocator>  _shared_with_type;
  _shared_with_type shared_with;

   typedef  ::j2735_msgs::LaneTypeAttributes_<ContainerAllocator>  _laneType_type;
  _laneType_type laneType;





  typedef boost::shared_ptr< ::j2735_msgs::LaneAttributes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::LaneAttributes_<ContainerAllocator> const> ConstPtr;

}; // struct LaneAttributes_

typedef ::j2735_msgs::LaneAttributes_<std::allocator<void> > LaneAttributes;

typedef boost::shared_ptr< ::j2735_msgs::LaneAttributes > LaneAttributesPtr;
typedef boost::shared_ptr< ::j2735_msgs::LaneAttributes const> LaneAttributesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::LaneAttributes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::LaneAttributes_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneAttributes_<ContainerAllocator2> & rhs)
{
  return lhs.directional_use == rhs.directional_use &&
    lhs.shared_with == rhs.shared_with &&
    lhs.laneType == rhs.laneType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::LaneAttributes_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneAttributes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneAttributes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneAttributes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneAttributes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "731dfe4ac04aa870412a17e513859055";
  }

  static const char* value(const ::j2735_msgs::LaneAttributes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x731dfe4ac04aa870ULL;
  static const uint64_t static_value2 = 0x412a17e513859055ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/LaneAttributes";
  }

  static const char* value(const ::j2735_msgs::LaneAttributes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# LaneAttributes.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# directionalUse LaneDirection, -- directions of lane use\n"
"j2735_msgs/LaneDirection directional_use\n"
"\n"
"# sharedWith LaneSharing  -- co-users of the lane path\n"
"j2735_msgs/LaneSharing shared_with\n"
"\n"
"# laneType LaneTypeAttributes, -- specific lane type data\n"
"j2735_msgs/LaneTypeAttributes laneType\n"
"\n"
"# regional RegionalExtension {{REGION.Reg-LaneAttributes}} OPTIONAL\n"
"#TODO: RegionalExtensions are not yet implemented in asn1c\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneDirection\n"
"#\n"
"# LaneDirection.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneDirection data element is used to denote the allowed direction of travel over a lane object. By convention,\n"
"# the lane object is always described from the stop line outwards away from the intersection. Therefore, the ingress\n"
"# direction is from the end of the path to the stop line and the egress direction is from the stop line outwards. It should be\n"
"# noted that some lane objects are not used for travel and that some lane objects allow bi-directional travel.\n"
"#\n"
"# LaneDirection ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# -- Allowed directions of travel in the lane object\n"
"# -- All lanes are described from the stop line outwards\n"
"# ingressPath (0),\n"
"# -- travel from rear of path to front is allowed\n"
"# egressPath (1)\n"
"# -- travel from front of path to rear is allowed\n"
"# -- Notes: No Travel, i.e. the lane object type does not support travel (medians, curbs, etc.)\n"
"# is indicated by not asserting any bit value\n"
"# - Bi-Directional Travel (such as a ped crosswalk) is indicated by asserting both of the bits\n"
"# } (SIZE (2))\n"
"\n"
"uint8 lane_direction\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneSharing\n"
"#\n"
"# LaneSharing.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"#\n"
"# LaneSharing ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# overlappingLaneDescriptionProvided (0),\n"
"# -- Assert when another lane object is present to describe the\n"
"# -- path of the overlapping shared lane\n"
"# -- this construct is not used for lane objects which simply cross\n"
"# multipleLanesTreatedAsOneLane(1),\n"
"# -- Assert if the lane object path and width details represents\n"
"# -- multiple lanes within it that are not further described\n"
"# -- Various modes and type of traffic that may share this lane:\n"
"# otherNonMotorizedTrafficTypes (2), -- horse drawn etc.\n"
"# individualMotorizedVehicleTraffic (3),\n"
"# busVehicleTraffic (4),\n"
"# taxiVehicleTraffic (5),\n"
"# pedestriansTraffic (6),\n"
"# cyclistVehicleTraffic (7),\n"
"# trackedVehicleTraffic (8),\n"
"# pedestrianTraffic (9)\n"
"# } (SIZE (10))\n"
"# -- All zeros would indicate 'not shared' and 'not overlapping'\n"
"\n"
"uint16 lane_sharing\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneTypeAttributes\n"
"#\n"
"# LaneTypeAttributes.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The Lane Type Attributes data frame is used to hold attribute information specific to a given lane type.\n"
"# LaneTypeAttributes ::= CHOICE {\n"
"# vehicle LaneAttributes-Vehicle, -- motor vehicle lanes\n"
"# crosswalk LaneAttributes-Crosswalk, -- pedestrian crosswalks\n"
"# bikeLane LaneAttributes-Bike, -- bike lanes\n"
"# sidewalk LaneAttributes-Sidewalk, -- pedestrian sidewalk paths\n"
"# median LaneAttributes-Barrier, -- medians & channelization\n"
"# striping LaneAttributes-Striping, -- roadway markings\n"
"# trackedVehicle LaneAttributes-TrackedVehicle, -- trains and trolleys\n"
"# parking LaneAttributes-Parking, -- parking and stopping lanes\n"
"# }\n"
"\n"
"uint8 choice\n"
"uint8 VEHICLE=0\n"
"uint8 CROSSWALK=1\n"
"uint8 BIKE_LANE=2\n"
"uint8 SIDEWALK=3\n"
"uint8 MEDIAN=4\n"
"uint8 STRIPING=5\n"
"uint8 TRACKED_VEHICLE=6\n"
"uint8 PARKING=7\n"
"\n"
"j2735_msgs/LaneAttributesVehicle vehicle\n"
"j2735_msgs/LaneAttributesCrosswalk crosswalk\n"
"j2735_msgs/LaneAttributesBike bikeLane\n"
"j2735_msgs/LaneAttributesSidewalk sidewalk\n"
"j2735_msgs/LaneAttributesBarrier median\n"
"j2735_msgs/LaneAttributesStriping striping\n"
"j2735_msgs/LaneAttributesTrackedVehicle trackedVehicle\n"
"j2735_msgs/LaneAttributesParking parking\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneAttributesVehicle\n"
"#\n"
"# LaneAttributesVehicle.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# LaneAttributes-Vehicle ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# isVehicleRevocableLane (0),\n"
"#       -- this lane may be activated or not based\n"
"#       -- on the current SPAT message contents\n"
"#       -- if not asserted, the lane is ALWAYS present\n"
"# isVehicleFlyOverLane (1),\n"
"#       -- path of lane is not at grade\n"
"# hovLaneUseOnly (2),\n"
"# restrictedToBusUse (3),\n"
"# restrictedToTaxiUse(4),\n"
"# restrictedFromPublicUse (5),\n"
"# hasIRbeaconCoverage(6),\n"
"# permissionOnRequest(7)\n"
"#       -- e.g. to inform about a lane for e-cars\n"
"# } (SIZE (8,...))\n"
"\n"
"uint8 lane_attributes_vehicle\n"
"\n"
"uint8 ISVEHICLEREVOCABLELANE=0\n"
"uint8 ISVEHICLEFLYOVERLANE=1\n"
"uint8 HOVLANEUSEONLY=2\n"
"uint8 RESTRICTEDTOBUSUSE=3\n"
"uint8 RESTRICTEDTOTAXIUSE=4\n"
"uint8 RESTRICTEDFROMPUBLICUSE=5\n"
"uint8 HASIRBEACONCOVERAGE=6\n"
"uint8 PERMISSIONONREQUEST=7\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneAttributesCrosswalk\n"
"#\n"
"# LaneAttributesCrosswalk.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"\n"
"# LaneAttributes-Crosswalk ::= BIT STRING {\n"
"# 	-- With bits as defined:\n"
"# 	-- MUTCD provides no suitable \"types\" to use here\n"
"# 	crosswalkRevocableLane (0),\n"
"# 		-- this lane may be activated or not based\n"
"# 		-- on the current SPAT message contents\n"
"# 		-- if not asserted, the lane is ALWAYS present\n"
"# 	bicyleUseAllowed (1),\n"
"# 		-- The path allows bicycle traffic,\n"
"# 		-- if not set, this mode is prohibited\n"
"# 	isXwalkFlyOverLane (2),\n"
"# 		-- path of lane is not at grade\n"
"# 	fixedCycleTime (3),\n"
"# 		-- ped walk phases use preset times\n"
"# 		-- i.e. there is not a 'push to cross' button\n"
"# 	biDirectionalCycleTimes (4),\n"
"# 		-- ped walk phases use different SignalGroupID\n"
"# 		-- for each direction. The first SignalGroupID\n"
"# 		-- in the first Connection represents 'inbound'\n"
"# 		-- flow (the direction of travel towards the first\n"
"# 		-- node point) while second SignalGroupID in the\n"
"# 		-- next Connection entry represents the 'outbound'\n"
"# 		-- flow. And use of RestrictionClassID entries\n"
"# 		-- in the Connect follow this same pattern in pairs.\n"
"# 	hasPushToWalkButton (5),\n"
"# 		-- Has a demand input\n"
"# 	audioSupport (6),\n"
"# 		-- audio crossing cues present\n"
"# 	rfSignalRequestPresent (7),\n"
"# 		-- Supports RF push to walk technologies\n"
"# 	unsignalizedSegmentsPresent (8)\n"
"# 		-- The lane path consists of one of more segments\n"
"# 		-- which are not part of a signal group ID\n"
"# } (SIZE (16))\n"
"\n"
"uint16  lane_attributes_crosswalk\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneAttributesBike\n"
"#\n"
"# LaneAttributesBike.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneAttributes-Bike data element relates specific properties found in a bicycle lane type.\n"
"#\n"
"# LaneAttributes-Bike ::= BIT STRING {\n"
"#	-- With bits as defined:\n"
"#	bikeRevocableLane (0),\n"
"#		-- this lane may be activated or not based\n"
"#		-- on the current SPAT message contents\n"
"#		-- if not asserted, the lane is ALWAYS present\n"
"#	pedestrianUseAllowed (1),\n"
"#		-- The path allows pedestrian traffic,\n"
"#		-- if not set, this mode is prohibited\n"
"#	isBikeFlyOverLane (2),\n"
"#		-- path of lane is not at grade\n"
"#	fixedCycleTime (3),\n"
"#		-- the phases use preset times\n"
"#		-- Bits 7~15 reserved and set to zero\n"
"#	} (SIZE (16))\n"
"\n"
"uint16 lane_attributes_bike\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneAttributesSidewalk\n"
"#\n"
"# LaneAttributesSidewalk.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneAttributes-Sidewalk data element relates specific properties found in a sidewalk lane type\n"
"#\n"
"# LaneAttributes-Sidewalk ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# sidewalk-RevocableLane (0),\n"
"# -- this lane may be activated or not based\n"
"# -- on the current SPAT message contents\n"
"# -- if not asserted, the lane is ALWAYS present\n"
"# bicyleUseAllowed (1),\n"
"# -- The path allows bicycle traffic,\n"
"# -- if not set, this mode is prohibited\n"
"# isSidewalkFlyOverLane (2),\n"
"# -- path of lane is not at grade\n"
"# walkBikes (3)\n"
"# -- bike traffic must dismount and walk\n"
"# -- Bits 4~15 reserved and set to zero\n"
"# } (SIZE (16))\n"
"\n"
"uint16 lane_attributes_sidewalk\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneAttributesBarrier\n"
"#\n"
"# LaneAttributesBarrier.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneAttributes-Barrier data element relates specific properties found in a Barrier\n"
"# or Median lane type (a type of lane object used to separate traffic lanes).\n"
"#\n"
"# LaneAttributes-Barrier ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# median-RevocableLane (0),\n"
"# -- this lane may be activated or not based\n"
"# -- on the current SPAT message contents\n"
"# -- if not asserted, the lane is ALWAYS present\n"
"# median (1),\n"
"# whiteLineHashing (2),\n"
"# stripedLines (3),\n"
"# doubleStripedLines (4),\n"
"# trafficCones (5),\n"
"# constructionBarrier(6),\n"
"# trafficChannels(7),\n"
"# lowCurbs(8),\n"
"# highCurbs(9)\n"
"# -- Bits 10~15 reserved and set to zero\n"
"# } (SIZE (16))\n"
"\n"
"uint16 lane_attributes_barrier\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneAttributesStriping\n"
"#\n"
"# LaneAttributesBarrier.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneAttributes-Striping data element relates specific properties found\n"
"# in various types of ground striping lane types.\n"
"#\n"
"# LaneAttributes-Striping ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# stripeToConnectingLanesRevocableLane(0),\n"
"# -- this lane may be activated or not activated based\n"
"# -- on the current SPAT message contents\n"
"# -- if not asserted, the lane is ALWAYS present\n"
"# stripeDrawOnLeft(1),\n"
"# stripeDrawOnRight(2),\n"
"# -- which side of lane to mark\n"
"# stripeToConnectingLanesLeft(3),\n"
"# stripeToConnectingLanesRight(4),\n"
"# stripeToConnectingLanesAhead(5)\n"
"# -- the stripe type should be\n"
"# -- presented to the user visually\n"
"# -- to reflect stripes in the\n"
"# -- intersection for the type of\n"
"# -- movement indicated\n"
"# -- Bits 6~15 reserved and set to zero\n"
"# } (SIZE (16))\n"
"\n"
"uint16 lane_attributes_striping\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneAttributesTrackedVehicle\n"
"#\n"
"# LaneAttributesTrackedVehicle.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneAttributes-Special data element relates specific properties found\n"
"# in a tracked vehicle lane types (trolley and train lanes).\n"
"# The term \"rail vehicle\" can be considered synonymous.\n"
"# In this case, the term does not relate to vehicle types with tracks or treads.\n"
"#\n"
"# LaneAttributes-TrackedVehicle ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# spec-RevocableLane(0),\n"
"# -- this lane may be activated or not based\n"
"# -- on the current SPAT message contents\n"
"# -- if not asserted, the lane is ALWAYS present\n"
"# spec-commuterRailRoadTrack (1),\n"
"# spec-lightRailRoadTrack(2),\n"
"# spec-heavyRailRoadTrack(3),\n"
"# spec-otherRailType(4)\n"
"# -- Bits 5~15 reserved and set to zero\n"
"# } (SIZE (16))\n"
"\n"
"uint16 lane_attributes_trackedvehicle\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/LaneAttributesParking\n"
"#\n"
"# LaneAttributesParking.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The LaneAttributes-Parking data element relates specific properties found in a vehicle parking lane type.\n"
"#\n"
"# LaneAttributes-Parking ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# -- Parking use details, note that detailed restrictions such as\n"
"# -- allowed hours are sent by way of ITIS codes in the TIM message\n"
"# parkingRevocableLane(0),\n"
"# -- this lane may be activated or not based\n"
"# -- on the current SPAT message contents\n"
"# -- if not asserted, the lane is ALWAYS present\n"
"# parallelParkingInUse(1),\n"
"# headInParkingInUse(2),\n"
"# doNotParkZone(3),\n"
"# -- used to denote fire hydrants as well as\n"
"# -- short disruptions in a parking zone\n"
"# parkingForBusUse(4),\n"
"# parkingForTaxiUse(5),\n"
"# noPublicParkingUse(6)\n"
"# -- private parking, as in front of\n"
"# -- private property\n"
"# -- Bits 7~15 reserved and set to zero\n"
"# } (SIZE (16))\n"
"\n"
"uint16  lane_attributes_parking\n"
;
  }

  static const char* value(const ::j2735_msgs::LaneAttributes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.directional_use);
      stream.next(m.shared_with);
      stream.next(m.laneType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneAttributes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::LaneAttributes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::LaneAttributes_<ContainerAllocator>& v)
  {
    s << indent << "directional_use: ";
    s << std::endl;
    Printer< ::j2735_msgs::LaneDirection_<ContainerAllocator> >::stream(s, indent + "  ", v.directional_use);
    s << indent << "shared_with: ";
    s << std::endl;
    Printer< ::j2735_msgs::LaneSharing_<ContainerAllocator> >::stream(s, indent + "  ", v.shared_with);
    s << indent << "laneType: ";
    s << std::endl;
    Printer< ::j2735_msgs::LaneTypeAttributes_<ContainerAllocator> >::stream(s, indent + "  ", v.laneType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_LANEATTRIBUTES_H
