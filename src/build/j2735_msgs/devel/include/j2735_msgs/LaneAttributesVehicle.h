// Generated by gencpp from file j2735_msgs/LaneAttributesVehicle.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_LANEATTRIBUTESVEHICLE_H
#define J2735_MSGS_MESSAGE_LANEATTRIBUTESVEHICLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct LaneAttributesVehicle_
{
  typedef LaneAttributesVehicle_<ContainerAllocator> Type;

  LaneAttributesVehicle_()
    : lane_attributes_vehicle(0)  {
    }
  LaneAttributesVehicle_(const ContainerAllocator& _alloc)
    : lane_attributes_vehicle(0)  {
  (void)_alloc;
    }



   typedef uint8_t _lane_attributes_vehicle_type;
  _lane_attributes_vehicle_type lane_attributes_vehicle;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ISVEHICLEREVOCABLELANE)
  #undef ISVEHICLEREVOCABLELANE
#endif
#if defined(_WIN32) && defined(ISVEHICLEFLYOVERLANE)
  #undef ISVEHICLEFLYOVERLANE
#endif
#if defined(_WIN32) && defined(HOVLANEUSEONLY)
  #undef HOVLANEUSEONLY
#endif
#if defined(_WIN32) && defined(RESTRICTEDTOBUSUSE)
  #undef RESTRICTEDTOBUSUSE
#endif
#if defined(_WIN32) && defined(RESTRICTEDTOTAXIUSE)
  #undef RESTRICTEDTOTAXIUSE
#endif
#if defined(_WIN32) && defined(RESTRICTEDFROMPUBLICUSE)
  #undef RESTRICTEDFROMPUBLICUSE
#endif
#if defined(_WIN32) && defined(HASIRBEACONCOVERAGE)
  #undef HASIRBEACONCOVERAGE
#endif
#if defined(_WIN32) && defined(PERMISSIONONREQUEST)
  #undef PERMISSIONONREQUEST
#endif

  enum {
    ISVEHICLEREVOCABLELANE = 0u,
    ISVEHICLEFLYOVERLANE = 1u,
    HOVLANEUSEONLY = 2u,
    RESTRICTEDTOBUSUSE = 3u,
    RESTRICTEDTOTAXIUSE = 4u,
    RESTRICTEDFROMPUBLICUSE = 5u,
    HASIRBEACONCOVERAGE = 6u,
    PERMISSIONONREQUEST = 7u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> const> ConstPtr;

}; // struct LaneAttributesVehicle_

typedef ::j2735_msgs::LaneAttributesVehicle_<std::allocator<void> > LaneAttributesVehicle;

typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesVehicle > LaneAttributesVehiclePtr;
typedef boost::shared_ptr< ::j2735_msgs::LaneAttributesVehicle const> LaneAttributesVehicleConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator2> & rhs)
{
  return lhs.lane_attributes_vehicle == rhs.lane_attributes_vehicle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator1> & lhs, const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78cc6cbb02a8ffeee057c172dd545dbc";
  }

  static const char* value(const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78cc6cbb02a8ffeeULL;
  static const uint64_t static_value2 = 0xe057c172dd545dbcULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/LaneAttributesVehicle";
  }

  static const char* value(const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# LaneAttributesVehicle.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# LaneAttributes-Vehicle ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# isVehicleRevocableLane (0),\n"
"#       -- this lane may be activated or not based\n"
"#       -- on the current SPAT message contents\n"
"#       -- if not asserted, the lane is ALWAYS present\n"
"# isVehicleFlyOverLane (1),\n"
"#       -- path of lane is not at grade\n"
"# hovLaneUseOnly (2),\n"
"# restrictedToBusUse (3),\n"
"# restrictedToTaxiUse(4),\n"
"# restrictedFromPublicUse (5),\n"
"# hasIRbeaconCoverage(6),\n"
"# permissionOnRequest(7)\n"
"#       -- e.g. to inform about a lane for e-cars\n"
"# } (SIZE (8,...))\n"
"\n"
"uint8 lane_attributes_vehicle\n"
"\n"
"uint8 ISVEHICLEREVOCABLELANE=0\n"
"uint8 ISVEHICLEFLYOVERLANE=1\n"
"uint8 HOVLANEUSEONLY=2\n"
"uint8 RESTRICTEDTOBUSUSE=3\n"
"uint8 RESTRICTEDTOTAXIUSE=4\n"
"uint8 RESTRICTEDFROMPUBLICUSE=5\n"
"uint8 HASIRBEACONCOVERAGE=6\n"
"uint8 PERMISSIONONREQUEST=7\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_attributes_vehicle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneAttributesVehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::LaneAttributesVehicle_<ContainerAllocator>& v)
  {
    s << indent << "lane_attributes_vehicle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lane_attributes_vehicle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_LANEATTRIBUTESVEHICLE_H
