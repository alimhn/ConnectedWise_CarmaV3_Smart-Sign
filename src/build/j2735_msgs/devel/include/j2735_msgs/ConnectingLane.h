// Generated by gencpp from file j2735_msgs/ConnectingLane.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_CONNECTINGLANE_H
#define J2735_MSGS_MESSAGE_CONNECTINGLANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/AllowedManeuvers.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct ConnectingLane_
{
  typedef ConnectingLane_<ContainerAllocator> Type;

  ConnectingLane_()
    : lane(0)
    , maneuver()
    , maneuver_exists(false)  {
    }
  ConnectingLane_(const ContainerAllocator& _alloc)
    : lane(0)
    , maneuver(_alloc)
    , maneuver_exists(false)  {
  (void)_alloc;
    }



   typedef uint16_t _lane_type;
  _lane_type lane;

   typedef  ::j2735_msgs::AllowedManeuvers_<ContainerAllocator>  _maneuver_type;
  _maneuver_type maneuver;

   typedef uint8_t _maneuver_exists_type;
  _maneuver_exists_type maneuver_exists;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LANE_UNAVAILABLE)
  #undef LANE_UNAVAILABLE
#endif

  enum {
    LANE_UNAVAILABLE = 0u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::ConnectingLane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::ConnectingLane_<ContainerAllocator> const> ConstPtr;

}; // struct ConnectingLane_

typedef ::j2735_msgs::ConnectingLane_<std::allocator<void> > ConnectingLane;

typedef boost::shared_ptr< ::j2735_msgs::ConnectingLane > ConnectingLanePtr;
typedef boost::shared_ptr< ::j2735_msgs::ConnectingLane const> ConnectingLaneConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::ConnectingLane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::ConnectingLane_<ContainerAllocator1> & lhs, const ::j2735_msgs::ConnectingLane_<ContainerAllocator2> & rhs)
{
  return lhs.lane == rhs.lane &&
    lhs.maneuver == rhs.maneuver &&
    lhs.maneuver_exists == rhs.maneuver_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::ConnectingLane_<ContainerAllocator1> & lhs, const ::j2735_msgs::ConnectingLane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::ConnectingLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::ConnectingLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::ConnectingLane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39012b597fc8bbc11af942fd310810ca";
  }

  static const char* value(const ::j2735_msgs::ConnectingLane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39012b597fc8bbc1ULL;
  static const uint64_t static_value2 = 0x1af942fd310810caULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/ConnectingLane";
  }

  static const char* value(const ::j2735_msgs::ConnectingLane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# ConnectingLane.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# ConnectingLane ::= SEQUENCE {\n"
"# lane LaneID,\n"
"# -- Index of the connecting lane\n"
"# maneuver AllowedManeuvers OPTIONAL\n"
"# -- The Maneuver between\n"
"# -- the enclosing lane and this lane\n"
"# -- at the stop line to connect them\n"
"# }\n"
"\n"
"# LaneID ::= INTEGER (0..255)\n"
"# -- the value 0 shall be used when the lane ID is\n"
"# -- not available or not known\n"
"# -- the value 255 is reserved for future use\n"
"uint16 lane\n"
"uint16 LANE_UNAVAILABLE=0\n"
"\n"
"# -- the permitted maneuvers for this lane\n"
"# AllowedManeuvers ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# -- Allowed maneuvers at path end (stop line)\n"
"# -- *** All maneuvers with bits not set are therefore prohibited ! ***\n"
"# -- A value of zero shall be used for unknown, indicating no Maneuver\n"
"j2735_msgs/AllowedManeuvers maneuver\n"
"bool maneuver_exists\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/AllowedManeuvers\n"
"#\n"
"# AllowedManeuvers.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# AllowedManeuvers ::= BIT STRING {\n"
"# -- With bits as defined:\n"
"# -- Allowed maneuvers at path end (stop line)\n"
"# -- All maneuvers with bits not set are therefore prohibited !\n"
"# -- A value of zero shall be used for unknown, indicating no Maneuver\n"
"# maneuverStraightAllowed(0),\n"
"# -- a Straight movement is allowed in this lane\n"
"# maneuverLeftAllowed(1),\n"
"# -- a Left Turn movement is allowed in this lane\n"
"# maneuverRightAllowed(2),\n"
"# -- a Right Turn movement is allowed in this lane\n"
"# maneuverUTurnAllowed(3),\n"
"# -- a U turn movement is allowed in this lane\n"
"# maneuverLeftTurnOnRedAllowed (4),\n"
"# -- a Stop, and then proceed when safe movement\n"
"# -- is allowed in this lane\n"
"# maneuverRightTurnOnRedAllowed (5),\n"
"# -- a Stop, and then proceed when safe movement\n"
"# -- is allowed in this lane\n"
"# maneuverLaneChangeAllowed(6),\n"
"# -- a movement which changes to an outer lane\n"
"# -- on the egress side is allowed in this lane\n"
"# -- (example: left into either outbound lane)\n"
"# maneuverNoStoppingAllowed(7),\n"
"# -- the vehicle should not stop at the stop line\n"
"# -- (example: a flashing green arrow)\n"
"# yieldAllwaysRequired(8),\n"
"# -- the allowed movements above are not protected\n"
"# -- (example: an permanent yellow condition)\n"
"# goWithHalt(9),\n"
"# -- after making a full stop, may proceed\n"
"# caution(10),\n"
"# -- proceed past stop line with caution\n"
"# reserved1(11)\n"
"# -- used to align to 12 Bit Field\n"
"# } (SIZE(12))\n"
"\n"
"uint16 allowed_maneuvers\n"
"\n"
"# Bit flags\n"
"uint16 STRAIGHT=1\n"
"uint16 LEFT_TURN=2\n"
"uint16 RIGHT_TURN=4\n"
"uint16 U_TURN=8\n"
"uint16 LEFT_TURN_ON_RED=16\n"
"uint16 RIGHT_TURN_ON_RED=32\n"
"uint16 LANE_CHANGE=64\n"
"uint16 NO_STOPPING_ALLOWED=128\n"
"uint16 ALWAYS_YIELD=256\n"
"uint16 GO_WITH_HALT=512\n"
"uint16 CAUTION=1024\n"
;
  }

  static const char* value(const ::j2735_msgs::ConnectingLane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane);
      stream.next(m.maneuver);
      stream.next(m.maneuver_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConnectingLane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::ConnectingLane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::ConnectingLane_<ContainerAllocator>& v)
  {
    s << indent << "lane: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lane);
    s << indent << "maneuver: ";
    s << std::endl;
    Printer< ::j2735_msgs::AllowedManeuvers_<ContainerAllocator> >::stream(s, indent + "  ", v.maneuver);
    s << indent << "maneuver_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maneuver_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_CONNECTINGLANE_H
