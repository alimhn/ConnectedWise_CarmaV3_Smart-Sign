// Generated by gencpp from file j2735_msgs/PathNode.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_PATHNODE_H
#define J2735_MSGS_MESSAGE_PATHNODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct PathNode_
{
  typedef PathNode_<ContainerAllocator> Type;

  PathNode_()
    : x(0)
    , y(0)
    , z(0)
    , z_exists(false)
    , width(0)
    , width_exists(false)  {
    }
  PathNode_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , z(0)
    , z_exists(false)
    , width(0)
    , width_exists(false)  {
  (void)_alloc;
    }



   typedef int16_t _x_type;
  _x_type x;

   typedef int16_t _y_type;
  _y_type y;

   typedef int16_t _z_type;
  _z_type z;

   typedef uint8_t _z_exists_type;
  _z_exists_type z_exists;

   typedef int8_t _width_type;
  _width_type width;

   typedef uint8_t _width_exists_type;
  _width_exists_type width_exists;





  typedef boost::shared_ptr< ::j2735_msgs::PathNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::PathNode_<ContainerAllocator> const> ConstPtr;

}; // struct PathNode_

typedef ::j2735_msgs::PathNode_<std::allocator<void> > PathNode;

typedef boost::shared_ptr< ::j2735_msgs::PathNode > PathNodePtr;
typedef boost::shared_ptr< ::j2735_msgs::PathNode const> PathNodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::PathNode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::PathNode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::PathNode_<ContainerAllocator1> & lhs, const ::j2735_msgs::PathNode_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.z_exists == rhs.z_exists &&
    lhs.width == rhs.width &&
    lhs.width_exists == rhs.width_exists;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::PathNode_<ContainerAllocator1> & lhs, const ::j2735_msgs::PathNode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::PathNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::PathNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::PathNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::PathNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::PathNode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::PathNode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::PathNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a67109c239b97f03cda3ba46da2c080";
  }

  static const char* value(const ::j2735_msgs::PathNode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a67109c239b97f0ULL;
  static const uint64_t static_value2 = 0x3cda3ba46da2c080ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::PathNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/PathNode";
  }

  static const char* value(const ::j2735_msgs::PathNode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::PathNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# PathNode.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Misheel Bayartsengel\n"
"# @version 0.1\n"
"#\n"
"# The positive x direction proceeds eastward, positive y proceeds\n"
"# northward, and positive z proceeds away from the center of the Earth. \n"
"\n"
"# X ::= INTEGER (-32768..32767)\n"
"#   -- units are in cm\n"
"int16 x\n"
"int16 y\n"
"int16 z\n"
"\n"
"bool z_exists\n"
"\n"
"# Width ::= INTEGER (-128..127)\n"
"#   -- units are in cm\n"
"int8 width\n"
"bool width_exists\n"
;
  }

  static const char* value(const ::j2735_msgs::PathNode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::PathNode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.z_exists);
      stream.next(m.width);
      stream.next(m.width_exists);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathNode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::PathNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::PathNode_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.z);
    s << indent << "z_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z_exists);
    s << indent << "width: ";
    Printer<int8_t>::stream(s, indent + "  ", v.width);
    s << indent << "width_exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.width_exists);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_PATHNODE_H
