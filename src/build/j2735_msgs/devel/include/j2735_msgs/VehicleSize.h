// Generated by gencpp from file j2735_msgs/VehicleSize.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_VEHICLESIZE_H
#define J2735_MSGS_MESSAGE_VEHICLESIZE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct VehicleSize_
{
  typedef VehicleSize_<ContainerAllocator> Type;

  VehicleSize_()
    : vehicle_width(0)
    , vehicle_length(0)  {
    }
  VehicleSize_(const ContainerAllocator& _alloc)
    : vehicle_width(0)
    , vehicle_length(0)  {
  (void)_alloc;
    }



   typedef uint16_t _vehicle_width_type;
  _vehicle_width_type vehicle_width;

   typedef uint16_t _vehicle_length_type;
  _vehicle_length_type vehicle_length;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VEHICLE_WIDTH_UNAVAILABLE)
  #undef VEHICLE_WIDTH_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(VEHICLE_WIDTH_MAX)
  #undef VEHICLE_WIDTH_MAX
#endif
#if defined(_WIN32) && defined(VEHICLE_WIDTH_MIN)
  #undef VEHICLE_WIDTH_MIN
#endif
#if defined(_WIN32) && defined(VEHICLE_LENGTH_UNAVAILABLE)
  #undef VEHICLE_LENGTH_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(VEHICLE_LENGTH_MAX)
  #undef VEHICLE_LENGTH_MAX
#endif
#if defined(_WIN32) && defined(VEHICLE_LENGTH_MIN)
  #undef VEHICLE_LENGTH_MIN
#endif

  enum {
    VEHICLE_WIDTH_UNAVAILABLE = 0u,
    VEHICLE_WIDTH_MAX = 1023u,
    VEHICLE_WIDTH_MIN = 1u,
    VEHICLE_LENGTH_UNAVAILABLE = 0u,
    VEHICLE_LENGTH_MAX = 4095u,
    VEHICLE_LENGTH_MIN = 1u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::VehicleSize_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::VehicleSize_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleSize_

typedef ::j2735_msgs::VehicleSize_<std::allocator<void> > VehicleSize;

typedef boost::shared_ptr< ::j2735_msgs::VehicleSize > VehicleSizePtr;
typedef boost::shared_ptr< ::j2735_msgs::VehicleSize const> VehicleSizeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::VehicleSize_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::VehicleSize_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::VehicleSize_<ContainerAllocator1> & lhs, const ::j2735_msgs::VehicleSize_<ContainerAllocator2> & rhs)
{
  return lhs.vehicle_width == rhs.vehicle_width &&
    lhs.vehicle_length == rhs.vehicle_length;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::VehicleSize_<ContainerAllocator1> & lhs, const ::j2735_msgs::VehicleSize_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::VehicleSize_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::VehicleSize_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::VehicleSize_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::VehicleSize_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::VehicleSize_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::VehicleSize_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::VehicleSize_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b73dfa0d45d588029a74086992728a81";
  }

  static const char* value(const ::j2735_msgs::VehicleSize_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb73dfa0d45d58802ULL;
  static const uint64_t static_value2 = 0x9a74086992728a81ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::VehicleSize_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/VehicleSize";
  }

  static const char* value(const ::j2735_msgs::VehicleSize_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::VehicleSize_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# VehicleSize.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The vehicle length and width \n"
"\n"
"#VehicleSize ::= SEQUENCE {\n"
"#   width     VehicleWidth,\n"
"#   length    VehicleLength\n"
"#   }\n"
"#\n"
"\n"
"#VehicleWidth ::= INTEGER (0..1023) -- LSB units are 1 cm with a range of >10 meters\n"
"#  -- Convert to meter with factor 0.01 when this field is used\n"
"uint16 vehicle_width\n"
"\n"
"uint16 VEHICLE_WIDTH_UNAVAILABLE = 0\n"
"uint16 VEHICLE_WIDTH_MAX = 1023\n"
"uint16 VEHICLE_WIDTH_MIN = 1\n"
"\n"
"#VehicleLength ::= INTEGER (0.. 4095) -- LSB units of 1 cm with a range of >40 meters\n"
"#  -- Convert to meter with factor 0.01 when this field is used\n"
"uint16 vehicle_length\n"
"\n"
"uint16 VEHICLE_LENGTH_UNAVAILABLE = 0\n"
"uint16 VEHICLE_LENGTH_MAX = 4095\n"
"uint16 VEHICLE_LENGTH_MIN = 1\n"
;
  }

  static const char* value(const ::j2735_msgs::VehicleSize_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::VehicleSize_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicle_width);
      stream.next(m.vehicle_length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleSize_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::VehicleSize_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::VehicleSize_<ContainerAllocator>& v)
  {
    s << indent << "vehicle_width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vehicle_width);
    s << indent << "vehicle_length: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vehicle_length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_VEHICLESIZE_H
