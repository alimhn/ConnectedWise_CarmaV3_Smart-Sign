// Generated by gencpp from file j2735_msgs/TrafficControlGeometry.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TRAFFICCONTROLGEOMETRY_H
#define J2735_MSGS_MESSAGE_TRAFFICCONTROLGEOMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/PathNode.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct TrafficControlGeometry_
{
  typedef TrafficControlGeometry_<ContainerAllocator> Type;

  TrafficControlGeometry_()
    : proj()
    , datum()
    , reftime(0)
    , reflon(0)
    , reflat(0)
    , refelv(0)
    , heading(0)
    , nodes()  {
    }
  TrafficControlGeometry_(const ContainerAllocator& _alloc)
    : proj(_alloc)
    , datum(_alloc)
    , reftime(0)
    , reflon(0)
    , reflat(0)
    , refelv(0)
    , heading(0)
    , nodes(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _proj_type;
  _proj_type proj;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _datum_type;
  _datum_type datum;

   typedef uint64_t _reftime_type;
  _reftime_type reftime;

   typedef int32_t _reflon_type;
  _reflon_type reflon;

   typedef int32_t _reflat_type;
  _reflat_type reflat;

   typedef int32_t _refelv_type;
  _refelv_type refelv;

   typedef uint16_t _heading_type;
  _heading_type heading;

   typedef std::vector< ::j2735_msgs::PathNode_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::PathNode_<ContainerAllocator> >::other >  _nodes_type;
  _nodes_type nodes;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(REFLON_UNAVAILABLE)
  #undef REFLON_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(REFLON_MAX)
  #undef REFLON_MAX
#endif
#if defined(_WIN32) && defined(REFLON_MIN)
  #undef REFLON_MIN
#endif
#if defined(_WIN32) && defined(REFLAT_UNAVAILABLE)
  #undef REFLAT_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(REFLAT_MAX)
  #undef REFLAT_MAX
#endif
#if defined(_WIN32) && defined(REFLAT_MIN)
  #undef REFLAT_MIN
#endif
#if defined(_WIN32) && defined(REFELV_UNKNOWN)
  #undef REFELV_UNKNOWN
#endif
#if defined(_WIN32) && defined(REFELV_MAX)
  #undef REFELV_MAX
#endif
#if defined(_WIN32) && defined(REFELV_MIN)
  #undef REFELV_MIN
#endif
#if defined(_WIN32) && defined(HEADING_MAX)
  #undef HEADING_MAX
#endif
#if defined(_WIN32) && defined(HEADING_MIN)
  #undef HEADING_MIN
#endif

  enum {
    REFLON_UNAVAILABLE = 1800000001,
    REFLON_MAX = 1800000000,
    REFLON_MIN = -1799999999,
    REFLAT_UNAVAILABLE = 900000001,
    REFLAT_MAX = 900000000,
    REFLAT_MIN = -900000000,
    REFELV_UNKNOWN = 0,
    REFELV_MAX = 65535,
    REFELV_MIN = 1,
    HEADING_MAX = 3599u,
    HEADING_MIN = 0u,
  };


  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficControlGeometry_

typedef ::j2735_msgs::TrafficControlGeometry_<std::allocator<void> > TrafficControlGeometry;

typedef boost::shared_ptr< ::j2735_msgs::TrafficControlGeometry > TrafficControlGeometryPtr;
typedef boost::shared_ptr< ::j2735_msgs::TrafficControlGeometry const> TrafficControlGeometryConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator2> & rhs)
{
  return lhs.proj == rhs.proj &&
    lhs.datum == rhs.datum &&
    lhs.reftime == rhs.reftime &&
    lhs.reflon == rhs.reflon &&
    lhs.reflat == rhs.reflat &&
    lhs.refelv == rhs.refelv &&
    lhs.heading == rhs.heading &&
    lhs.nodes == rhs.nodes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ffaf44999ab634ac9a3f1c4f537cc73";
  }

  static const char* value(const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ffaf44999ab634aULL;
  static const uint64_t static_value2 = 0xc9a3f1c4f537cc73ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TrafficControlGeometry";
  }

  static const char* value(const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TrafficControlGeometry.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# TrafficControlGeometry ::= SEQUENCE\n"
"# {\n"
"# 	proj IA5String (SIZE(0..63)),\n"
"# 	datum IA5String (SIZE(0..63)),\n"
"# 	reftime EpochMins,\n"
"# 	reflon Longitude,\n"
"# 	reflat Latitude,\n"
"# 	refelv Elevation, -- decimeter offset -4096 from reference datum\n"
"# 	heading INTEGER (0..3599), -- initial path heading clockwise from north in tenths of degrees\n"
"# 	nodes SEQUENCE (SIZE(1..255)) OF PathNode\n"
"# }\n"
"\n"
"# proj IA5String (SIZE(0..63)),\n"
"string proj\n"
"\n"
"# datum IA5String (SIZE(0..63)),\n"
"string datum\n"
"\n"
"# reftime EpochMins INTEGER (0..153722867280912) -- minutes since epoch January 1, 1970 00:00 UTC\n"
"uint64 reftime\n"
"\n"
"# reflon Longitude ::= INTEGER (-1799999999..1800000001)-- geographic longitude expressed in 1/10th microdegrees, 1800000001 represents null\n"
"int32 reflon\n"
"\n"
"int32 REFLON_UNAVAILABLE = 1800000001\n"
"int32 REFLON_MAX = 1800000000\n"
"int32 REFLON_MIN = -1799999999\n"
"\n"
"# reflat Latitude ::= INTEGER (-900000000..900000001) -- geographic latitude expressed in 1/10th microdegrees, 900000001 represents null\n"
"int32 reflat\n"
"\n"
"int32 REFLAT_UNAVAILABLE = 900000001\n"
"int32 REFLAT_MAX = 900000000\n"
"int32 REFLAT_MIN = -900000000\n"
"\n"
"# refelv Elevation ::= INTEGER (0..65535) -- offset by 4096, -4096 represents unknown, -409.5 to 6143.9 meters relative to referemce datum\n"
"int32 refelv\n"
"\n"
"int32 REFELV_UNKNOWN = 0\n"
"int32 REFELV_MAX = 65535\n"
"int32 REFELV_MIN = 1\n"
"\n"
"# heading INTEGER (0..3599) -- initial path heading clockwise from north in tenths of degrees\n"
"uint16 heading\n"
"uint16 HEADING_MAX = 3599\n"
"uint16 HEADING_MIN = 0\n"
"\n"
"# nodes SEQUENCE (SIZE(1..255)) OF PathNode\n"
"j2735_msgs/PathNode[] nodes\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/PathNode\n"
"#\n"
"# PathNode.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Misheel Bayartsengel\n"
"# @version 0.1\n"
"#\n"
"# The positive x direction proceeds eastward, positive y proceeds\n"
"# northward, and positive z proceeds away from the center of the Earth. \n"
"\n"
"# X ::= INTEGER (-32768..32767)\n"
"#   -- units are in cm\n"
"int16 x\n"
"int16 y\n"
"int16 z\n"
"\n"
"bool z_exists\n"
"\n"
"# Width ::= INTEGER (-128..127)\n"
"#   -- units are in cm\n"
"int8 width\n"
"bool width_exists\n"
;
  }

  static const char* value(const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.proj);
      stream.next(m.datum);
      stream.next(m.reftime);
      stream.next(m.reflon);
      stream.next(m.reflat);
      stream.next(m.refelv);
      stream.next(m.heading);
      stream.next(m.nodes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficControlGeometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TrafficControlGeometry_<ContainerAllocator>& v)
  {
    s << indent << "proj: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.proj);
    s << indent << "datum: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.datum);
    s << indent << "reftime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.reftime);
    s << indent << "reflon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reflon);
    s << indent << "reflat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reflat);
    s << indent << "refelv: ";
    Printer<int32_t>::stream(s, indent + "  ", v.refelv);
    s << indent << "heading: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.heading);
    s << indent << "nodes[]" << std::endl;
    for (size_t i = 0; i < v.nodes.size(); ++i)
    {
      s << indent << "  nodes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::PathNode_<ContainerAllocator> >::stream(s, indent + "    ", v.nodes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TRAFFICCONTROLGEOMETRY_H
