// Generated by gencpp from file j2735_msgs/TrafficControlBounds.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_TRAFFICCONTROLBOUNDS_H
#define J2735_MSGS_MESSAGE_TRAFFICCONTROLBOUNDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/OffsetPoint.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct TrafficControlBounds_
{
  typedef TrafficControlBounds_<ContainerAllocator> Type;

  TrafficControlBounds_()
    : oldest(0)
    , reflon(0)
    , reflat(0)
    , offsets()  {
    }
  TrafficControlBounds_(const ContainerAllocator& _alloc)
    : oldest(0)
    , reflon(0)
    , reflat(0)
    , offsets()  {
  (void)_alloc;
      offsets.assign( ::j2735_msgs::OffsetPoint_<ContainerAllocator> (_alloc));
  }



   typedef uint64_t _oldest_type;
  _oldest_type oldest;

   typedef int32_t _reflon_type;
  _reflon_type reflon;

   typedef int32_t _reflat_type;
  _reflat_type reflat;

   typedef boost::array< ::j2735_msgs::OffsetPoint_<ContainerAllocator> , 3>  _offsets_type;
  _offsets_type offsets;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(REFLON_MAX)
  #undef REFLON_MAX
#endif
#if defined(_WIN32) && defined(REFLON_MIN)
  #undef REFLON_MIN
#endif
#if defined(_WIN32) && defined(REFLON_UNAVAILABLE)
  #undef REFLON_UNAVAILABLE
#endif
#if defined(_WIN32) && defined(REFLAT_MAX)
  #undef REFLAT_MAX
#endif
#if defined(_WIN32) && defined(REFLAT_MIN)
  #undef REFLAT_MIN
#endif
#if defined(_WIN32) && defined(REFLAT_UNAVAILABLE)
  #undef REFLAT_UNAVAILABLE
#endif

  enum {
    REFLON_MAX = 1800000000,
    REFLON_MIN = -1799999999,
    REFLON_UNAVAILABLE = 1800000001,
    REFLAT_MAX = 900000000,
    REFLAT_MIN = -900000000,
    REFLAT_UNAVAILABLE = 900000001,
  };


  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficControlBounds_

typedef ::j2735_msgs::TrafficControlBounds_<std::allocator<void> > TrafficControlBounds;

typedef boost::shared_ptr< ::j2735_msgs::TrafficControlBounds > TrafficControlBoundsPtr;
typedef boost::shared_ptr< ::j2735_msgs::TrafficControlBounds const> TrafficControlBoundsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator2> & rhs)
{
  return lhs.oldest == rhs.oldest &&
    lhs.reflon == rhs.reflon &&
    lhs.reflat == rhs.reflat &&
    lhs.offsets == rhs.offsets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator1> & lhs, const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "306f71a9cda43001373a32c7e26b44da";
  }

  static const char* value(const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x306f71a9cda43001ULL;
  static const uint64_t static_value2 = 0x373a32c7e26b44daULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/TrafficControlBounds";
  }

  static const char* value(const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# TrafficControlBounds.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"\n"
"#TrafficControlBounds ::= SEQUENCE\n"
"#{\n"
"#	oldest EpochMins, -- timestamp of oldest traffic control message within bounds\n"
"#	reflon Longitude, -- initial vertex reference longitude\n"
"#	reflat Latitude, -- initial vertex reference latitude\n"
"#	offsets SEQUENCE (SIZE(3)) OF OffsetPoint -- relative vertex positions in scaled meters\n"
"#}\n"
"\n"
"#oldest ::= EpochMins\n"
"uint64 oldest\n"
"\n"
"# reflon ::= INTEGER (-1799999999..1800000000)\n"
"#  -- initial vertex reference longitude\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 180 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"int32 reflon\n"
"\n"
"int32 REFLON_MAX = 1800000000\n"
"int32 REFLON_MIN = -1799999999\n"
"int32 REFLON_UNAVAILABLE = 1800000001\n"
"\n"
"\n"
"# reflat ::= INTEGER (-900000000..900000000)\n"
"#  -- initial vertex reference latitude\n"
"#  -- LSB = 1/10 micro degree\n"
"#  -- Providing a range of plus-minus 90 degrees\n"
"#  -- Convert to degree with factor 0.0000001 when field is used\n"
"int32 reflat\n"
"\n"
"int32 REFLAT_MAX = 900000000\n"
"int32 REFLAT_MIN = -900000000\n"
"int32 REFLAT_UNAVAILABLE = 900000001\n"
"\n"
"#offsets ::= SEQUENCE (SIZE(3)) OF OffsetPoint \n"
"j2735_msgs/OffsetPoint[3] offsets\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/OffsetPoint\n"
"#\n"
"# OffsetPoint.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification not part of the official SAE j2735 standard\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"#OffsetPoint ::= SEQUENCE\n"
"#{\n"
"#	deltax INTEGER (-32768..32767), -- relative horizontal vertex position in scaled meters\n"
"#	deltay INTEGER (-32768..32767) -- relative vertical vertex position in scaled meters\n"
"#}\n"
"\n"
"#deltax ::= INTEGER (-32768..32767)\n"
"int16 deltax\n"
"\n"
"#deltay ::= INTEGER (-32768..32767)\n"
"int16 deltay\n"
"\n"
"\n"
;
  }

  static const char* value(const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.oldest);
      stream.next(m.reflon);
      stream.next(m.reflat);
      stream.next(m.offsets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficControlBounds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::TrafficControlBounds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::TrafficControlBounds_<ContainerAllocator>& v)
  {
    s << indent << "oldest: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.oldest);
    s << indent << "reflon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reflon);
    s << indent << "reflat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reflat);
    s << indent << "offsets[]" << std::endl;
    for (size_t i = 0; i < v.offsets.size(); ++i)
    {
      s << indent << "  offsets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::OffsetPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.offsets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_TRAFFICCONTROLBOUNDS_H
