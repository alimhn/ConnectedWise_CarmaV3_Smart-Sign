// Generated by gencpp from file j2735_msgs/MovementEventList.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_MOVEMENTEVENTLIST_H
#define J2735_MSGS_MESSAGE_MOVEMENTEVENTLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <j2735_msgs/MovementEvent.h>

namespace j2735_msgs
{
template <class ContainerAllocator>
struct MovementEventList_
{
  typedef MovementEventList_<ContainerAllocator> Type;

  MovementEventList_()
    : movement_event_list()  {
    }
  MovementEventList_(const ContainerAllocator& _alloc)
    : movement_event_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::j2735_msgs::MovementEvent_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::j2735_msgs::MovementEvent_<ContainerAllocator> >::other >  _movement_event_list_type;
  _movement_event_list_type movement_event_list;





  typedef boost::shared_ptr< ::j2735_msgs::MovementEventList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::MovementEventList_<ContainerAllocator> const> ConstPtr;

}; // struct MovementEventList_

typedef ::j2735_msgs::MovementEventList_<std::allocator<void> > MovementEventList;

typedef boost::shared_ptr< ::j2735_msgs::MovementEventList > MovementEventListPtr;
typedef boost::shared_ptr< ::j2735_msgs::MovementEventList const> MovementEventListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::MovementEventList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::MovementEventList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::MovementEventList_<ContainerAllocator1> & lhs, const ::j2735_msgs::MovementEventList_<ContainerAllocator2> & rhs)
{
  return lhs.movement_event_list == rhs.movement_event_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::MovementEventList_<ContainerAllocator1> & lhs, const ::j2735_msgs::MovementEventList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::MovementEventList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::MovementEventList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::MovementEventList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::MovementEventList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::MovementEventList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::MovementEventList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::MovementEventList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0cee8d138e003076d7ee729f2f72a499";
  }

  static const char* value(const ::j2735_msgs::MovementEventList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0cee8d138e003076ULL;
  static const uint64_t static_value2 = 0xd7ee729f2f72a499ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::MovementEventList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/MovementEventList";
  }

  static const char* value(const ::j2735_msgs::MovementEventList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::MovementEventList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# MovementEventList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The MovementEventList data frame consists of a list of MovementEvent entries.\n"
"#\n"
"# MovementEventList ::= SEQUENCE (SIZE(1..16)) OF MovementEvent\n"
"#\n"
"\n"
"j2735_msgs/MovementEvent[] movement_event_list\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/MovementEvent\n"
"#\n"
"# MovementEvent.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The MovementEvent data frame contains details about a single movement. It is used by the movement state to\n"
"# convey one of number of movements (typically occurring over a sequence of times) for a SignalGroupID.\n"
"#\n"
"# MovementEvent ::= SEQUENCE {\n"
"# eventState MovementPhaseState,\n"
"# -- Consisting of:\n"
"# -- Phase state (the basic 11 states)\n"
"# -- Directional, protected, or permissive state\n"
"# timing TimeChangeDetails OPTIONAL,\n"
"# -- Timing Data in UTC time stamps for event\n"
"# -- includes start and min/max end times of phase\n"
"# -- confidence and estimated next occurrence\n"
"# speeds AdvisorySpeedList OPTIONAL,\n"
"# -- various speed advisories for use by\n"
"# -- general and specific types of vehicles\n"
"# -- supporting green-wave and other flow needs\n"
"# -- See Section 11 for converting and translating\n"
"# -- speed expressed in mph into units of m/s\n"
"# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-MovementEvent}} OPTIONAL,\n"
"# ...\n"
"# }\n"
"\n"
"j2735_msgs/MovementPhaseState event_state\n"
"\n"
"j2735_msgs/TimeChangeDetails timing\n"
"bool timing_exists\n"
"\n"
"j2735_msgs/AdvisorySpeedList speeds\n"
"bool speeds_exists\n"
"\n"
"#regional #TODO: RegionalExtensions are not yet implemented in asn1c\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/MovementPhaseState\n"
"#\n"
"# MovementEvent.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_MovementPhaseState data element provides the overall current state of the movement (in many cases a\n"
"# signal state), including its core phase state and an indication of whether this state is permissive or protected.\n"
"#\n"
"# MovementPhaseState ::= ENUMERATED {\n"
"# -- Note that based on the regions and the operating mode not every\n"
"# -- phase will be used in all transportation modes and that not\n"
"# -- every phase will be used in all transportation modes\n"
"# unavailable (0),\n"
"# -- This state is used for unknown or error\n"
"# dark (1),\n"
"# -- The signal head is dark (unlit)\n"
"# -- Reds\n"
"# stop-Then-Proceed (2),\n"
"# -- Often called 'flashing red' in US\n"
"# -- Driver Action:\n"
"# -Stop vehicle at stop line.\n"
"# -Do not proceed unless it is safe.\n"
"# -- Note that the right to proceed either right or left\n"
"# -- it is safe may be contained in the lane description\n"
"# -- handle what is called a 'right on red'\n"
"# stop-And-Remain (3),\n"
"# -- e.g. called 'red light' in US\n"
"# -- Driver Action:\n"
"# -Stop vehicle at stop line.\n"
"# -Do not proceed.\n"
"# -- Note that the right to proceed either right or left\n"
"# -- it is safe may be contained in the lane description\n"
"# -- handle what is called a 'right on red'\n"
"# -- Greens\n"
"# pre-Movement (4),\n"
"# -- Not used in the US, red+yellow partly in EU\n"
"# -- Driver Action:\n"
"# -Stop vehicle.\n"
"# -Prepare to proceed (pending green)\n"
"# -(Prepare for transition to green/go)\n"
"# permissive-Movement-Allowed (5),\n"
"# -- Often called 'permissive green' in US\n"
"# -- Driver Action:\n"
"# -Proceed with caution,\n"
"# -must yield to all conflicting traffic\n"
"# -- Conflicting traffic may be present\n"
"# -- in the intersection conflict area\n"
"# protected-Movement-Allowed (6),\n"
"# -- Often called 'protected green' in US\n"
"# -- Driver Action:\n"
"# -Proceed, tossing caution to the wind,\n"
"# -in indicated (allowed) direction.\n"
"# -- Yellows / Ambers\n"
"# -- The vehicle is not allowed to cross the stop bar if it is possible\n"
"# -- to stop without danger.\n"
"# permissive-clearance (7),\n"
"# -- Often called 'permissive yellow' in US\n"
"# -- Driver Action:\n"
"# -Prepare to stop.\n"
"# -Proceed if unable to stop,\n"
"# -Clear Intersection.\n"
"# -- Conflicting traffic may be present\n"
"# -- in the intersection conflict area\n"
"# protected-clearance (8),\n"
"# -- Often called 'protected yellow' in US\n"
"# -- Driver Action:\n"
"# -Prepare to stop.\n"
"# -Proceed if unable to stop,\n"
"# -in indicated direction (to connected lane)\n"
"# -Clear Intersection.\n"
"# caution-Conflicting-Traffic (9)\n"
"# -- Often called 'flashing yellow' in US\n"
"# -- Often used for extended periods of time\n"
"# -- Driver Action:\n"
"# -Proceed with caution,\n"
"# -- Conflicting traffic may be present\n"
"# -- in the intersection conflict area\n"
"# }\n"
"# -- The above number assignments are not used with UPER encoding\n"
"# -- and are only to be used with DER or implicit encoding\n"
"\n"
"uint8 movement_phase_state\n"
"\n"
"uint8 UNAVAILABLE=0\n"
"uint8 DARK=1\n"
"uint8 STOP_THEN_PROCEED=2\n"
"uint8 STOP_AND_REMAIN=3\n"
"uint8 PRE_MOVEMENT=4\n"
"uint8 PERMISSIVE_MOVEMENT_ALLOWED=5\n"
"uint8 PROTECTED_MOVEMENT_ALLOWED=6\n"
"uint8 PERMISSIVE_CLEARANCE=7\n"
"uint8 PROTECTED_CLEARANCE=8\n"
"uint8 CAUTION_CONFLICTING_TRAFFIC=9\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/TimeChangeDetails\n"
"#\n"
"# TimeChangeDetails.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_TimeChangeDetails data frame conveys details about the timing of a phase within a movement. The core\n"
"# data concept expressed is the time stamp (time mark) at which the related phase will change to the next state. This is\n"
"# often found in the MinEndTime element, but the other elements may be needed to convey the full concept when adaptive\n"
"# timing is employed.\n"
"#\n"
"#\n"
"# TimeChangeDetails ::= SEQUENCE {\n"
"# startTime TimeMark OPTIONAL,\n"
"# -- When this phase 1st started\n"
"# minEndTime TimeMark,\n"
"# -- Expected shortest end time\n"
"# maxEndTime TimeMark OPTIONAL,\n"
"# -- Expected longest end time\n"
"# likelyTime TimeMark OPTIONAL,\n"
"# -- Best predicted value based on other data\n"
"# confidence TimeIntervalConfidence OPTIONAL,\n"
"# -- Applies to above time element only\n"
"# nextTime TimeMark OPTIONAL\n"
"# -- A rough estimate of time when\n"
"# -- this phase may next occur again\n"
"# -- used to support various ECO driving power\n"
"# -- management needs.\n"
"# }\n"
"\n"
"# TimeMark ::= INTEGER (0..36001)\n"
"# -- Tenths of a second in the current or next hour\n"
"# -- In units of 1/10th second from UTC time\n"
"# -- A range of 0~36000 covers one hour\n"
"# -- The values 35991..35999 are used when a leap second occurs\n"
"# -- The value 36000 is used to indicate time >3600 seconds\n"
"# -- 36001 is to be used when value undefined or unknown\n"
"# -- Note that this is NOT expressed in GPS time\n"
"# -- or in local time\n"
"uint16 start_time\n"
"bool start_time_exists\n"
"\n"
"uint16 min_end_time\n"
"\n"
"uint16 max_end_time\n"
"bool max_end_time_exists\n"
"\n"
"uint16 likely_time\n"
"bool likely_time_exists\n"
"\n"
"#TimeIntervalConfidence ::= INTEGER (0..15)\n"
"uint8 confidence\n"
"bool confidence_exists\n"
"\n"
"# TimeMark ::= INTEGER (0..36001)\n"
"uint16 next_time\n"
"bool next_time_exists\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/AdvisorySpeedList\n"
"#\n"
"# AdvisorySpeedList.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The AdvisorySpeedList data frame consists of a list of AdvisorySpeed entries.\n"
"#\n"
"# AdvisorySpeedList ::= SEQUENCE (SIZE(1..16)) OF AdvisorySpeed\n"
"\n"
"j2735_msgs/AdvisorySpeed[] advisory_speed_list\n"
"================================================================================\n"
"MSG: j2735_msgs/AdvisorySpeed\n"
"#\n"
"# AdvisorySpeed.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DF_AdvisorySpeed data frame is used to convey a recommended traveling approach speed to an intersection\n"
"# from the message issuer to various travelers and vehicle types. Besides support for various eco-driving applications, this\n"
"# allows transmitting recommended speeds for specialty vehicles such as transit buses.\n"
"# AdvisorySpeed ::= SEQUENCE {\n"
"# type AdvisorySpeedType,\n"
"# -- the type of advisory which this is.\n"
"# speed SpeedAdvice OPTIONAL,\n"
"# -- See Section 11 for converting and translating speed\n"
"# -- expressed in mph into units of m/s\n"
"# -- This element is optional ONLY when superceded\n"
"# -- by the presence of a regional speed element found in\n"
"# -- Reg-AdvisorySpeed entry\n"
"# confidence SpeedConfidence OPTIONAL,\n"
"# -- A confidence value for the above speed\n"
"# distance ZoneLength OPTIONAL,\n"
"# -- Unit = 1 meter,\n"
"# -- The distance indicates the region for which the advised speed\n"
"# -- is recommended, it is specified upstream from the stop bar\n"
"# -- along the connected egressing lane\n"
"# class RestrictionClassID OPTIONAL,\n"
"# -- the vehicle types to which it applies\n"
"# -- when absent, the AdvisorySpeed applies to\n"
"# -- all motor vehicle types\n"
"# regional SEQUENCE (SIZE(1..4)) OF RegionalExtension {{REGION.Reg-AdvisorySpeed}} OPTIONAL,\n"
"# ...\n"
"# }\n"
"\n"
"j2735_msgs/AdvisorySpeedType type\n"
"\n"
"# SpeedAdvice ::= INTEGER (0..500) OPTIONAL\n"
"# This data element represents the recommended velocity of an object, typically a vehicle speed along a roadway,\n"
"# expressed in unsigned units of 0.1 meters per second.\n"
"#-- LSB units are 0.1 m/s^2\n"
"#-- the value 499 shall be used for values at or greater than 49.9 m/s\n"
"#-- the value 500 shall be used to indicate that speed is unavailable\n"
"float32 speed\n"
"float32 SPEED_UNAVAILABLE = 500\n"
"bool speed_exists\n"
"\n"
"# SpeedConfidence is an enum already with 0 as unavailable.\n"
"j2735_msgs/SpeedConfidence confidence\n"
"\n"
"# ZoneLength ::= INTEGER (0..10000)\n"
"# -- Unit = 1 meter, 0 = unknown,\n"
"# -- The value 10000 to be used for Distances >=10000 m\n"
"# -- (e.g. from known point to another point along a\n"
"# -- known path, often against traffic flow direction\n"
"# -- when used for measuring queues)\n"
"uint16 distance\n"
"uint16 DISTANCE_UNKNOWN=0\n"
"bool distance_exists\n"
"\n"
"# RestrictionClassID ::= INTEGER (0..255)\n"
"uint8 restriction_class_id\n"
"bool restriction_class_id_exists\n"
"\n"
"# regional #TODO: RegionalExtensions are not yet implemented in asn1c\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/AdvisorySpeedType\n"
"#\n"
"# AdvisorySpeedType.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_AdvisorySpeedType data element relates the type of travel to which a given speed refers. This element is\n"
"# typically used as part of an AdvisorySpeed data frame for signal phase and timing data.\n"
"#\n"
"# AdvisorySpeedType ::= ENUMERATED {\n"
"# none (0),\n"
"# greenwave (1),\n"
"# ecoDrive (2),\n"
"# transit (3),\n"
"# ...\n"
"# } -- Note: subject to further growth\n"
"\n"
"uint8 advisory_speed_type\n"
"\n"
"uint8 NONE=0\n"
"uint8 GREENWAVE=1\n"
"uint8 ECODRIVE=2\n"
"uint8 TRANSIT=3\n"
"\n"
"================================================================================\n"
"MSG: j2735_msgs/SpeedConfidence\n"
"#\n"
"# SpeedConfidence.msg\n"
"#\n"
"# J2735 2016 message format.\n"
"#\n"
"# @author Mae Fromm\n"
"# @version 0.1\n"
"#\n"
"# The DE_SpeedConfidence data element is used to provide the 95% confidence level for the currently reported\n"
"# value of DE_Speed, taking into account the current calibration and precision of the sensor(s) used to measure and/or\n"
"# calculate the value.\n"
"\n"
"# SpeedConfidence ::= ENUMERATED {\n"
"# unavailable (0), -- Not Equipped or unavailable\n"
"# prec100ms (1), -- 100 meters / sec\n"
"# prec10ms(2), -- 10 meters / sec\n"
"# prec5ms (3), -- 5 meters / sec\n"
"# prec1ms (4), -- 1 meters / sec\n"
"# prec0-1ms (5), -- 0.1 meters / sec\n"
"# prec0-05ms (6), -- -- 0.05 meters / sec\n"
"# prec0-01ms (7) -- -- 0.01 meters / sec\n"
"# }\n"
"\n"
"uint8 speed_confidence\n"
"\n"
"uint8 UNAVAILABLE=0\n"
"uint8 PREC100MS=1\n"
"uint8 PREC10MS=2\n"
"uint8 PREC5MS=3\n"
"uint8 PREC1MS=4\n"
"uint8 PREC0_1MS=5\n"
"uint8 PREC0_05MS=6\n"
"uint8 PREC0_01MS=7\n"
;
  }

  static const char* value(const ::j2735_msgs::MovementEventList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::MovementEventList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.movement_event_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovementEventList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::MovementEventList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::MovementEventList_<ContainerAllocator>& v)
  {
    s << indent << "movement_event_list[]" << std::endl;
    for (size_t i = 0; i < v.movement_event_list.size(); ++i)
    {
      s << indent << "  movement_event_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::j2735_msgs::MovementEvent_<ContainerAllocator> >::stream(s, indent + "    ", v.movement_event_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_MOVEMENTEVENTLIST_H
