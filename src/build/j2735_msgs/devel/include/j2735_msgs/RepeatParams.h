// Generated by gencpp from file j2735_msgs/RepeatParams.msg
// DO NOT EDIT!


#ifndef J2735_MSGS_MESSAGE_REPEATPARAMS_H
#define J2735_MSGS_MESSAGE_REPEATPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace j2735_msgs
{
template <class ContainerAllocator>
struct RepeatParams_
{
  typedef RepeatParams_<ContainerAllocator> Type;

  RepeatParams_()
    : offset(0)
    , period(0)
    , span(0)  {
    }
  RepeatParams_(const ContainerAllocator& _alloc)
    : offset(0)
    , period(0)
    , span(0)  {
  (void)_alloc;
    }



   typedef uint16_t _offset_type;
  _offset_type offset;

   typedef uint16_t _period_type;
  _period_type period;

   typedef uint16_t _span_type;
  _span_type span;





  typedef boost::shared_ptr< ::j2735_msgs::RepeatParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::j2735_msgs::RepeatParams_<ContainerAllocator> const> ConstPtr;

}; // struct RepeatParams_

typedef ::j2735_msgs::RepeatParams_<std::allocator<void> > RepeatParams;

typedef boost::shared_ptr< ::j2735_msgs::RepeatParams > RepeatParamsPtr;
typedef boost::shared_ptr< ::j2735_msgs::RepeatParams const> RepeatParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::j2735_msgs::RepeatParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::j2735_msgs::RepeatParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::j2735_msgs::RepeatParams_<ContainerAllocator1> & lhs, const ::j2735_msgs::RepeatParams_<ContainerAllocator2> & rhs)
{
  return lhs.offset == rhs.offset &&
    lhs.period == rhs.period &&
    lhs.span == rhs.span;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::j2735_msgs::RepeatParams_<ContainerAllocator1> & lhs, const ::j2735_msgs::RepeatParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace j2735_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::RepeatParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::j2735_msgs::RepeatParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::RepeatParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::j2735_msgs::RepeatParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::RepeatParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::j2735_msgs::RepeatParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::j2735_msgs::RepeatParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29a9572bae20d351bcfc7c7e1ca19e93";
  }

  static const char* value(const ::j2735_msgs::RepeatParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29a9572bae20d351ULL;
  static const uint64_t static_value2 = 0xbcfc7c7e1ca19e93ULL;
};

template<class ContainerAllocator>
struct DataType< ::j2735_msgs::RepeatParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "j2735_msgs/RepeatParams";
  }

  static const char* value(const ::j2735_msgs::RepeatParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::j2735_msgs::RepeatParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# RepeatParams.msg\n"
"#\n"
"# Part of the CARMA Cloud geo-fence specification for vehicle internal use.\n"
"#\n"
"# @author Misheel Bayartsengel \n"
"# @version 0.1\n"
"#\n"
"# Description\n"
"# ...\n"
"\n"
"# RepeatParams ::= SEQUENCE\n"
"# {\n"
"# 	offset INTEGER (0..1439), -- shift repetition start relative to midnight local time\n"
"# 	period INTEGER (0..1439), -- minutes between successive time spans\n"
"# 	span INTEGER (0..1439) -- number of minutes schedule is active, must be less than the period\n"
"# }\n"
"\n"
"# Offset \n"
"# shift repetition start relative to midnight local time\n"
"uint16 offset\n"
"\n"
"# Period\n"
"# minutes between successive time spans\n"
"uint16 period\n"
"\n"
"# Span\n"
"# number of minutes schedule is active, must be less than the period\n"
"uint16 span\n"
;
  }

  static const char* value(const ::j2735_msgs::RepeatParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::j2735_msgs::RepeatParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.offset);
      stream.next(m.period);
      stream.next(m.span);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RepeatParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::j2735_msgs::RepeatParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::j2735_msgs::RepeatParams_<ContainerAllocator>& v)
  {
    s << indent << "offset: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.offset);
    s << indent << "period: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.period);
    s << indent << "span: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.span);
  }
};

} // namespace message_operations
} // namespace ros

#endif // J2735_MSGS_MESSAGE_REPEATPARAMS_H
